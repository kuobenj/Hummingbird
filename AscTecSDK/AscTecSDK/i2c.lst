   1              		.file	"i2c.c"
   3              		.text
   4              	.Ltext0:
  27              		.global	I2CMasterState
  28              		.bss
  29              		.align	2
  32              	I2CMasterState:
  33 0000 00000000 		.space	4
  34              		.global	I2CSlaveState
  35              		.align	2
  38              	I2CSlaveState:
  39 0004 00000000 		.space	4
  40              		.global	I2CCount
  41              		.align	2
  44              	I2CCount:
  45 0008 00000000 		.space	4
  46              		.global	RdIndex
  47              		.align	2
  50              	RdIndex:
  51 000c 00000000 		.space	4
  52              		.global	WrIndex
  53              		.align	2
  56              	WrIndex:
  57 0010 00000000 		.space	4
  58              		.text
  59              		.align	2
  61              		.global	I2C0MasterHandler
  63              	I2C0MasterHandler:
   1:i2c.c         **** /*****************************************************************************
   2:i2c.c         ****  *   i2c.c:  I2C C file for Philips LPC214x Family Microprocessors
   3:i2c.c         ****  *
   4:i2c.c         ****  *   Copyright(C) 2006, Philips Semiconductor
   5:i2c.c         ****  *   All rights reserved.
   6:i2c.c         ****  *
   7:i2c.c         ****  *   History
   8:i2c.c         ****  *   2005.10.01  ver 1.00    Prelimnary version, first Release
   9:i2c.c         ****  *   Modifications from Ascending Technologies GmbH
  10:i2c.c         ****  *
  11:i2c.c         **** *****************************************************************************/
  12:i2c.c         **** #include "LPC214x.h"                        /* LPC21xx definitions */
  13:i2c.c         **** #include "type.h"
  14:i2c.c         **** #include "irq.h"
  15:i2c.c         **** #include "i2c.h"
  16:i2c.c         **** 
  17:i2c.c         **** DWORD I2CMasterState = I2C_IDLE;
  18:i2c.c         **** DWORD I2CSlaveState = I2C_IDLE;
  19:i2c.c         **** 
  20:i2c.c         **** DWORD I2CCmd;
  21:i2c.c         **** DWORD I2CMode;
  22:i2c.c         **** 
  23:i2c.c         **** BYTE I2CMasterBuffer[BUFSIZE];
  24:i2c.c         **** BYTE I2CSlaveBuffer[BUFSIZE];
  25:i2c.c         **** DWORD I2CCount = 0;
  26:i2c.c         **** DWORD I2CReadLength;
  27:i2c.c         **** DWORD I2CWriteLength;
  28:i2c.c         **** 
  29:i2c.c         **** DWORD RdIndex = 0;
  30:i2c.c         **** DWORD WrIndex = 0;
  31:i2c.c         **** 
  32:i2c.c         **** /* 
  33:i2c.c         **** From device to device, the I2C communication protocol may vary, 
  34:i2c.c         **** in the example below, the protocol uses repeated start to read data from or 
  35:i2c.c         **** write to the device:
  36:i2c.c         **** For master read: the sequence is: STA,Addr(W),offset,RE-STA,Addr(w),data...STO 
  37:i2c.c         **** for master write: the sequence is: STA,Addr(W),length,RE-STA,Addr(r),data...STO
  38:i2c.c         **** Thus, in state 8, the address is always WRITE. in state 10, the address could 
  39:i2c.c         **** be READ or WRITE depending on the I2CCmd.
  40:i2c.c         **** */   
  41:i2c.c         **** 
  42:i2c.c         **** /*****************************************************************************
  43:i2c.c         **** ** Function name:		I2C0MasterHandler
  44:i2c.c         **** **
  45:i2c.c         **** ** Descriptions:		I2C0 interrupt handler, deal with master mode
  46:i2c.c         **** **				only.
  47:i2c.c         **** **
  48:i2c.c         **** ** parameters:			None
  49:i2c.c         **** ** Returned value:		None
  50:i2c.c         **** ** 
  51:i2c.c         **** *****************************************************************************/
  52:i2c.c         **** void I2C0MasterHandler (void) __irq 
  53:i2c.c         **** {
  65              	.LM0:
  66              		@ Function supports interworking.
  67              		@ args = 0, pretend = 0, frame = 4
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 0DC0A0E1 		mov	ip, sp
  70 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
  71 0008 04B04CE2 		sub	fp, ip, #4
  72 000c 04D04DE2 		sub	sp, sp, #4
  54:i2c.c         ****     BYTE StatValue;
  55:i2c.c         **** 
  56:i2c.c         ****     /* this handler deals with master read and master write only */
  57:i2c.c         ****     StatValue = I20STAT;
  74              	.LM1:
  75 0010 4E32A0E3 		mov	r3, #-536870908
  76 0014 073983E2 		add	r3, r3, #114688
  77 0018 003093E5 		ldr	r3, [r3, #0]
  78 001c 0D304BE5 		strb	r3, [fp, #-13]
  58:i2c.c         ****     
  59:i2c.c         ****     IENABLE;   
  60:i2c.c         ****     switch ( StatValue )
  80              	.LM2:
  81 0020 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
  82 0024 083043E2 		sub	r3, r3, #8
  83 0028 500053E3 		cmp	r3, #80
  84 002c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
  85 0030 060100EA 		b	.L2
  86              		.align	2
  87              	.L10:
  88 0034 78010000 		.word	.L3
  89 0038 50040000 		.word	.L2
  90 003c 50040000 		.word	.L2
  91 0040 50040000 		.word	.L2
  92 0044 50040000 		.word	.L2
  93 0048 50040000 		.word	.L2
  94 004c 50040000 		.word	.L2
  95 0050 50040000 		.word	.L2
  96 0054 B0010000 		.word	.L4
  97 0058 50040000 		.word	.L2
  98 005c 50040000 		.word	.L2
  99 0060 50040000 		.word	.L2
 100 0064 50040000 		.word	.L2
 101 0068 50040000 		.word	.L2
 102 006c 50040000 		.word	.L2
 103 0070 50040000 		.word	.L2
 104 0074 08020000 		.word	.L5
 105 0078 50040000 		.word	.L2
 106 007c 50040000 		.word	.L2
 107 0080 50040000 		.word	.L2
 108 0084 50040000 		.word	.L2
 109 0088 50040000 		.word	.L2
 110 008c 50040000 		.word	.L2
 111 0090 50040000 		.word	.L2
 112 0094 2C040000 		.word	.L6
 113 0098 50040000 		.word	.L2
 114 009c 50040000 		.word	.L2
 115 00a0 50040000 		.word	.L2
 116 00a4 50040000 		.word	.L2
 117 00a8 50040000 		.word	.L2
 118 00ac 50040000 		.word	.L2
 119 00b0 50040000 		.word	.L2
 120 00b4 70020000 		.word	.L7
 121 00b8 50040000 		.word	.L2
 122 00bc 50040000 		.word	.L2
 123 00c0 50040000 		.word	.L2
 124 00c4 50040000 		.word	.L2
 125 00c8 50040000 		.word	.L2
 126 00cc 50040000 		.word	.L2
 127 00d0 50040000 		.word	.L2
 128 00d4 70020000 		.word	.L7
 129 00d8 50040000 		.word	.L2
 130 00dc 50040000 		.word	.L2
 131 00e0 50040000 		.word	.L2
 132 00e4 50040000 		.word	.L2
 133 00e8 50040000 		.word	.L2
 134 00ec 50040000 		.word	.L2
 135 00f0 50040000 		.word	.L2
 136 00f4 50040000 		.word	.L2
 137 00f8 50040000 		.word	.L2
 138 00fc 50040000 		.word	.L2
 139 0100 50040000 		.word	.L2
 140 0104 50040000 		.word	.L2
 141 0108 50040000 		.word	.L2
 142 010c 50040000 		.word	.L2
 143 0110 50040000 		.word	.L2
 144 0114 74030000 		.word	.L8
 145 0118 50040000 		.word	.L2
 146 011c 50040000 		.word	.L2
 147 0120 50040000 		.word	.L2
 148 0124 50040000 		.word	.L2
 149 0128 50040000 		.word	.L2
 150 012c 50040000 		.word	.L2
 151 0130 50040000 		.word	.L2
 152 0134 2C040000 		.word	.L6
 153 0138 50040000 		.word	.L2
 154 013c 50040000 		.word	.L2
 155 0140 50040000 		.word	.L2
 156 0144 50040000 		.word	.L2
 157 0148 50040000 		.word	.L2
 158 014c 50040000 		.word	.L2
 159 0150 50040000 		.word	.L2
 160 0154 8C030000 		.word	.L9
 161 0158 50040000 		.word	.L2
 162 015c 50040000 		.word	.L2
 163 0160 50040000 		.word	.L2
 164 0164 50040000 		.word	.L2
 165 0168 50040000 		.word	.L2
 166 016c 50040000 		.word	.L2
 167 0170 50040000 		.word	.L2
 168 0174 8C030000 		.word	.L9
 169              	.L3:
  61:i2c.c         ****     {
  62:i2c.c         **** 	case 0x08:			/* A Start condition is issued. */
  63:i2c.c         **** 	I20DAT = I2CMasterBuffer[0];
 171              	.LM3:
 172 0178 8E22A0E3 		mov	r2, #-536870904
 173 017c 072982E2 		add	r2, r2, #114688
 174 0180 F8329FE5 		ldr	r3, .L30
 175 0184 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 176 0188 003082E5 		str	r3, [r2, #0]
  64:i2c.c         **** 	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
 178              	.LM4:
 179 018c 0E32A0E3 		mov	r3, #-536870912
 180 0190 073983E2 		add	r3, r3, #114688
 181 0194 183083E2 		add	r3, r3, #24
 182 0198 2820A0E3 		mov	r2, #40
 183 019c 002083E5 		str	r2, [r3, #0]
  65:i2c.c         **** 	I2CMasterState = I2C_STARTED;
 185              	.LM5:
 186 01a0 DC229FE5 		ldr	r2, .L30+4
 187 01a4 0130A0E3 		mov	r3, #1
 188 01a8 003082E5 		str	r3, [r2, #0]
  66:i2c.c         **** 	break;
 190              	.LM6:
 191 01ac AC0000EA 		b	.L11
 192              	.L4:
  67:i2c.c         **** 	
  68:i2c.c         **** 	case 0x10:			/* A repeated started is issued */
  69:i2c.c         **** 	if (  I2CCmd == GET_DEVICE_ID || I2CCmd == GET_TEMPERATURE )
 194              	.LM7:
 195 01b0 D0329FE5 		ldr	r3, .L30+8
 196 01b4 003093E5 		ldr	r3, [r3, #0]
 197 01b8 010053E3 		cmp	r3, #1
 198 01bc 0300000A 		beq	.L12
 199 01c0 C0329FE5 		ldr	r3, .L30+8
 200 01c4 003093E5 		ldr	r3, [r3, #0]
 201 01c8 020053E3 		cmp	r3, #2
 202 01cc 0400001A 		bne	.L14
 203              	.L12:
  70:i2c.c         **** 	{
  71:i2c.c         **** 	    I20DAT = I2CMasterBuffer[2];
 205              	.LM8:
 206 01d0 8E22A0E3 		mov	r2, #-536870904
 207 01d4 072982E2 		add	r2, r2, #114688
 208 01d8 A0329FE5 		ldr	r3, .L30
 209 01dc 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 210 01e0 003082E5 		str	r3, [r2, #0]
 211              	.L14:
  72:i2c.c         **** 	}
  73:i2c.c         **** 	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
 213              	.LM9:
 214 01e4 0E32A0E3 		mov	r3, #-536870912
 215 01e8 073983E2 		add	r3, r3, #114688
 216 01ec 183083E2 		add	r3, r3, #24
 217 01f0 2820A0E3 		mov	r2, #40
 218 01f4 002083E5 		str	r2, [r3, #0]
  74:i2c.c         **** 	I2CMasterState = I2C_RESTARTED;
 220              	.LM10:
 221 01f8 84229FE5 		ldr	r2, .L30+4
 222 01fc 0230A0E3 		mov	r3, #2
 223 0200 003082E5 		str	r3, [r2, #0]
  75:i2c.c         **** 	break;
 225              	.LM11:
 226 0204 960000EA 		b	.L11
 227              	.L5:
  76:i2c.c         **** 	
  77:i2c.c         **** 	case 0x18:			/* Regardless, it's a ACK */
  78:i2c.c         **** 	if ( I2CMasterState == I2C_STARTED )
 229              	.LM12:
 230 0208 74329FE5 		ldr	r3, .L30+4
 231 020c 003093E5 		ldr	r3, [r3, #0]
 232 0210 010053E3 		cmp	r3, #1
 233 0214 0F00001A 		bne	.L15
  79:i2c.c         **** 	{
  80:i2c.c         **** 	    I20DAT = I2CMasterBuffer[1+WrIndex];
 235              	.LM13:
 236 0218 8E22A0E3 		mov	r2, #-536870904
 237 021c 072982E2 		add	r2, r2, #114688
 238 0220 64329FE5 		ldr	r3, .L30+12
 239 0224 003093E5 		ldr	r3, [r3, #0]
 240 0228 011083E2 		add	r1, r3, #1
 241 022c 4C329FE5 		ldr	r3, .L30
 242 0230 0130D3E7 		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 243 0234 003082E5 		str	r3, [r2, #0]
  81:i2c.c         **** 	    WrIndex++;
 245              	.LM14:
 246 0238 4C329FE5 		ldr	r3, .L30+12
 247 023c 003093E5 		ldr	r3, [r3, #0]
 248 0240 012083E2 		add	r2, r3, #1
 249 0244 40329FE5 		ldr	r3, .L30+12
 250 0248 002083E5 		str	r2, [r3, #0]
  82:i2c.c         **** 	    I2CMasterState = DATA_ACK;
 252              	.LM15:
 253 024c 30229FE5 		ldr	r2, .L30+4
 254 0250 0430A0E3 		mov	r3, #4
 255 0254 003082E5 		str	r3, [r2, #0]
 256              	.L15:
  83:i2c.c         **** 	}
  84:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;
 258              	.LM16:
 259 0258 0E32A0E3 		mov	r3, #-536870912
 260 025c 073983E2 		add	r3, r3, #114688
 261 0260 183083E2 		add	r3, r3, #24
 262 0264 0820A0E3 		mov	r2, #8
 263 0268 002083E5 		str	r2, [r3, #0]
  85:i2c.c         **** 	break;
 265              	.LM17:
 266 026c 7C0000EA 		b	.L11
 267              	.L7:
  86:i2c.c         **** 	
  87:i2c.c         **** 	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
  88:i2c.c         **** 	case 0x30:
  89:i2c.c         **** 	if ( WrIndex != I2CWriteLength )
 269              	.LM18:
 270 0270 14329FE5 		ldr	r3, .L30+12
 271 0274 002093E5 		ldr	r2, [r3, #0]
 272 0278 10329FE5 		ldr	r3, .L30+16
 273 027c 003093E5 		ldr	r3, [r3, #0]
 274 0280 030052E1 		cmp	r2, r3
 275 0284 2500000A 		beq	.L17
  90:i2c.c         **** 	{   
  91:i2c.c         **** 	    I20DAT = I2CMasterBuffer[1+WrIndex]; /* this should be the last one */
 277              	.LM19:
 278 0288 8E22A0E3 		mov	r2, #-536870904
 279 028c 072982E2 		add	r2, r2, #114688
 280 0290 F4319FE5 		ldr	r3, .L30+12
 281 0294 003093E5 		ldr	r3, [r3, #0]
 282 0298 011083E2 		add	r1, r3, #1
 283 029c DC319FE5 		ldr	r3, .L30
 284 02a0 0130D3E7 		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 285 02a4 003082E5 		str	r3, [r2, #0]
  92:i2c.c         **** 	    WrIndex++;
 287              	.LM20:
 288 02a8 DC319FE5 		ldr	r3, .L30+12
 289 02ac 003093E5 		ldr	r3, [r3, #0]
 290 02b0 012083E2 		add	r2, r3, #1
 291 02b4 D0319FE5 		ldr	r3, .L30+12
 292 02b8 002083E5 		str	r2, [r3, #0]
  93:i2c.c         **** 	    if ( WrIndex != I2CWriteLength )
 294              	.LM21:
 295 02bc C8319FE5 		ldr	r3, .L30+12
 296 02c0 002093E5 		ldr	r2, [r3, #0]
 297 02c4 C4319FE5 		ldr	r3, .L30+16
 298 02c8 003093E5 		ldr	r3, [r3, #0]
 299 02cc 030052E1 		cmp	r2, r3
 300 02d0 0300000A 		beq	.L19
  94:i2c.c         **** 	    {   
  95:i2c.c         **** 		I2CMasterState = DATA_ACK;
 302              	.LM22:
 303 02d4 A8219FE5 		ldr	r2, .L30+4
 304 02d8 0430A0E3 		mov	r3, #4
 305 02dc 003082E5 		str	r3, [r2, #0]
 306 02e0 1D0000EA 		b	.L23
 307              	.L19:
  96:i2c.c         **** 	    }
  97:i2c.c         **** 	    else
  98:i2c.c         **** 	    {
  99:i2c.c         **** 		I2CMasterState = DATA_NACK;
 309              	.LM23:
 310 02e4 98219FE5 		ldr	r2, .L30+4
 311 02e8 0530A0E3 		mov	r3, #5
 312 02ec 003082E5 		str	r3, [r2, #0]
 100:i2c.c         **** 		if ( I2CReadLength != 0 )
 314              	.LM24:
 315 02f0 9C319FE5 		ldr	r3, .L30+20
 316 02f4 003093E5 		ldr	r3, [r3, #0]
 317 02f8 000053E3 		cmp	r3, #0
 318 02fc 1600000A 		beq	.L23
 101:i2c.c         **** 		{
 102:i2c.c         **** 		    I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
 320              	.LM25:
 321 0300 0E32A0E3 		mov	r3, #-536870912
 322 0304 073983E2 		add	r3, r3, #114688
 323 0308 2020A0E3 		mov	r2, #32
 324 030c 002083E5 		str	r2, [r3, #0]
 103:i2c.c         **** 		    I2CMasterState = I2C_REPEATED_START;
 326              	.LM26:
 327 0310 6C219FE5 		ldr	r2, .L30+4
 328 0314 0330A0E3 		mov	r3, #3
 329 0318 003082E5 		str	r3, [r2, #0]
 330 031c 0E0000EA 		b	.L23
 331              	.L17:
 104:i2c.c         **** 		}
 105:i2c.c         **** 	    }
 106:i2c.c         **** 	}
 107:i2c.c         **** 	else
 108:i2c.c         **** 	{
 109:i2c.c         **** 	    if ( I2CReadLength != 0 )
 333              	.LM27:
 334 0320 6C319FE5 		ldr	r3, .L30+20
 335 0324 003093E5 		ldr	r3, [r3, #0]
 336 0328 000053E3 		cmp	r3, #0
 337 032c 0700000A 		beq	.L24
 110:i2c.c         **** 	    {
 111:i2c.c         **** 		I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
 339              	.LM28:
 340 0330 0E32A0E3 		mov	r3, #-536870912
 341 0334 073983E2 		add	r3, r3, #114688
 342 0338 2020A0E3 		mov	r2, #32
 343 033c 002083E5 		str	r2, [r3, #0]
 112:i2c.c         **** 		I2CMasterState = I2C_REPEATED_START;
 345              	.LM29:
 346 0340 3C219FE5 		ldr	r2, .L30+4
 347 0344 0330A0E3 		mov	r3, #3
 348 0348 003082E5 		str	r3, [r2, #0]
 349 034c 020000EA 		b	.L23
 350              	.L24:
 113:i2c.c         **** 	    }
 114:i2c.c         **** 	    else
 115:i2c.c         **** 	    {
 116:i2c.c         **** 		I2CMasterState = DATA_NACK;
 352              	.LM30:
 353 0350 2C219FE5 		ldr	r2, .L30+4
 354 0354 0530A0E3 		mov	r3, #5
 355 0358 003082E5 		str	r3, [r2, #0]
 356              	.L23:
 117:i2c.c         **** 	    }
 118:i2c.c         **** 	}
 119:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;
 358              	.LM31:
 359 035c 0E32A0E3 		mov	r3, #-536870912
 360 0360 073983E2 		add	r3, r3, #114688
 361 0364 183083E2 		add	r3, r3, #24
 362 0368 0820A0E3 		mov	r2, #8
 363 036c 002083E5 		str	r2, [r3, #0]
 120:i2c.c         **** 	break;
 365              	.LM32:
 366 0370 3B0000EA 		b	.L11
 367              	.L8:
 121:i2c.c         **** 	
 122:i2c.c         **** 	case 0x40:	/* Master Receive, SLA_R has been sent */
 123:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;
 369              	.LM33:
 370 0374 0E32A0E3 		mov	r3, #-536870912
 371 0378 073983E2 		add	r3, r3, #114688
 372 037c 183083E2 		add	r3, r3, #24
 373 0380 0820A0E3 		mov	r2, #8
 374 0384 002083E5 		str	r2, [r3, #0]
 124:i2c.c         **** 	break;
 376              	.LM34:
 377 0388 350000EA 		b	.L11
 378              	.L9:
 125:i2c.c         **** 	
 126:i2c.c         **** 	case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
 127:i2c.c         **** 	case 0x58:
 128:i2c.c         **** 	I2CMasterBuffer[3+RdIndex] = I20DAT;
 380              	.LM35:
 381 038c 04319FE5 		ldr	r3, .L30+24
 382 0390 003093E5 		ldr	r3, [r3, #0]
 383 0394 031083E2 		add	r1, r3, #3
 384 0398 8E32A0E3 		mov	r3, #-536870904
 385 039c 073983E2 		add	r3, r3, #114688
 386 03a0 003093E5 		ldr	r3, [r3, #0]
 387 03a4 FF3003E2 		and	r3, r3, #255
 388 03a8 D0209FE5 		ldr	r2, .L30
 389 03ac 0130C2E7 		strb	r3, [r2, r1]
 129:i2c.c         **** 	RdIndex++;
 391              	.LM36:
 392 03b0 E0309FE5 		ldr	r3, .L30+24
 393 03b4 003093E5 		ldr	r3, [r3, #0]
 394 03b8 012083E2 		add	r2, r3, #1
 395 03bc D4309FE5 		ldr	r3, .L30+24
 396 03c0 002083E5 		str	r2, [r3, #0]
 130:i2c.c         **** 	if ( RdIndex != I2CReadLength )
 398              	.LM37:
 399 03c4 CC309FE5 		ldr	r3, .L30+24
 400 03c8 002093E5 		ldr	r2, [r3, #0]
 401 03cc C0309FE5 		ldr	r3, .L30+20
 402 03d0 003093E5 		ldr	r3, [r3, #0]
 403 03d4 030052E1 		cmp	r2, r3
 404 03d8 0300000A 		beq	.L26
 131:i2c.c         **** 	{   
 132:i2c.c         **** 	    I2CMasterState = DATA_ACK;
 406              	.LM38:
 407 03dc A0209FE5 		ldr	r2, .L30+4
 408 03e0 0430A0E3 		mov	r3, #4
 409 03e4 003082E5 		str	r3, [r2, #0]
 410 03e8 050000EA 		b	.L28
 411              	.L26:
 133:i2c.c         **** 	}
 134:i2c.c         **** 	else
 135:i2c.c         **** 	{
 136:i2c.c         **** 	    RdIndex = 0;
 413              	.LM39:
 414 03ec A4209FE5 		ldr	r2, .L30+24
 415 03f0 0030A0E3 		mov	r3, #0
 416 03f4 003082E5 		str	r3, [r2, #0]
 137:i2c.c         **** 	    I2CMasterState = DATA_NACK;
 418              	.LM40:
 419 03f8 84209FE5 		ldr	r2, .L30+4
 420 03fc 0530A0E3 		mov	r3, #5
 421 0400 003082E5 		str	r3, [r2, #0]
 422              	.L28:
 138:i2c.c         **** 	}
 139:i2c.c         **** 	I20CONSET = I2CONSET_AA;	/* assert ACK after data is received */
 424              	.LM41:
 425 0404 0E32A0E3 		mov	r3, #-536870912
 426 0408 073983E2 		add	r3, r3, #114688
 427 040c 0420A0E3 		mov	r2, #4
 428 0410 002083E5 		str	r2, [r3, #0]
 140:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;
 430              	.LM42:
 431 0414 0E32A0E3 		mov	r3, #-536870912
 432 0418 073983E2 		add	r3, r3, #114688
 433 041c 183083E2 		add	r3, r3, #24
 434 0420 0820A0E3 		mov	r2, #8
 435 0424 002083E5 		str	r2, [r3, #0]
 141:i2c.c         **** 	break;
 437              	.LM43:
 438 0428 0D0000EA 		b	.L11
 439              	.L6:
 142:i2c.c         **** 	
 143:i2c.c         **** 	case 0x20:			/* regardless, it's a NACK */
 144:i2c.c         **** 	case 0x48:
 145:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;
 441              	.LM44:
 442 042c 0E32A0E3 		mov	r3, #-536870912
 443 0430 073983E2 		add	r3, r3, #114688
 444 0434 183083E2 		add	r3, r3, #24
 445 0438 0820A0E3 		mov	r2, #8
 446 043c 002083E5 		str	r2, [r3, #0]
 146:i2c.c         **** 	I2CMasterState = DATA_NACK;
 448              	.LM45:
 449 0440 3C209FE5 		ldr	r2, .L30+4
 450 0444 0530A0E3 		mov	r3, #5
 451 0448 003082E5 		str	r3, [r2, #0]
 147:i2c.c         **** 	break;
 453              	.LM46:
 454 044c 040000EA 		b	.L11
 455              	.L2:
 148:i2c.c         **** 	
 149:i2c.c         **** 	case 0x38:			/* Arbitration lost, in this example, we don't
 150:i2c.c         **** 					deal with multiple master situation */
 151:i2c.c         **** 	default:
 152:i2c.c         **** 	I20CONCLR = I2CONCLR_SIC;	
 457              	.LM47:
 458 0450 0E32A0E3 		mov	r3, #-536870912
 459 0454 073983E2 		add	r3, r3, #114688
 460 0458 183083E2 		add	r3, r3, #24
 461 045c 0820A0E3 		mov	r2, #8
 462 0460 002083E5 		str	r2, [r3, #0]
 463              	.L11:
 153:i2c.c         **** 	break;
 154:i2c.c         ****     }
 155:i2c.c         ****     
 156:i2c.c         ****     IDISABLE;
 157:i2c.c         ****     VICVectAddr = 0;		/* Acknowledge Interrupt */
 465              	.LM48:
 466 0464 0030A0E3 		mov	r3, #0
 467 0468 FD3E43E2 		sub	r3, r3, #4048
 468 046c 0020A0E3 		mov	r2, #0
 469 0470 002083E5 		str	r2, [r3, #0]
 158:i2c.c         **** 
 159:i2c.c         **** }
 471              	.LM49:
 472 0474 0CD04BE2 		sub	sp, fp, #12
 473 0478 00689DE8 		ldmfd	sp, {fp, sp, lr}
 474 047c 1EFF2FE1 		bx	lr
 475              	.L31:
 476              		.align	2
 477              	.L30:
 478 0480 00000000 		.word	I2CMasterBuffer
 479 0484 00000000 		.word	I2CMasterState
 480 0488 00000000 		.word	I2CCmd
 481 048c 00000000 		.word	WrIndex
 482 0490 00000000 		.word	I2CWriteLength
 483 0494 00000000 		.word	I2CReadLength
 484 0498 00000000 		.word	RdIndex
 489              	.Lscope0:
 490              		.align	2
 492              		.global	I2C0_send_motordata
 494              	I2C0_send_motordata:
 160:i2c.c         **** 
 161:i2c.c         **** 
 162:i2c.c         **** void I2C0_send_motordata(void)
 163:i2c.c         **** {
 496              	.LM50:
 497              		@ Function supports interworking.
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500 049c 0DC0A0E1 		mov	ip, sp
 501 04a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 502 04a4 04B04CE2 		sub	fp, ip, #4
 164:i2c.c         **** 	WrIndex=0;
 504              	.LM51:
 505 04a8 80209FE5 		ldr	r2, .L34
 506 04ac 0030A0E3 		mov	r3, #0
 507 04b0 003082E5 		str	r3, [r2, #0]
 165:i2c.c         **** 	RdIndex=0;
 509              	.LM52:
 510 04b4 78209FE5 		ldr	r2, .L34+4
 511 04b8 0030A0E3 		mov	r3, #0
 512 04bc 003082E5 		str	r3, [r2, #0]
 166:i2c.c         **** 	I2CWriteLength = 5;
 514              	.LM53:
 515 04c0 70209FE5 		ldr	r2, .L34+8
 516 04c4 0530A0E3 		mov	r3, #5
 517 04c8 003082E5 		str	r3, [r2, #0]
 167:i2c.c         **** 	I2CReadLength = 0;
 519              	.LM54:
 520 04cc 68209FE5 		ldr	r2, .L34+12
 521 04d0 0030A0E3 		mov	r3, #0
 522 04d4 003082E5 		str	r3, [r2, #0]
 168:i2c.c         ****     I2CMasterBuffer[0] = 0x02;
 524              	.LM55:
 525 04d8 60209FE5 		ldr	r2, .L34+16
 526 04dc 0230A0E3 		mov	r3, #2
 527 04e0 0030C2E5 		strb	r3, [r2, #0]
 169:i2c.c         ****     I2CMasterBuffer[1] = 100;
 529              	.LM56:
 530 04e4 54209FE5 		ldr	r2, .L34+16
 531 04e8 6430A0E3 		mov	r3, #100
 532 04ec 0130C2E5 		strb	r3, [r2, #1]
 170:i2c.c         ****     I2CMasterBuffer[2] = 100;
 534              	.LM57:
 535 04f0 48209FE5 		ldr	r2, .L34+16
 536 04f4 6430A0E3 		mov	r3, #100
 537 04f8 0230C2E5 		strb	r3, [r2, #2]
 171:i2c.c         ****     I2CMasterBuffer[3] = 100;
 539              	.LM58:
 540 04fc 3C209FE5 		ldr	r2, .L34+16
 541 0500 6430A0E3 		mov	r3, #100
 542 0504 0330C2E5 		strb	r3, [r2, #3]
 172:i2c.c         ****     I2CMasterBuffer[4] = 1;
 544              	.LM59:
 545 0508 30209FE5 		ldr	r2, .L34+16
 546 050c 0130A0E3 		mov	r3, #1
 547 0510 0430C2E5 		strb	r3, [r2, #4]
 173:i2c.c         **** 
 174:i2c.c         ****     //I20CONSET = I2CONSET_STA;	/* Set Start flag */
 175:i2c.c         ****     //if ( !I2CStart() ) I2CStop();
 176:i2c.c         ****     I2CCmd = GET_TEMPERATURE;
 549              	.LM60:
 550 0514 28209FE5 		ldr	r2, .L34+20
 551 0518 0230A0E3 		mov	r3, #2
 552 051c 003082E5 		str	r3, [r2, #0]
 177:i2c.c         **** 	I2CEngine();
 554              	.LM61:
 555 0520 FEFFFFEB 		bl	I2CEngine
 178:i2c.c         **** }
 557              	.LM62:
 558 0524 0CD04BE2 		sub	sp, fp, #12
 559 0528 00689DE8 		ldmfd	sp, {fp, sp, lr}
 560 052c 1EFF2FE1 		bx	lr
 561              	.L35:
 562              		.align	2
 563              	.L34:
 564 0530 00000000 		.word	WrIndex
 565 0534 00000000 		.word	RdIndex
 566 0538 00000000 		.word	I2CWriteLength
 567 053c 00000000 		.word	I2CReadLength
 568 0540 00000000 		.word	I2CMasterBuffer
 569 0544 00000000 		.word	I2CCmd
 571              	.Lscope1:
 572              		.align	2
 574              		.global	I2CStart
 576              	I2CStart:
 179:i2c.c         **** 
 180:i2c.c         **** /*****************************************************************************
 181:i2c.c         **** ** Function name:		I2CStart
 182:i2c.c         **** **
 183:i2c.c         **** ** Descriptions:		Create I2C start condition, a timeout
 184:i2c.c         **** **				value is set if the I2C never gets started,
 185:i2c.c         **** **				and timed out. It's a fatal error. 
 186:i2c.c         **** **
 187:i2c.c         **** ** parameters:			None
 188:i2c.c         **** ** Returned value:		true or false, return false if timed out
 189:i2c.c         **** ** 
 190:i2c.c         **** *****************************************************************************/
 191:i2c.c         **** unsigned int I2CStart( void )
 192:i2c.c         **** {
 578              	.LM63:
 579              		@ Function supports interworking.
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 1, uses_anonymous_args = 0
 582 0548 0DC0A0E1 		mov	ip, sp
 583 054c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 584 0550 04B04CE2 		sub	fp, ip, #4
 585 0554 08D04DE2 		sub	sp, sp, #8
 193:i2c.c         ****     unsigned int timeout = 0;
 587              	.LM64:
 588 0558 0030A0E3 		mov	r3, #0
 589 055c 14300BE5 		str	r3, [fp, #-20]
 194:i2c.c         ****     unsigned int returnValue = FALSE;
 591              	.LM65:
 592 0560 0030A0E3 		mov	r3, #0
 593 0564 10300BE5 		str	r3, [fp, #-16]
 195:i2c.c         ****  
 196:i2c.c         ****     /*--- Issue a start condition ---*/
 197:i2c.c         ****     I20CONSET = I2CONSET_STA;	/* Set Start flag */
 595              	.LM66:
 596 0568 0E32A0E3 		mov	r3, #-536870912
 597 056c 073983E2 		add	r3, r3, #114688
 598 0570 2020A0E3 		mov	r2, #32
 599 0574 002083E5 		str	r2, [r3, #0]
 600              	.L37:
 198:i2c.c         ****     
 199:i2c.c         ****     /*--- Wait until START transmitted ---*/
 200:i2c.c         ****     while( 1 )
 201:i2c.c         ****     {
 202:i2c.c         **** 	if ( I2CMasterState == I2C_STARTED )
 602              	.LM67:
 603 0578 58309FE5 		ldr	r3, .L44
 604 057c 003093E5 		ldr	r3, [r3, #0]
 605 0580 010053E3 		cmp	r3, #1
 606 0584 0200001A 		bne	.L38
 203:i2c.c         **** 	{
 204:i2c.c         **** 	    returnValue = TRUE;
 608              	.LM68:
 609 0588 0130A0E3 		mov	r3, #1
 610 058c 10300BE5 		str	r3, [fp, #-16]
 205:i2c.c         **** 	    break;	
 612              	.LM69:
 613 0590 0B0000EA 		b	.L40
 614              	.L38:
 206:i2c.c         **** 	}
 207:i2c.c         **** 	if ( timeout >= MAX_TIMEOUT )
 616              	.LM70:
 617 0594 14201BE5 		ldr	r2, [fp, #-20]
 618 0598 0134A0E3 		mov	r3, #16777216
 619 059c 023043E2 		sub	r3, r3, #2
 620 05a0 030052E1 		cmp	r2, r3
 621 05a4 0200009A 		bls	.L41
 208:i2c.c         **** 	{
 209:i2c.c         **** 	    returnValue = FALSE;
 623              	.LM71:
 624 05a8 0030A0E3 		mov	r3, #0
 625 05ac 10300BE5 		str	r3, [fp, #-16]
 210:i2c.c         **** 	    break;
 627              	.LM72:
 628 05b0 030000EA 		b	.L40
 629              	.L41:
 211:i2c.c         **** 	}
 212:i2c.c         **** 	timeout++;
 631              	.LM73:
 632 05b4 14301BE5 		ldr	r3, [fp, #-20]
 633 05b8 013083E2 		add	r3, r3, #1
 634 05bc 14300BE5 		str	r3, [fp, #-20]
 213:i2c.c         ****     }
 636              	.LM74:
 637 05c0 ECFFFFEA 		b	.L37
 638              	.L40:
 214:i2c.c         ****     return( returnValue );
 640              	.LM75:
 641 05c4 10301BE5 		ldr	r3, [fp, #-16]
 215:i2c.c         **** }
 643              	.LM76:
 644 05c8 0300A0E1 		mov	r0, r3
 645 05cc 0CD04BE2 		sub	sp, fp, #12
 646 05d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 647 05d4 1EFF2FE1 		bx	lr
 648              	.L45:
 649              		.align	2
 650              	.L44:
 651 05d8 00000000 		.word	I2CMasterState
 657              	.Lscope2:
 658              		.align	2
 660              		.global	I2CStop
 662              	I2CStop:
 216:i2c.c         **** 
 217:i2c.c         **** /*****************************************************************************
 218:i2c.c         **** ** Function name:		I2CStop
 219:i2c.c         **** **
 220:i2c.c         **** ** Descriptions:		Set the I2C stop condition, if the routine
 221:i2c.c         **** **				never exit, it's a fatal bus error.
 222:i2c.c         **** **
 223:i2c.c         **** ** parameters:			None
 224:i2c.c         **** ** Returned value:		true or never return
 225:i2c.c         **** ** 
 226:i2c.c         **** *****************************************************************************/
 227:i2c.c         **** unsigned int I2CStop( void )
 228:i2c.c         **** {
 664              	.LM77:
 665              		@ Function supports interworking.
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 05dc 0DC0A0E1 		mov	ip, sp
 669 05e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 670 05e4 04B04CE2 		sub	fp, ip, #4
 229:i2c.c         ****     I20CONSET = I2CONSET_STO;      /* Set Stop flag */ 
 672              	.LM78:
 673 05e8 0E32A0E3 		mov	r3, #-536870912
 674 05ec 073983E2 		add	r3, r3, #114688
 675 05f0 1020A0E3 		mov	r2, #16
 676 05f4 002083E5 		str	r2, [r3, #0]
 230:i2c.c         ****     I20CONCLR = I2CONCLR_SIC;  /* Clear SI flag */ 
 678              	.LM79:
 679 05f8 0E32A0E3 		mov	r3, #-536870912
 680 05fc 073983E2 		add	r3, r3, #114688
 681 0600 183083E2 		add	r3, r3, #24
 682 0604 0820A0E3 		mov	r2, #8
 683 0608 002083E5 		str	r2, [r3, #0]
 684              	.L47:
 231:i2c.c         ****             
 232:i2c.c         ****     /*--- Wait for STOP detected ---*/
 233:i2c.c         ****     while( I20CONSET & I2CONSET_STO );
 686              	.LM80:
 687 060c 0E32A0E3 		mov	r3, #-536870912
 688 0610 073983E2 		add	r3, r3, #114688
 689 0614 003093E5 		ldr	r3, [r3, #0]
 690 0618 103003E2 		and	r3, r3, #16
 691 061c 000053E3 		cmp	r3, #0
 692 0620 F9FFFF1A 		bne	.L47
 234:i2c.c         ****     return TRUE;
 694              	.LM81:
 695 0624 0130A0E3 		mov	r3, #1
 235:i2c.c         **** }
 697              	.LM82:
 698 0628 0300A0E1 		mov	r0, r3
 699 062c 0CD04BE2 		sub	sp, fp, #12
 700 0630 00689DE8 		ldmfd	sp, {fp, sp, lr}
 701 0634 1EFF2FE1 		bx	lr
 703              	.Lscope3:
 704              		.align	2
 707              		.global	I2CInit
 709              	I2CInit:
 236:i2c.c         **** 
 237:i2c.c         **** /*****************************************************************************
 238:i2c.c         **** ** Function name:		I2CInit
 239:i2c.c         **** **
 240:i2c.c         **** ** Descriptions:		Initialize I2C controller
 241:i2c.c         **** **
 242:i2c.c         **** ** parameters:			I2c mode is either MASTER or SLAVE
 243:i2c.c         **** ** Returned value:		true or false, return false if the I2C
 244:i2c.c         **** **				interrupt handler was not installed correctly
 245:i2c.c         **** ** 
 246:i2c.c         **** *****************************************************************************/
 247:i2c.c         **** void I2CInit( unsigned int I2cMode ) 
 248:i2c.c         **** {
 711              	.LM83:
 712              		@ Function supports interworking.
 713              		@ args = 0, pretend = 0, frame = 4
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0638 0DC0A0E1 		mov	ip, sp
 716 063c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 717 0640 04B04CE2 		sub	fp, ip, #4
 718 0644 04D04DE2 		sub	sp, sp, #4
 719 0648 10000BE5 		str	r0, [fp, #-16]
 249:i2c.c         ****     IODIR0|= 0x0C;	/* set port 0.2 and port 0.3 to output, high */
 721              	.LM84:
 722 064c 8E22A0E3 		mov	r2, #-536870904
 723 0650 0A2982E2 		add	r2, r2, #163840
 724 0654 8E32A0E3 		mov	r3, #-536870904
 725 0658 0A3983E2 		add	r3, r3, #163840
 726 065c 003093E5 		ldr	r3, [r3, #0]
 727 0660 0C3083E3 		orr	r3, r3, #12
 728 0664 003082E5 		str	r3, [r2, #0]
 250:i2c.c         ****     IOSET0 = 0x0C;
 730              	.LM85:
 731 0668 4E32A0E3 		mov	r3, #-536870908
 732 066c 0A3983E2 		add	r3, r3, #163840
 733 0670 0C20A0E3 		mov	r2, #12
 734 0674 002083E5 		str	r2, [r3, #0]
 251:i2c.c         **** 
 252:i2c.c         ****     /*--- Clear flags ---*/
 253:i2c.c         ****     I20CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
 736              	.LM86:
 737 0678 0E32A0E3 		mov	r3, #-536870912
 738 067c 073983E2 		add	r3, r3, #114688
 739 0680 183083E2 		add	r3, r3, #24
 740 0684 6C20A0E3 		mov	r2, #108
 741 0688 002083E5 		str	r2, [r3, #0]
 254:i2c.c         **** 
 255:i2c.c         ****     /*--- Reset registers ---*/
 256:i2c.c         ****     I20SCLL   = I2SCLL_SCLL;
 743              	.LM87:
 744 068c 0E32A0E3 		mov	r3, #-536870912
 745 0690 073983E2 		add	r3, r3, #114688
 746 0694 143083E2 		add	r3, r3, #20
 747 0698 8020A0E3 		mov	r2, #128
 748 069c 002083E5 		str	r2, [r3, #0]
 257:i2c.c         ****     I20SCLH   = I2SCLH_SCLH;
 750              	.LM88:
 751 06a0 0E32A0E3 		mov	r3, #-536870912
 752 06a4 073983E2 		add	r3, r3, #114688
 753 06a8 103083E2 		add	r3, r3, #16
 754 06ac 8020A0E3 		mov	r2, #128
 755 06b0 002083E5 		str	r2, [r3, #0]
 258:i2c.c         **** }
 757              	.LM89:
 758 06b4 0CD04BE2 		sub	sp, fp, #12
 759 06b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 760 06bc 1EFF2FE1 		bx	lr
 762              	.Lscope4:
 763              		.align	2
 765              		.global	I2CEngine
 767              	I2CEngine:
 259:i2c.c         **** 
 260:i2c.c         **** /*****************************************************************************
 261:i2c.c         **** ** Function name:		I2CEngine
 262:i2c.c         **** **
 263:i2c.c         **** ** Descriptions:		The routine to complete a I2C transaction
 264:i2c.c         **** **				from start to stop. All the intermitten
 265:i2c.c         **** **				steps are handled in the interrupt handler.
 266:i2c.c         **** **				Before this routine is called, the read
 267:i2c.c         **** **				length, write length, I2C master buffer,
 268:i2c.c         **** **				and I2C command fields need to be filled.
 269:i2c.c         **** **				see i2cmst.c for more details. 
 270:i2c.c         **** **
 271:i2c.c         **** ** parameters:			None
 272:i2c.c         **** ** Returned value:		true or false, return false only if the
 273:i2c.c         **** **				start condition can never be generated and
 274:i2c.c         **** **				timed out. 
 275:i2c.c         **** ** 
 276:i2c.c         **** *****************************************************************************/
 277:i2c.c         **** unsigned int I2CEngine( void ) 
 278:i2c.c         **** {
 769              	.LM90:
 770              		@ Function supports interworking.
 771              		@ args = 0, pretend = 0, frame = 4
 772              		@ frame_needed = 1, uses_anonymous_args = 0
 773 06c0 0DC0A0E1 		mov	ip, sp
 774 06c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 775 06c8 04B04CE2 		sub	fp, ip, #4
 776 06cc 04D04DE2 		sub	sp, sp, #4
 279:i2c.c         ****     I2CMasterState = I2C_IDLE;
 778              	.LM91:
 779 06d0 6C209FE5 		ldr	r2, .L59
 780 06d4 0030A0E3 		mov	r3, #0
 781 06d8 003082E5 		str	r3, [r2, #0]
 280:i2c.c         ****     RdIndex = 0;
 783              	.LM92:
 784 06dc 64209FE5 		ldr	r2, .L59+4
 785 06e0 0030A0E3 		mov	r3, #0
 786 06e4 003082E5 		str	r3, [r2, #0]
 281:i2c.c         ****     WrIndex = 0;
 788              	.LM93:
 789 06e8 5C209FE5 		ldr	r2, .L59+8
 790 06ec 0030A0E3 		mov	r3, #0
 791 06f0 003082E5 		str	r3, [r2, #0]
 282:i2c.c         ****     if ( I2CStart() != TRUE )
 793              	.LM94:
 794 06f4 FEFFFFEB 		bl	I2CStart
 795 06f8 0030A0E1 		mov	r3, r0
 796 06fc 010053E3 		cmp	r3, #1
 797 0700 0300000A 		beq	.L53
 283:i2c.c         ****     {
 284:i2c.c         **** 		I2CStop();
 799              	.LM95:
 800 0704 FEFFFFEB 		bl	I2CStop
 285:i2c.c         **** 	return ( FALSE );
 802              	.LM96:
 803 0708 0030A0E3 		mov	r3, #0
 804 070c 10300BE5 		str	r3, [fp, #-16]
 805 0710 060000EA 		b	.L55
 806              	.L53:
 286:i2c.c         ****     }
 287:i2c.c         ****     while ( 1 )
 288:i2c.c         ****     {
 289:i2c.c         **** 	if ( I2CMasterState == DATA_NACK )
 808              	.LM97:
 809 0714 28309FE5 		ldr	r3, .L59
 810 0718 003093E5 		ldr	r3, [r3, #0]
 811 071c 050053E3 		cmp	r3, #5
 812 0720 FBFFFF1A 		bne	.L53
 290:i2c.c         **** 	{
 291:i2c.c         **** 	    I2CStop();
 814              	.LM98:
 815 0724 FEFFFFEB 		bl	I2CStop
 292:i2c.c         **** 	    break;
 293:i2c.c         **** 	}
 294:i2c.c         ****     }    
 295:i2c.c         ****     return ( TRUE );      
 817              	.LM99:
 818 0728 0130A0E3 		mov	r3, #1
 819 072c 10300BE5 		str	r3, [fp, #-16]
 820              	.L55:
 294:i2c.c         ****     }    
 822              	.LM100:
 823 0730 10301BE5 		ldr	r3, [fp, #-16]
 296:i2c.c         **** }
 825              	.LM101:
 826 0734 0300A0E1 		mov	r0, r3
 827 0738 0CD04BE2 		sub	sp, fp, #12
 828 073c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 829 0740 1EFF2FE1 		bx	lr
 830              	.L60:
 831              		.align	2
 832              	.L59:
 833 0744 00000000 		.word	I2CMasterState
 834 0748 00000000 		.word	RdIndex
 835 074c 00000000 		.word	WrIndex
 837              	.Lscope5:
 838              		.comm	I2CCmd,4,4
 839              		.comm	I2CMode,4,4
 840              		.comm	I2CMasterBuffer,32,1
 841              		.comm	I2CSlaveBuffer,32,1
 842              		.comm	I2CReadLength,4,4
 843              		.comm	I2CWriteLength,4,4
 856              	.Letext0:
 857              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c.c
     /tmp/ccEtAsYP.s:32     .bss:00000000 I2CMasterState
     /tmp/ccEtAsYP.s:29     .bss:00000000 $d
     /tmp/ccEtAsYP.s:38     .bss:00000004 I2CSlaveState
     /tmp/ccEtAsYP.s:44     .bss:00000008 I2CCount
     /tmp/ccEtAsYP.s:50     .bss:0000000c RdIndex
     /tmp/ccEtAsYP.s:56     .bss:00000010 WrIndex
     /tmp/ccEtAsYP.s:59     .text:00000000 $a
     /tmp/ccEtAsYP.s:63     .text:00000000 I2C0MasterHandler
     /tmp/ccEtAsYP.s:88     .text:00000034 $d
     /tmp/ccEtAsYP.s:172    .text:00000178 $a
     /tmp/ccEtAsYP.s:478    .text:00000480 $d
                            *COM*:00000020 I2CMasterBuffer
                            *COM*:00000004 I2CCmd
                            *COM*:00000004 I2CWriteLength
                            *COM*:00000004 I2CReadLength
     /tmp/ccEtAsYP.s:490    .text:0000049c $a
     /tmp/ccEtAsYP.s:494    .text:0000049c I2C0_send_motordata
     /tmp/ccEtAsYP.s:767    .text:000006c0 I2CEngine
     /tmp/ccEtAsYP.s:564    .text:00000530 $d
     /tmp/ccEtAsYP.s:572    .text:00000548 $a
     /tmp/ccEtAsYP.s:576    .text:00000548 I2CStart
     /tmp/ccEtAsYP.s:651    .text:000005d8 $d
     /tmp/ccEtAsYP.s:658    .text:000005dc $a
     /tmp/ccEtAsYP.s:662    .text:000005dc I2CStop
     /tmp/ccEtAsYP.s:709    .text:00000638 I2CInit
     /tmp/ccEtAsYP.s:833    .text:00000744 $d
                            *COM*:00000004 I2CMode
                            *COM*:00000020 I2CSlaveBuffer

NO UNDEFINED SYMBOLS
