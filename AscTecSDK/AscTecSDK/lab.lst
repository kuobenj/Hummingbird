   1              		.file	"lab.c"
   3              		.text
   4              	.Ltext0:
 225              		.global	output_timer
 226              		.bss
 227              		.align	2
 230              	output_timer:
 231 0000 00000000 		.space	4
 232              		.global	output_count
 233              		.data
 234              		.align	2
 237              	output_count:
 238 0000 01000000 		.word	1
 239              		.global	timer_tic
 240              		.align	2
 243              	timer_tic:
 244 0004 0A000000 		.word	10
 245              		.global	data_freq_1
 246              		.align	2
 249              	data_freq_1:
 250 0008 01000000 		.word	1
 251              		.global	data_freq_2
 252              		.align	2
 255              	data_freq_2:
 256 000c 28000000 		.word	40
 257              		.global	data_freq_3
 258              		.align	2
 261              	data_freq_3:
 262 0010 3C000000 		.word	60
 263              		.global	data_freq_4
 264              		.align	2
 267              	data_freq_4:
 268 0014 50000000 		.word	80
 269              		.global	data_freq_5
 270              		.align	2
 273              	data_freq_5:
 274 0018 64000000 		.word	100
 275              		.global	max_output_count
 276              		.bss
 277              		.align	2
 280              	max_output_count:
 281 0004 00000000 		.space	4
 282              		.global	comm_start_count
 283              		.align	2
 286              	comm_start_count:
 287 0008 00000000 		.space	4
 288              		.global	my_lab_count
 289              		.align	2
 292              	my_lab_count:
 293 000c 00000000 		.space	4
 294              		.global	test_time_limit
 295              		.align	2
 298              	test_time_limit:
 299 0010 00000000 		.space	4
 300              		.global	DataOutputsPerSecond
 301              		.data
 304              	DataOutputsPerSecond:
 305 001c 01       		.byte	1
 306              		.global	outer_loop_timer
 307              		.bss
 308              		.align	2
 311              	outer_loop_timer:
 312 0014 00000000 		.space	4
 313              		.global	trigger_stop
 314              		.align	2
 317              	trigger_stop:
 318 0018 00000000 		.space	4
 319              		.global	OuterLoopFrequency
 320              		.data
 323              	OuterLoopFrequency:
 324 001d 32       		.byte	50
 325              		.global	msg_flag
 326              		.bss
 327              		.align	2
 330              	msg_flag:
 331 001c 00000000 		.space	4
 332              		.global	trigger_flag
 333              		.align	2
 336              	trigger_flag:
 337 0020 00000000 		.space	4
 338              		.global	total_check_current
 339              		.align	2
 342              	total_check_current:
 343 0024 00000000 		.space	4
 344              		.global	total_check_previous
 345              		.align	2
 348              	total_check_previous:
 349 0028 00000000 		.space	4
 350              		.global	K
 351              		.data
 352 001e 0000     		.align	2
 355              	K:
 356 0020 0AD7A33E 		.word	1050924810
 357 0024 FCA9713D 		.word	1030859260
 358              		.global	K3
 359              		.align	2
 362              	K3:
 363 0028 00000080 		.word	-2147483648
 364 002c 04E78CBC 		.word	-1131616508
 365 0030 00000000 		.word	0
 366 0034 00000000 		.word	0
 367 0038 4A7B03BD 		.word	-1123845302
 368 003c 00000000 		.word	0
 369 0040 197357BE 		.word	-1101565159
 370 0044 00000000 		.word	0
 371 0048 00000000 		.word	0
 372 004c 4CA68ABD 		.word	-1114986932
 373 0050 00000000 		.word	0
 374 0054 00000000 		.word	0
 375 0058 04E78C3C 		.word	1015867140
 376 005c 00000000 		.word	0
 377 0060 00000000 		.word	0
 378 0064 4A7B033D 		.word	1023638346
 379 0068 00000080 		.word	-2147483648
 380 006c 00000000 		.word	0
 381 0070 00000080 		.word	-2147483648
 382 0074 197357BE 		.word	-1101565159
 383 0078 00000080 		.word	-2147483648
 384 007c 00000080 		.word	-2147483648
 385 0080 4CA68ABD 		.word	-1114986932
 386 0084 00000080 		.word	-2147483648
 387 0088 00000000 		.word	0
 388 008c 00000000 		.word	0
 389 0090 00000080 		.word	-2147483648
 390 0094 00000000 		.word	0
 391 0098 00000000 		.word	0
 392 009c 00000080 		.word	-2147483648
 393 00a0 00000000 		.word	0
 394 00a4 00000080 		.word	-2147483648
 395 00a8 E17A94BD 		.word	-1114342687
 396 00ac 00000000 		.word	0
 397 00b0 00000080 		.word	-2147483648
 398 00b4 C139A3BD 		.word	-1113376319
 399 00b8 00000000 		.word	0
 400 00bc 00000080 		.word	-2147483648
 401 00c0 ED0D9E3E 		.word	1050545645
 402 00c4 00000000 		.word	0
 403 00c8 00000000 		.word	0
 404 00cc C74B273F 		.word	1059539911
 405 00d0 00000000 		.word	0
 406 00d4 00000080 		.word	-2147483648
 407 00d8 00000000 		.word	0
 408 00dc 00000000 		.word	0
 409 00e0 00000080 		.word	-2147483648
 410 00e4 00000000 		.word	0
 411              		.global	k_p
 412              		.bss
 413              		.align	2
 416              	k_p:
 417 002c 00000000 		.space	4
 418              		.global	k_d
 419              		.align	2
 422              	k_d:
 423 0030 00000000 		.space	4
 424              		.global	k_i
 425              		.align	2
 428              	k_i:
 429 0034 00000000 		.space	4
 430              		.global	e
 431              		.align	2
 434              	e:
 435 0038 00000000 		.space	8
 435      00000000 
 436              		.global	g_xnom
 437              		.data
 438              		.align	2
 441              	g_xnom:
 442 00e8 00000000 		.word	0
 443 00ec 00000000 		.word	0
 444 00f0 000080BF 		.word	-1082130432
 445 00f4 00000000 		.word	0
 446 00f8 00000000 		.word	0
 447 00fc 00000000 		.word	0
 448 0100 00000000 		.word	0
 449 0104 00000000 		.word	0
 450 0108 00000000 		.word	0
 451 010c 00000000 		.word	0
 452 0110 00000000 		.word	0
 453 0114 00000000 		.word	0
 454              		.global	omega_hover
 455              		.align	2
 458              	omega_hover:
 459 0118 9A19F443 		.word	1140070810
 460              		.global	kF
 461              		.align	2
 464              	kF:
 465 011c 90D0E036 		.word	920703120
 466              		.global	kM
 467              		.align	2
 470              	kM:
 471 0120 3F893634 		.word	875989311
 472              		.global	l
 473              		.align	2
 476              	l:
 477 0124 7B142E3E 		.word	1043207291
 478              		.text
 479              		.align	2
 481              		.global	lab
 483              	lab:
   1:lab.c         **** 
   2:lab.c         **** #include "lab.h"
   3:lab.c         **** #include "math.h"
   4:lab.c         **** 
   5:lab.c         **** 
   6:lab.c         **** 
   7:lab.c         **** //extern unsigned long my_sdkloop_count;
   8:lab.c         **** 
   9:lab.c         **** void do_communication(void);
  10:lab.c         **** void motor_rpm_calibration(void);
  11:lab.c         **** void clip_motor_control(float* cmd);
  12:lab.c         **** //float motor_calib_inv(float omega_des);
  13:lab.c         **** void u_to_rotorspeed(float* u, float* omega_cmd);
  14:lab.c         **** void motor_omega_to_cmd(float* omega_des, float* cmd);
  15:lab.c         **** void AE483_send_control(void);
  16:lab.c         **** void lab1(void);
  17:lab.c         **** void lab2(void);
  18:lab.c         **** void lab3(void);
  19:lab.c         **** void mm_check(void);
  20:lab.c         **** void potentialfield(void);
  21:lab.c         **** void GPSHold(void);
  22:lab.c         **** void ExternalOuterLoop(void);
  23:lab.c         **** void ExternalOuterLoopRate(void);
  24:lab.c         **** void ExternalOuterLoopAngleRate(void);
  25:lab.c         **** void OuterLoopGPSUltrasound(float x_desired, float y_desired, float z_desired, float* roll_desired,
  26:lab.c         **** void InnerLoop(float roll_desired, float pitch_desired, float yaw_desired);
  27:lab.c         **** void InnerLoopRate(float p_desired, float q_desired, float r_desired);
  28:lab.c         **** void InnerLoopAngleRate(float roll_desired, float pitch_desired, float yaw_desired, float p_desired
  29:lab.c         **** void flatEarthl2x(void);
  30:lab.c         **** void SendMassData(void);
  31:lab.c         **** void countData(void);
  32:lab.c         **** // Declarations and defaults. You shouldn't have to change these.
  33:lab.c         **** unsigned long int output_timer = 0;
  34:lab.c         **** unsigned long int output_count = 1;
  35:lab.c         **** unsigned long int timer_tic = 10;
  36:lab.c         **** unsigned long int data_freq_1 = 1;
  37:lab.c         **** unsigned long int data_freq_2 = 40;
  38:lab.c         **** unsigned long int data_freq_3 = 60;
  39:lab.c         **** unsigned long int data_freq_4 = 80;
  40:lab.c         **** unsigned long int data_freq_5 = 100;
  41:lab.c         **** unsigned long int max_output_count = 0;
  42:lab.c         **** unsigned long int comm_start_count = 0;
  43:lab.c         **** unsigned long int my_lab_count = 0;
  44:lab.c         **** unsigned long int test_time_limit = 0; // milliseconds
  45:lab.c         **** unsigned char DataOutputsPerSecond = 1;  // frequency at which we send messages to ground station.
  46:lab.c         **** unsigned int outer_loop_timer = 0;
  47:lab.c         **** unsigned int trigger_stop = 0;
  48:lab.c         **** unsigned char OuterLoopFrequency = 50;  // frequency at which we call the OuterLoop().
  49:lab.c         **** unsigned int msg_flag = 0;  // flag that determines what objects get communicated over XBee.
  50:lab.c         **** unsigned int trigger_flag = 0;
  51:lab.c         **** unsigned int total_check_current = 0;
  52:lab.c         **** unsigned int total_check_previous = 0;
  53:lab.c         **** float state[2];
  54:lab.c         **** float K[2] = {0.32, 0.059};
  55:lab.c         **** float K3[12*4] = { -0.0000,    -0.0172,   0.0000,   0.0000,    -0.0321,   0.0000,    -0.2104,    0.
  56:lab.c         **** float k_p = 0.0;
  57:lab.c         **** float k_d = 0.0;
  58:lab.c         **** float k_i = 0.0;
  59:lab.c         **** float nom[2];
  60:lab.c         **** float e[2] = {0,0};
  61:lab.c         **** float g_u[4];
  62:lab.c         **** float g_xerr[12];
  63:lab.c         **** float g_xnom[12] = {0,0,-1,0,0,0,0,0,0,0,0,0};
  64:lab.c         **** float omega_hover = 488.2;
  65:lab.c         **** float g_omega_cmd[4];
  66:lab.c         **** float g_cmd[4];
  67:lab.c         **** float W[4*4];
  68:lab.c         **** float R01[3*3];
  69:lab.c         **** float R10[3*3];
  70:lab.c         **** float R01_des[3*3];
  71:lab.c         **** float R10_des[3*3];
  72:lab.c         **** float tmpprod1[3*3];
  73:lab.c         **** float tmpprod2[3*3];
  74:lab.c         **** float e_R[3];
  75:lab.c         **** float e_w[3]; 
  76:lab.c         **** //////////// HUMMINGBIRD ///////////
  77:lab.c         **** float kF = 6.7e-6;
  78:lab.c         **** float kM = 1.7e-7;
  79:lab.c         **** /////////// PELICAN /////////////////
  80:lab.c         **** //float kF = 1.56788e-5;
  81:lab.c         **** //float kM = 2.453305e-7;
  82:lab.c         **** /////////////////////////////////////
  83:lab.c         **** float l = 0.17;
  84:lab.c         **** float Winv[4*4];
  85:lab.c         **** //float homeLat = 40.1148887;
  86:lab.c         **** //loat homeLong = -88.2272284;
  87:lab.c         **** //float homeLat = 40.1149701;
  88:lab.c         **** //float homeLong = -88.2269798;
  89:lab.c         **** //float desZ = 0.2;
  90:lab.c         **** 
  91:lab.c         **** void lab(void) {
 485              	.LM0:
 486              		@ Function supports interworking.
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489 0000 0DC0A0E1 		mov	ip, sp
 490 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 491 0008 04B04CE2 		sub	fp, ip, #4
  92:lab.c         **** 
  93:lab.c         ****     // Use message flag set in Lab 1.
  94:lab.c         ****     //lab1();
  95:lab.c         **** 
  96:lab.c         ****     // Use controller set in Lab 2. PLEASE COMMENT OUT AE483_attitude_commands() in sdk.c
  97:lab.c         ****     //lab2();
  98:lab.c         **** 
  99:lab.c         ****     // Use controller from lab 3.
 100:lab.c         ****     //lab3();
 101:lab.c         ****     //mm_check();
 102:lab.c         **** 
 103:lab.c         ****     //constant_altitude_control();
 104:lab.c         ****     // Ultrasound altitude hover (no x,y position control)
 105:lab.c         ****     //ultrasound_control();
 106:lab.c         **** 
 107:lab.c         ****     // THIS IS ONLY NEEDED FOR THE THRUST AND TORQUE TEST STAND
 108:lab.c         ****     //motor_rpm_calibration();
 109:lab.c         ****     
 110:lab.c         ****     // JUST RUN INNER LOOP, ASSUMING WE RECEIVE DESIRED ANGLES OVER MESSAGES
 111:lab.c         ****     ExternalOuterLoop();
 493              	.LM1:
 494 000c FEFFFFEB 		bl	ExternalOuterLoop
 112:lab.c         **** 
 113:lab.c         ****     // JUST RUN INNER LOOP, ASSUMING WE RECEIVE DESIRED ANGULAR VELOCITY OVER MESSAGES
 114:lab.c         ****     // ExternalOuterLoopRate();
 115:lab.c         **** 
 116:lab.c         ****     // ANGLE AND ANGULAR VELOCITY TRACKING FROM Mellinger2011
 117:lab.c         ****     // ExternalOuterLoopAngleRate();
 118:lab.c         **** 
 119:lab.c         ****     //GPS pos hold
 120:lab.c         ****     //outerloopGPS();
 121:lab.c         ****     //GPSHold();
 122:lab.c         ****     //SendMassData();
 123:lab.c         ****     //Potential Field
 124:lab.c         ****     //potentialfield();
 125:lab.c         ****     //getData();
 126:lab.c         ****     //countData();
 127:lab.c         ****     // Call function which sends messages to Control PC
 128:lab.c         ****     do_communication();
 496              	.LM2:
 497 0010 FEFFFFEB 		bl	do_communication
 129:lab.c         **** 
 130:lab.c         ****     //my_lab_count++;
 131:lab.c         **** 
 132:lab.c         **** 
 133:lab.c         **** 
 134:lab.c         **** }
 499              	.LM3:
 500 0014 0CD04BE2 		sub	sp, fp, #12
 501 0018 00689DE8 		ldmfd	sp, {fp, sp, lr}
 502 001c 1EFF2FE1 		bx	lr
 504              	.Lscope0:
 505              		.align	2
 507              		.global	SendMassData
 509              	SendMassData:
 135:lab.c         **** // added by Vishwa for testing
 136:lab.c         **** void SendMassData(void) { //{{{1
 511              	.LM4:
 512              		@ Function supports interworking.
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515 0020 0DC0A0E1 		mov	ip, sp
 516 0024 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 517 0028 04B04CE2 		sub	fp, ip, #4
 137:lab.c         ****     // msg_flag = 1<<FMSTATUS_ID;
 138:lab.c         ****     // msg_flag = 1<<FMSTATE_ID;
 139:lab.c         ****     msg_flag = 1<<FMSENSOR_ID;
 519              	.LM5:
 520 002c E8209FE5 		ldr	r2, .L5
 521 0030 0830A0E3 		mov	r3, #8
 522 0034 003082E5 		str	r3, [r2, #0]
 140:lab.c         **** 
 141:lab.c         ****     
 142:lab.c         **** 
 143:lab.c         ****     // if (output_count <= (timer_tic*data_freq_1)){
 144:lab.c         ****     //     DataOutputsPerSecond = data_freq_1;
 145:lab.c         ****     // }
 146:lab.c         ****     // if (output_count > (timer_tic*data_freq_1) && output_count <= timer_tic*data_freq_2)
 147:lab.c         ****     // {
 148:lab.c         ****     //     DataOutputsPerSecond = data_freq_2;
 149:lab.c         ****     // }
 150:lab.c         ****     // if (output_count > (timer_tic*data_freq_2) && output_count <= timer_tic*data_freq_3)
 151:lab.c         ****     // {
 152:lab.c         ****     //     DataOutputsPerSecond = data_freq_3;
 153:lab.c         ****     // }
 154:lab.c         ****     // if (output_count > (timer_tic*data_freq_3) && output_count <= timer_tic*data_freq_4)
 155:lab.c         ****     // {
 156:lab.c         ****     //     DataOutputsPerSecond = data_freq_4;
 157:lab.c         ****     // }
 158:lab.c         ****     // if (output_count > (timer_tic*data_freq_4) && output_count <= timer_tic*data_freq_5)
 159:lab.c         ****     // {
 160:lab.c         ****     //     DataOutputsPerSecond = data_freq_5;
 161:lab.c         ****     // }
 162:lab.c         ****     // max_output_count = (timer_tic)*(data_freq_1 + data_freq_2 + data_freq_3 + data_freq_4 + data
 163:lab.c         ****     // if (output_count == timer_tic*data_freq_1 | output_count == timer_tic*data_freq_2 | output_c
 164:lab.c         ****     //     my_lab_count = 0;
 165:lab.c         ****     // }
 166:lab.c         ****     
 167:lab.c         ****     DataOutputsPerSecond = 50;
 524              	.LM6:
 525 0038 E0209FE5 		ldr	r2, .L5+4
 526 003c 3230A0E3 		mov	r3, #50
 527 0040 0030C2E5 		strb	r3, [r2, #0]
 168:lab.c         ****     // States Variables
 169:lab.c         **** 
 170:lab.c         ****     // g_state.dT = 0;
 171:lab.c         ****     // g_state.dX = 0;  
 172:lab.c         ****     // g_state.dY = 0;  
 173:lab.c         ****     // g_state.dZ = 0;    
 174:lab.c         ****     // g_state.dVx = 0;   
 175:lab.c         ****     // g_state.dVy = 0;   
 176:lab.c         ****     // g_state.dVz = 0;   
 177:lab.c         ****     // g_state.dPhi = 0;   
 178:lab.c         ****     // g_state.dTheta = 0; 
 179:lab.c         ****     // g_state.dPsi = 0; 
 180:lab.c         ****     // g_state.dP = 0; 
 181:lab.c         ****     // g_state.dQ = 0; 
 182:lab.c         ****     // g_state.dR = 0;
 183:lab.c         **** 
 184:lab.c         ****     // Sensor Variables
 185:lab.c         **** 
 186:lab.c         ****     g_sensor.dT = 0;
 529              	.LM7:
 530 0044 D8209FE5 		ldr	r2, .L5+8
 531 0048 D8309FE5 		ldr	r3, .L5+12	@ float
 532 004c 003082E5 		str	r3, [r2, #0]	@ float
 187:lab.c         ****     g_sensor.dPhi = 0;
 534              	.LM8:
 535 0050 CC209FE5 		ldr	r2, .L5+8
 536 0054 CC309FE5 		ldr	r3, .L5+12	@ float
 537 0058 043082E5 		str	r3, [r2, #4]	@ float
 188:lab.c         ****     g_sensor.dPsi = 0;
 539              	.LM9:
 540 005c C0209FE5 		ldr	r2, .L5+8
 541 0060 C0309FE5 		ldr	r3, .L5+12	@ float
 542 0064 0C3082E5 		str	r3, [r2, #12]	@ float
 189:lab.c         ****     g_sensor.dTheta = 0;
 544              	.LM10:
 545 0068 B4209FE5 		ldr	r2, .L5+8
 546 006c B4309FE5 		ldr	r3, .L5+12	@ float
 547 0070 083082E5 		str	r3, [r2, #8]	@ float
 190:lab.c         ****     g_sensor.dVx = 0;
 549              	.LM11:
 550 0074 A8209FE5 		ldr	r2, .L5+8
 551 0078 A8309FE5 		ldr	r3, .L5+12	@ float
 552 007c 103082E5 		str	r3, [r2, #16]	@ float
 191:lab.c         ****     g_sensor.dVy = 0;
 554              	.LM12:
 555 0080 9C209FE5 		ldr	r2, .L5+8
 556 0084 9C309FE5 		ldr	r3, .L5+12	@ float
 557 0088 143082E5 		str	r3, [r2, #20]	@ float
 192:lab.c         ****     g_sensor.dVz = 0;
 559              	.LM13:
 560 008c 90209FE5 		ldr	r2, .L5+8
 561 0090 90309FE5 		ldr	r3, .L5+12	@ float
 562 0094 183082E5 		str	r3, [r2, #24]	@ float
 193:lab.c         ****     g_sensor.dP = 0;
 564              	.LM14:
 565 0098 84209FE5 		ldr	r2, .L5+8
 566 009c 84309FE5 		ldr	r3, .L5+12	@ float
 567 00a0 1C3082E5 		str	r3, [r2, #28]	@ float
 194:lab.c         ****     g_sensor.dQ = 0;
 569              	.LM15:
 570 00a4 78209FE5 		ldr	r2, .L5+8
 571 00a8 78309FE5 		ldr	r3, .L5+12	@ float
 572 00ac 203082E5 		str	r3, [r2, #32]	@ float
 195:lab.c         ****     g_sensor.dR = 0;
 574              	.LM16:
 575 00b0 6C209FE5 		ldr	r2, .L5+8
 576 00b4 6C309FE5 		ldr	r3, .L5+12	@ float
 577 00b8 243082E5 		str	r3, [r2, #36]	@ float
 196:lab.c         ****     g_sensor.dAx = 0;
 579              	.LM17:
 580 00bc 60209FE5 		ldr	r2, .L5+8
 581 00c0 60309FE5 		ldr	r3, .L5+12	@ float
 582 00c4 283082E5 		str	r3, [r2, #40]	@ float
 197:lab.c         ****     g_sensor.dAy = 0;
 584              	.LM18:
 585 00c8 54209FE5 		ldr	r2, .L5+8
 586 00cc 54309FE5 		ldr	r3, .L5+12	@ float
 587 00d0 2C3082E5 		str	r3, [r2, #44]	@ float
 198:lab.c         ****     g_sensor.dAz = 0;
 589              	.LM19:
 590 00d4 48209FE5 		ldr	r2, .L5+8
 591 00d8 48309FE5 		ldr	r3, .L5+12	@ float
 592 00dc 303082E5 		str	r3, [r2, #48]	@ float
 199:lab.c         ****     g_sensor.dHx = 0;
 594              	.LM20:
 595 00e0 3C209FE5 		ldr	r2, .L5+8
 596 00e4 3C309FE5 		ldr	r3, .L5+12	@ float
 597 00e8 343082E5 		str	r3, [r2, #52]	@ float
 200:lab.c         ****     g_sensor.dHy = 0;
 599              	.LM21:
 600 00ec 30209FE5 		ldr	r2, .L5+8
 601 00f0 30309FE5 		ldr	r3, .L5+12	@ float
 602 00f4 383082E5 		str	r3, [r2, #56]	@ float
 201:lab.c         ****     g_sensor.dHz = 0;
 604              	.LM22:
 605 00f8 24209FE5 		ldr	r2, .L5+8
 606 00fc 24309FE5 		ldr	r3, .L5+12	@ float
 607 0100 3C3082E5 		str	r3, [r2, #60]	@ float
 202:lab.c         ****     g_sensor.dPressure = 0;
 609              	.LM23:
 610 0104 18209FE5 		ldr	r2, .L5+8
 611 0108 18309FE5 		ldr	r3, .L5+12	@ float
 612 010c 403082E5 		str	r3, [r2, #64]	@ float
 203:lab.c         **** 
 204:lab.c         ****     // Status Variables
 205:lab.c         **** 
 206:lab.c         ****     // g_status.iType = 0;
 207:lab.c         ****     // g_status.iStatus = 0;
 208:lab.c         ****     // g_status.iStatus2 = 0;
 209:lab.c         **** 
 210:lab.c         **** }
 614              	.LM24:
 615 0110 0CD04BE2 		sub	sp, fp, #12
 616 0114 00689DE8 		ldmfd	sp, {fp, sp, lr}
 617 0118 1EFF2FE1 		bx	lr
 618              	.L6:
 619              		.align	2
 620              	.L5:
 621 011c 00000000 		.word	msg_flag
 622 0120 00000000 		.word	DataOutputsPerSecond
 623 0124 00000000 		.word	g_sensor
 624 0128 00000000 		.word	0
 626              	.Lscope1:
 627              		.global	__udivsi3
 628              		.align	2
 630              		.global	countData
 632              	countData:
 211:lab.c         **** // added for testing by Vishwa
 212:lab.c         **** 
 213:lab.c         **** void countData(void){ //{{{1
 634              	.LM25:
 635              		@ Function supports interworking.
 636              		@ args = 0, pretend = 0, frame = 260
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638 012c 0DC0A0E1 		mov	ip, sp
 639 0130 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 640 0134 04B04CE2 		sub	fp, ip, #4
 641 0138 41DF4DE2 		sub	sp, sp, #260
 214:lab.c         ****     // msg_flag = 1 << FMSTATUS_ID;
 215:lab.c         ****     // DataOutputsPerSecond = 1;
 216:lab.c         ****     TFmMessage msgObj;
 217:lab.c         ****     /*if (my_lab_count%2 == 0){total_check_current = TotalBytesReceived;}
 218:lab.c         ****     else {total_check_previous = TotalBytesReceived;}
 219:lab.c         ****     if (total_check_previous == total_check_current)
 220:lab.c         ****     {
 221:lab.c         ****         trigger_flag = 1;
 222:lab.c         ****     }
 223:lab.c         ****     if (((trigger_flag == 1) || (my_lab_count >= test_time_limit)) && trigger_stop == 0)
 224:lab.c         ****     {   g_status.iType = 0;
 225:lab.c         ****         g_status.iStatus = 0;
 226:lab.c         ****         g_status.iStatus2 = TotalBytesReceived;
 227:lab.c         ****         trigger_stop = 1;
 228:lab.c         ****         fmStatusObject_tomessage(&g_status, &msgObj);
 229:lab.c         ****         UART_SendMsg(msgObj.data, msgObj.iMsgSize); 
 230:lab.c         ****     }*/
 231:lab.c         **** 
 232:lab.c         ****     test_time_limit = (unsigned long int)((max_output_count/DataOutputsPerSecond)*1000 + comm_start
 643              	.LM26:
 644 013c F4309FE5 		ldr	r3, .L12
 645 0140 002093E5 		ldr	r2, [r3, #0]
 646 0144 F0309FE5 		ldr	r3, .L12+4
 647 0148 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 648 014c 0200A0E1 		mov	r0, r2
 649 0150 0310A0E1 		mov	r1, r3
 650 0154 FEFFFFEB 		bl	__udivsi3
 651 0158 0030A0E1 		mov	r3, r0
 652 015c 0320A0E1 		mov	r2, r3
 653 0160 0230A0E1 		mov	r3, r2
 654 0164 8332A0E1 		mov	r3, r3, asl #5
 655 0168 033062E0 		rsb	r3, r2, r3
 656 016c 0331A0E1 		mov	r3, r3, asl #2
 657 0170 023083E0 		add	r3, r3, r2
 658 0174 8331A0E1 		mov	r3, r3, asl #3
 659 0178 0320A0E1 		mov	r2, r3
 660 017c BC309FE5 		ldr	r3, .L12+8
 661 0180 003093E5 		ldr	r3, [r3, #0]
 662 0184 033082E0 		add	r3, r2, r3
 663 0188 6D3D83E2 		add	r3, r3, #6976
 664 018c 183083E2 		add	r3, r3, #24
 665 0190 AC209FE5 		ldr	r2, .L12+12
 666 0194 003082E5 		str	r3, [r2, #0]
 233:lab.c         ****     if ((my_lab_count >= test_time_limit) && trigger_stop == 0)
 668              	.LM27:
 669 0198 A8309FE5 		ldr	r3, .L12+16
 670 019c 002093E5 		ldr	r2, [r3, #0]
 671 01a0 9C309FE5 		ldr	r3, .L12+12
 672 01a4 003093E5 		ldr	r3, [r3, #0]
 673 01a8 030052E1 		cmp	r2, r3
 674 01ac 1E00003A 		bcc	.L11
 675 01b0 94309FE5 		ldr	r3, .L12+20
 676 01b4 003093E5 		ldr	r3, [r3, #0]
 677 01b8 000053E3 		cmp	r3, #0
 678 01bc 1A00001A 		bne	.L11
 234:lab.c         ****     {   g_status.iType = 0;
 680              	.LM28:
 681 01c0 88209FE5 		ldr	r2, .L12+24
 682 01c4 0030A0E3 		mov	r3, #0
 683 01c8 0030C2E5 		strb	r3, [r2, #0]
 235:lab.c         ****         g_status.iStatus = 0;
 685              	.LM29:
 686 01cc 7C209FE5 		ldr	r2, .L12+24
 687 01d0 0030A0E3 		mov	r3, #0
 688 01d4 0130C2E5 		strb	r3, [r2, #1]
 236:lab.c         ****         g_status.iStatus2 = TotalBytesReceived;
 690              	.LM30:
 691 01d8 74309FE5 		ldr	r3, .L12+28
 692 01dc 002093E5 		ldr	r2, [r3, #0]
 693 01e0 68309FE5 		ldr	r3, .L12+24
 694 01e4 042083E5 		str	r2, [r3, #4]
 237:lab.c         ****         trigger_stop = 1;
 696              	.LM31:
 697 01e8 5C209FE5 		ldr	r2, .L12+20
 698 01ec 0130A0E3 		mov	r3, #1
 699 01f0 003082E5 		str	r3, [r2, #0]
 238:lab.c         ****         fmStatusObject_tomessage(&g_status, &msgObj);
 701              	.LM32:
 702 01f4 113E4BE2 		sub	r3, fp, #272
 703 01f8 50009FE5 		ldr	r0, .L12+24
 704 01fc 0310A0E1 		mov	r1, r3
 705 0200 FEFFFFEB 		bl	fmStatusObject_tomessage
 239:lab.c         ****         UART_SendMsg(msgObj.data, msgObj.iMsgSize); 
 707              	.LM33:
 708 0204 013CE0E3 		mvn	r3, #256
 709 0208 013043E2 		sub	r3, r3, #1
 710 020c 0C204BE2 		sub	r2, fp, #12
 711 0210 B33092E1 		ldrh	r3, [r2, r3]
 712 0214 0320A0E1 		mov	r2, r3
 713 0218 113E4BE2 		sub	r3, fp, #272
 714 021c 043083E2 		add	r3, r3, #4
 715 0220 0300A0E1 		mov	r0, r3
 716 0224 0210A0E1 		mov	r1, r2
 717 0228 FEFFFFEB 		bl	UART_SendMsg
 718              	.L11:
 240:lab.c         ****     }
 241:lab.c         **** }
 720              	.LM34:
 721 022c 0CD04BE2 		sub	sp, fp, #12
 722 0230 00689DE8 		ldmfd	sp, {fp, sp, lr}
 723 0234 1EFF2FE1 		bx	lr
 724              	.L13:
 725              		.align	2
 726              	.L12:
 727 0238 00000000 		.word	max_output_count
 728 023c 00000000 		.word	DataOutputsPerSecond
 729 0240 00000000 		.word	comm_start_count
 730 0244 00000000 		.word	test_time_limit
 731 0248 00000000 		.word	my_lab_count
 732 024c 00000000 		.word	trigger_stop
 733 0250 00000000 		.word	g_status
 734 0254 00000000 		.word	TotalBytesReceived
 739              	.Lscope2:
 740              		.align	2
 742              		.global	ExternalOuterLoop
 744              	ExternalOuterLoop:
 242:lab.c         **** 
 243:lab.c         **** void ExternalOuterLoop(void) { //{{{1
 746              	.LM35:
 747              		@ Function supports interworking.
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750 0258 0DC0A0E1 		mov	ip, sp
 751 025c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 752 0260 04B04CE2 		sub	fp, ip, #4
 244:lab.c         ****     DataOutputsPerSecond = 5;
 754              	.LM36:
 755 0264 54209FE5 		ldr	r2, .L16
 756 0268 0530A0E3 		mov	r3, #5
 757 026c 0030C2E5 		strb	r3, [r2, #0]
 245:lab.c         ****     //msg_flag = (1<<FMGPSSENSOR_ID) | (1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID) | (1<<FMPLANNERINFO_I
 246:lab.c         ****     //msg_flag = (1<<FMSTATE_ID); //| (1<<FMMOTORINPUT_ID);
 247:lab.c         ****     msg_flag = 0;
 759              	.LM37:
 760 0270 4C209FE5 		ldr	r2, .L16+4
 761 0274 0030A0E3 		mov	r3, #0
 762 0278 003082E5 		str	r3, [r2, #0]
 248:lab.c         **** 
 249:lab.c         ****     // PASS THROUGH DESIRED THRUST
 250:lab.c         ****     g_u[3] = u_outer.thrust_desired;
 764              	.LM38:
 765 027c 44309FE5 		ldr	r3, .L16+8
 766 0280 182093E5 		ldr	r2, [r3, #24]	@ float
 767 0284 40309FE5 		ldr	r3, .L16+12
 768 0288 0C2083E5 		str	r2, [r3, #12]	@ float
 251:lab.c         **** 
 252:lab.c         ****     // CALL INNER LOOP
 253:lab.c         ****     InnerLoop(u_outer.roll_desired, u_outer.pitch_desired, u_outer.yaw_desired);
 770              	.LM39:
 771 028c 34309FE5 		ldr	r3, .L16+8
 772 0290 002093E5 		ldr	r2, [r3, #0]	@ float
 773 0294 2C309FE5 		ldr	r3, .L16+8
 774 0298 041093E5 		ldr	r1, [r3, #4]	@ float
 775 029c 24309FE5 		ldr	r3, .L16+8
 776 02a0 083093E5 		ldr	r3, [r3, #8]	@ float
 777 02a4 0200A0E1 		mov	r0, r2
 778 02a8 0320A0E1 		mov	r2, r3
 779 02ac FEFFFFEB 		bl	InnerLoop
 254:lab.c         **** 
 255:lab.c         ****     // SEND CONTROL TO MOTORS
 256:lab.c         ****     AE483_send_control();
 781              	.LM40:
 782 02b0 FEFFFFEB 		bl	AE483_send_control
 257:lab.c         **** }
 784              	.LM41:
 785 02b4 0CD04BE2 		sub	sp, fp, #12
 786 02b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 787 02bc 1EFF2FE1 		bx	lr
 788              	.L17:
 789              		.align	2
 790              	.L16:
 791 02c0 00000000 		.word	DataOutputsPerSecond
 792 02c4 00000000 		.word	msg_flag
 793 02c8 00000000 		.word	u_outer
 794 02cc 00000000 		.word	g_u
 796              	.Lscope3:
 797              		.align	2
 799              		.global	ExternalOuterLoopRate
 801              	ExternalOuterLoopRate:
 258:lab.c         **** 
 259:lab.c         **** void ExternalOuterLoopRate(void) { //{{{1
 803              	.LM42:
 804              		@ Function supports interworking.
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 1, uses_anonymous_args = 0
 807 02d0 0DC0A0E1 		mov	ip, sp
 808 02d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 809 02d8 04B04CE2 		sub	fp, ip, #4
 260:lab.c         ****     DataOutputsPerSecond = 10;
 811              	.LM43:
 812 02dc 54209FE5 		ldr	r2, .L20
 813 02e0 0A30A0E3 		mov	r3, #10
 814 02e4 0030C2E5 		strb	r3, [r2, #0]
 261:lab.c         ****     //msg_flag = (1<<FMGPSSENSOR_ID) | (1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID) | (1<<FMPLANNERINFO_I
 262:lab.c         ****     //msg_flag = (1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID);
 263:lab.c         ****     msg_flag = (1<<FMSENSOR_ID); 
 816              	.LM44:
 817 02e8 4C209FE5 		ldr	r2, .L20+4
 818 02ec 0830A0E3 		mov	r3, #8
 819 02f0 003082E5 		str	r3, [r2, #0]
 264:lab.c         **** 
 265:lab.c         ****     // PASS THROUGH DESIRED THRUST
 266:lab.c         ****     g_u[3] = u_outer.thrust_desired;
 821              	.LM45:
 822 02f4 44309FE5 		ldr	r3, .L20+8
 823 02f8 182093E5 		ldr	r2, [r3, #24]	@ float
 824 02fc 40309FE5 		ldr	r3, .L20+12
 825 0300 0C2083E5 		str	r2, [r3, #12]	@ float
 267:lab.c         **** 
 268:lab.c         ****     // CALL INNER LOOP
 269:lab.c         ****     InnerLoopRate(u_outer.roll_desired, u_outer.pitch_desired, u_outer.yaw_desired);
 827              	.LM46:
 828 0304 34309FE5 		ldr	r3, .L20+8
 829 0308 002093E5 		ldr	r2, [r3, #0]	@ float
 830 030c 2C309FE5 		ldr	r3, .L20+8
 831 0310 041093E5 		ldr	r1, [r3, #4]	@ float
 832 0314 24309FE5 		ldr	r3, .L20+8
 833 0318 083093E5 		ldr	r3, [r3, #8]	@ float
 834 031c 0200A0E1 		mov	r0, r2
 835 0320 0320A0E1 		mov	r2, r3
 836 0324 FEFFFFEB 		bl	InnerLoopRate
 270:lab.c         **** 
 271:lab.c         ****     // SEND CONTROL TO MOTORS
 272:lab.c         ****     AE483_send_control();
 838              	.LM47:
 839 0328 FEFFFFEB 		bl	AE483_send_control
 273:lab.c         **** }
 841              	.LM48:
 842 032c 0CD04BE2 		sub	sp, fp, #12
 843 0330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 844 0334 1EFF2FE1 		bx	lr
 845              	.L21:
 846              		.align	2
 847              	.L20:
 848 0338 00000000 		.word	DataOutputsPerSecond
 849 033c 00000000 		.word	msg_flag
 850 0340 00000000 		.word	u_outer
 851 0344 00000000 		.word	g_u
 853              	.Lscope4:
 854              		.align	2
 856              		.global	ExternalOuterLoopAngleRate
 858              	ExternalOuterLoopAngleRate:
 274:lab.c         **** 
 275:lab.c         **** 
 276:lab.c         **** void ExternalOuterLoopAngleRate(void) { //{{{1 Angle and Ang.Vel. tracking Mellinger2011
 860              	.LM49:
 861              		@ Function supports interworking.
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 1, uses_anonymous_args = 0
 864 0348 0DC0A0E1 		mov	ip, sp
 865 034c 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 866 0350 04B04CE2 		sub	fp, ip, #4
 867 0354 08D04DE2 		sub	sp, sp, #8
 277:lab.c         ****     DataOutputsPerSecond = 5;
 869              	.LM50:
 870 0358 7C209FE5 		ldr	r2, .L24
 871 035c 0530A0E3 		mov	r3, #5
 872 0360 0030C2E5 		strb	r3, [r2, #0]
 278:lab.c         ****     msg_flag = 0;
 874              	.LM51:
 875 0364 74209FE5 		ldr	r2, .L24+4
 876 0368 0030A0E3 		mov	r3, #0
 877 036c 003082E5 		str	r3, [r2, #0]
 279:lab.c         **** 
 280:lab.c         ****     // PASS THROUGH DESIRED THRUST
 281:lab.c         ****     g_u[3] = u_outer.thrust_desired;
 879              	.LM52:
 880 0370 6C309FE5 		ldr	r3, .L24+8
 881 0374 182093E5 		ldr	r2, [r3, #24]	@ float
 882 0378 68309FE5 		ldr	r3, .L24+12
 883 037c 0C2083E5 		str	r2, [r3, #12]	@ float
 282:lab.c         **** 
 283:lab.c         ****     // CALL INNER LOOP
 284:lab.c         ****     InnerLoopAngleRate(u_outer.roll_desired, u_outer.pitch_desired, u_outer.yaw_desired,
 885              	.LM53:
 886 0380 5C309FE5 		ldr	r3, .L24+8
 887 0384 001093E5 		ldr	r1, [r3, #0]	@ float
 888 0388 54309FE5 		ldr	r3, .L24+8
 889 038c 04E093E5 		ldr	lr, [r3, #4]	@ float
 890 0390 4C309FE5 		ldr	r3, .L24+8
 891 0394 084093E5 		ldr	r4, [r3, #8]	@ float
 892 0398 44309FE5 		ldr	r3, .L24+8
 893 039c 0CC093E5 		ldr	ip, [r3, #12]	@ float
 894 03a0 3C309FE5 		ldr	r3, .L24+8
 895 03a4 102093E5 		ldr	r2, [r3, #16]	@ float
 896 03a8 34309FE5 		ldr	r3, .L24+8
 897 03ac 143093E5 		ldr	r3, [r3, #20]	@ float
 898 03b0 00208DE5 		str	r2, [sp, #0]	@ float
 899 03b4 04308DE5 		str	r3, [sp, #4]	@ float
 900 03b8 0100A0E1 		mov	r0, r1
 901 03bc 0E10A0E1 		mov	r1, lr
 902 03c0 0420A0E1 		mov	r2, r4
 903 03c4 0C30A0E1 		mov	r3, ip
 904 03c8 FEFFFFEB 		bl	InnerLoopAngleRate
 285:lab.c         ****                        u_outer.p_desired, u_outer.q_desired, u_outer.r_desired);
 286:lab.c         **** 
 287:lab.c         ****     // SEND CONTROL TO MOTORS
 288:lab.c         ****     AE483_send_control();
 906              	.LM54:
 907 03cc FEFFFFEB 		bl	AE483_send_control
 289:lab.c         **** }
 909              	.LM55:
 910 03d0 10D04BE2 		sub	sp, fp, #16
 911 03d4 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 912 03d8 1EFF2FE1 		bx	lr
 913              	.L25:
 914              		.align	2
 915              	.L24:
 916 03dc 00000000 		.word	DataOutputsPerSecond
 917 03e0 00000000 		.word	msg_flag
 918 03e4 00000000 		.word	u_outer
 919 03e8 00000000 		.word	g_u
 921              	.Lscope5:
 922              		.bss
 923              		.align	2
 924              	yaw_desired.3635:
 925 0040 00000000 		.space	4
 927              		.align	2
 928              	pitch_desired.3634:
 929 0044 00000000 		.space	4
 931              		.align	2
 932              	roll_desired.3633:
 933 0048 00000000 		.space	4
 935              		.global	__divsi3
 936              		.text
 937              		.align	2
 939              		.global	GPSHold
 941              	GPSHold:
 290:lab.c         **** 
 291:lab.c         **** 
 292:lab.c         **** 
 293:lab.c         **** void GPSHold(void) { //{{{1
 943              	.LM56:
 944              		@ Function supports interworking.
 945              		@ args = 0, pretend = 0, frame = 12
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947 03ec 0DC0A0E1 		mov	ip, sp
 948 03f0 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 949 03f4 04B04CE2 		sub	fp, ip, #4
 950 03f8 14D04DE2 		sub	sp, sp, #20
 294:lab.c         **** 
 295:lab.c         ****     DataOutputsPerSecond = 5;
 952              	.LM57:
 953 03fc D4209FE5 		ldr	r2, .L30
 954 0400 0530A0E3 		mov	r3, #5
 955 0404 0030C2E5 		strb	r3, [r2, #0]
 296:lab.c         ****     msg_flag = (1<<FMGPSSENSOR_ID) | (1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID) | (1<<FMPLANNERINFO_ID)
 957              	.LM58:
 958 0408 CC209FE5 		ldr	r2, .L30+4
 959 040c 0239A0E3 		mov	r3, #32768
 960 0410 A23083E2 		add	r3, r3, #162
 961 0414 003082E5 		str	r3, [r2, #0]
 297:lab.c         **** 
 298:lab.c         ****     static float roll_desired = 0.0;
 299:lab.c         ****     static float pitch_desired = 0.0;
 300:lab.c         ****     static float yaw_desired = 0.0;
 301:lab.c         **** 
 302:lab.c         ****     float x_desired = 0.0;
 963              	.LM59:
 964 0418 C0309FE5 		ldr	r3, .L30+8	@ float
 965 041c 1C300BE5 		str	r3, [fp, #-28]	@ float
 303:lab.c         ****     float y_desired = 0.0;
 967              	.LM60:
 968 0420 B8309FE5 		ldr	r3, .L30+8	@ float
 969 0424 18300BE5 		str	r3, [fp, #-24]	@ float
 304:lab.c         ****     float z_desired = 0.2;
 971              	.LM61:
 972 0428 B4309FE5 		ldr	r3, .L30+12	@ float
 973 042c 14300BE5 		str	r3, [fp, #-20]	@ float
 305:lab.c         **** 
 306:lab.c         ****     // CALL OUTER LOOP
 307:lab.c         ****     if (outer_loop_timer++ == ControllerCyclesPerSecond / OuterLoopFrequency) {
 975              	.LM62:
 976 0430 B0309FE5 		ldr	r3, .L30+16
 977 0434 004093E5 		ldr	r4, [r3, #0]
 978 0438 AC309FE5 		ldr	r3, .L30+20
 979 043c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 980 0440 FA0FA0E3 		mov	r0, #1000
 981 0444 0310A0E1 		mov	r1, r3
 982 0448 FEFFFFEB 		bl	__divsi3
 983 044c 0030A0E1 		mov	r3, r0
 984 0450 030054E1 		cmp	r4, r3
 985 0454 0030A013 		movne	r3, #0
 986 0458 0130A003 		moveq	r3, #1
 987 045c FF1003E2 		and	r1, r3, #255
 988 0460 012084E2 		add	r2, r4, #1
 989 0464 7C309FE5 		ldr	r3, .L30+16
 990 0468 002083E5 		str	r2, [r3, #0]
 991 046c 000051E3 		cmp	r1, #0
 992 0470 0B00000A 		beq	.L27
 308:lab.c         ****         OuterLoopGPSUltrasound(x_desired, y_desired, z_desired, &roll_desired, &pitch_desired, &yaw
 994              	.LM63:
 995 0474 74309FE5 		ldr	r3, .L30+24
 996 0478 00308DE5 		str	r3, [sp, #0]
 997 047c 70309FE5 		ldr	r3, .L30+28
 998 0480 04308DE5 		str	r3, [sp, #4]
 999 0484 1C001BE5 		ldr	r0, [fp, #-28]	@ float
 1000 0488 18101BE5 		ldr	r1, [fp, #-24]	@ float
 1001 048c 14201BE5 		ldr	r2, [fp, #-20]	@ float
 1002 0490 60309FE5 		ldr	r3, .L30+32
 1003 0494 FEFFFFEB 		bl	OuterLoopGPSUltrasound
 309:lab.c         ****         outer_loop_timer = 0;
 1005              	.LM64:
 1006 0498 48209FE5 		ldr	r2, .L30+16
 1007 049c 0030A0E3 		mov	r3, #0
 1008 04a0 003082E5 		str	r3, [r2, #0]
 1009              	.L27:
 310:lab.c         ****     }
 311:lab.c         **** 
 312:lab.c         ****     // CALL INNER LOOP
 313:lab.c         ****     InnerLoop(roll_desired, pitch_desired, yaw_desired);
 1011              	.LM65:
 1012 04a4 4C309FE5 		ldr	r3, .L30+32
 1013 04a8 002093E5 		ldr	r2, [r3, #0]	@ float
 1014 04ac 3C309FE5 		ldr	r3, .L30+24
 1015 04b0 001093E5 		ldr	r1, [r3, #0]	@ float
 1016 04b4 38309FE5 		ldr	r3, .L30+28
 1017 04b8 003093E5 		ldr	r3, [r3, #0]	@ float
 1018 04bc 0200A0E1 		mov	r0, r2
 1019 04c0 0320A0E1 		mov	r2, r3
 1020 04c4 FEFFFFEB 		bl	InnerLoop
 314:lab.c         **** 
 315:lab.c         ****     // SEND CONTROL TO MOTORS
 316:lab.c         ****     AE483_send_control();
 1022              	.LM66:
 1023 04c8 FEFFFFEB 		bl	AE483_send_control
 317:lab.c         **** }
 1025              	.LM67:
 1026 04cc 10D04BE2 		sub	sp, fp, #16
 1027 04d0 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 1028 04d4 1EFF2FE1 		bx	lr
 1029              	.L31:
 1030              		.align	2
 1031              	.L30:
 1032 04d8 00000000 		.word	DataOutputsPerSecond
 1033 04dc 00000000 		.word	msg_flag
 1034 04e0 00000000 		.word	0
 1035 04e4 CDCC4C3E 		.word	1045220557
 1036 04e8 00000000 		.word	outer_loop_timer
 1037 04ec 00000000 		.word	OuterLoopFrequency
 1038 04f0 44000000 		.word	pitch_desired.3634
 1039 04f4 40000000 		.word	yaw_desired.3635
 1040 04f8 48000000 		.word	roll_desired.3633
 1050              	.Lscope6:
 1051              		.global	__subsf3
 1052              		.global	__extendsfdf2
 1053              		.global	__muldf3
 1054              		.global	__adddf3
 1055              		.global	__truncdfsf2
 1056              		.global	__lesf2
 1057              		.global	__mulsf3
 1058              		.global	__divsf3
 1059              		.global	__gtsf2
 1060              		.global	__addsf3
 1061              		.global	__ltsf2
 1062              		.global	__subdf3
 1063              		.align	2
 1071              		.global	OuterLoopGPSUltrasound
 1073              	OuterLoopGPSUltrasound:
 318:lab.c         **** 
 319:lab.c         **** 
 320:lab.c         **** void OuterLoopGPSUltrasound(float x_desired, float y_desired, float z_desired, float* roll_desired,
 1075              	.LM68:
 1076              		@ Function supports interworking.
 1077              		@ args = 8, pretend = 0, frame = 124
 1078              		@ frame_needed = 1, uses_anonymous_args = 0
 1079 04fc 0DC0A0E1 		mov	ip, sp
 1080 0500 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 1081 0504 04B04CE2 		sub	fp, ip, #4
 1082 0508 7CD04DE2 		sub	sp, sp, #124
 1083 050c 98000BE5 		str	r0, [fp, #-152]	@ float
 1084 0510 9C100BE5 		str	r1, [fp, #-156]	@ float
 1085 0514 A0200BE5 		str	r2, [fp, #-160]	@ float
 1086 0518 A4300BE5 		str	r3, [fp, #-164]
 321:lab.c         **** 
 322:lab.c         ****     //compute xyz from Latitude,Longitude
 323:lab.c         ****     flatEarthl2x();  // computes "xpos", "ypos"
 1088              	.LM69:
 1089 051c FEFFFFEB 		bl	flatEarthl2x
 324:lab.c         ****     //ll2x();
 325:lab.c         **** 
 326:lab.c         ****     /////////////////// POTENTIAL FUNCTION ///////////////
 327:lab.c         ****     float kdescent = 50.0;
 1091              	.LM70:
 1092 0520 0C399FE5 		ldr	r3, .L52+8	@ float
 1093 0524 8C300BE5 		str	r3, [fp, #-140]	@ float
 328:lab.c         ****     float bdescent = 0.3;
 1095              	.LM71:
 1096 0528 08399FE5 		ldr	r3, .L52+12	@ float
 1097 052c 88300BE5 		str	r3, [fp, #-136]	@ float
 329:lab.c         ****     float k_att = 1.0;
 1099              	.LM72:
 1100 0530 04399FE5 		ldr	r3, .L52+16	@ float
 1101 0534 84300BE5 		str	r3, [fp, #-132]	@ float
 330:lab.c         ****     float b_att = 1.0;
 1103              	.LM73:
 1104 0538 FC389FE5 		ldr	r3, .L52+16	@ float
 1105 053c 80300BE5 		str	r3, [fp, #-128]	@ float
 331:lab.c         ****     float delta_t = 0.02;
 1107              	.LM74:
 1108 0540 F8389FE5 		ldr	r3, .L52+20	@ float
 1109 0544 7C300BE5 		str	r3, [fp, #-124]	@ float
 332:lab.c         ****     float grad_fx;
 333:lab.c         ****     float grad_fy;
 334:lab.c         **** 
 335:lab.c         ****     float x_diff = g_state.dX - x_desired;
 1111              	.LM75:
 1112 0548 F4389FE5 		ldr	r3, .L52+24
 1113 054c 043093E5 		ldr	r3, [r3, #4]	@ float
 1114 0550 0300A0E1 		mov	r0, r3
 1115 0554 98101BE5 		ldr	r1, [fp, #-152]	@ float
 1116 0558 FEFFFFEB 		bl	__subsf3
 1117 055c 0030A0E1 		mov	r3, r0
 1118 0560 70300BE5 		str	r3, [fp, #-112]	@ float
 336:lab.c         ****     float y_diff = g_state.dY - y_desired;
 1120              	.LM76:
 1121 0564 D8389FE5 		ldr	r3, .L52+24
 1122 0568 083093E5 		ldr	r3, [r3, #8]	@ float
 1123 056c 0300A0E1 		mov	r0, r3
 1124 0570 9C101BE5 		ldr	r1, [fp, #-156]	@ float
 1125 0574 FEFFFFEB 		bl	__subsf3
 1126 0578 0030A0E1 		mov	r3, r0
 1127 057c 6C300BE5 		str	r3, [fp, #-108]	@ float
 337:lab.c         ****     //z_diff = (z_pos-z_des);
 338:lab.c         ****     float norm_diff = sqrt(pow(x_diff,2.0)+pow(y_diff,2.0));//+pow(z_diff,2.0));
 1129              	.LM77:
 1130 0580 70001BE5 		ldr	r0, [fp, #-112]	@ float
 1131 0584 FEFFFFEB 		bl	__extendsfdf2
 1132 0588 0030A0E1 		mov	r3, r0
 1133 058c 0140A0E1 		mov	r4, r1
 1134 0590 0300A0E1 		mov	r0, r3
 1135 0594 0410A0E1 		mov	r1, r4
 1136 0598 0320A0E1 		mov	r2, r3
 1137 059c 0430A0E1 		mov	r3, r4
 1138 05a0 FEFFFFEB 		bl	__muldf3
 1139 05a4 0030A0E1 		mov	r3, r0
 1140 05a8 0140A0E1 		mov	r4, r1
 1141 05ac 0350A0E1 		mov	r5, r3
 1142 05b0 0460A0E1 		mov	r6, r4
 1143 05b4 6C001BE5 		ldr	r0, [fp, #-108]	@ float
 1144 05b8 FEFFFFEB 		bl	__extendsfdf2
 1145 05bc 0030A0E1 		mov	r3, r0
 1146 05c0 0140A0E1 		mov	r4, r1
 1147 05c4 0300A0E1 		mov	r0, r3
 1148 05c8 0410A0E1 		mov	r1, r4
 1149 05cc 0320A0E1 		mov	r2, r3
 1150 05d0 0430A0E1 		mov	r3, r4
 1151 05d4 FEFFFFEB 		bl	__muldf3
 1152 05d8 0030A0E1 		mov	r3, r0
 1153 05dc 0140A0E1 		mov	r4, r1
 1154 05e0 0500A0E1 		mov	r0, r5
 1155 05e4 0610A0E1 		mov	r1, r6
 1156 05e8 0320A0E1 		mov	r2, r3
 1157 05ec 0430A0E1 		mov	r3, r4
 1158 05f0 FEFFFFEB 		bl	__adddf3
 1159 05f4 0030A0E1 		mov	r3, r0
 1160 05f8 0140A0E1 		mov	r4, r1
 1161 05fc 0300A0E1 		mov	r0, r3
 1162 0600 0410A0E1 		mov	r1, r4
 1163 0604 FEFFFFEB 		bl	sqrt
 1164 0608 0030A0E1 		mov	r3, r0
 1165 060c 0140A0E1 		mov	r4, r1
 1166 0610 0300A0E1 		mov	r0, r3
 1167 0614 0410A0E1 		mov	r1, r4
 1168 0618 FEFFFFEB 		bl	__truncdfsf2
 1169 061c 0030A0E1 		mov	r3, r0
 1170 0620 68300BE5 		str	r3, [fp, #-104]	@ float
 339:lab.c         ****     if (norm_diff <= b_att)
 1172              	.LM78:
 1173 0624 68001BE5 		ldr	r0, [fp, #-104]	@ float
 1174 0628 80101BE5 		ldr	r1, [fp, #-128]	@ float
 1175 062c FEFFFFEB 		bl	__lesf2
 1176 0630 0030A0E1 		mov	r3, r0
 1177 0634 000053E3 		cmp	r3, #0
 1178 0638 000000DA 		ble	.L35
 1179 063c 0A0000EA 		b	.L33
 1180              	.L35:
 340:lab.c         ****     {
 341:lab.c         ****         grad_fx = k_att*x_diff;
 1182              	.LM79:
 1183 0640 84001BE5 		ldr	r0, [fp, #-132]	@ float
 1184 0644 70101BE5 		ldr	r1, [fp, #-112]	@ float
 1185 0648 FEFFFFEB 		bl	__mulsf3
 1186 064c 0030A0E1 		mov	r3, r0
 1187 0650 78300BE5 		str	r3, [fp, #-120]	@ float
 342:lab.c         ****         grad_fy = k_att*y_diff;
 1189              	.LM80:
 1190 0654 84001BE5 		ldr	r0, [fp, #-132]	@ float
 1191 0658 6C101BE5 		ldr	r1, [fp, #-108]	@ float
 1192 065c FEFFFFEB 		bl	__mulsf3
 1193 0660 0030A0E1 		mov	r3, r0
 1194 0664 74300BE5 		str	r3, [fp, #-116]	@ float
 1195 0668 190000EA 		b	.L36
 1196              	.L33:
 343:lab.c         ****         //grad_fz = k_att*z_diff;
 344:lab.c         ****     }
 345:lab.c         ****     else
 346:lab.c         ****     {
 347:lab.c         ****         grad_fx = k_att*b_att*x_diff/norm_diff;
 1198              	.LM81:
 1199 066c 84001BE5 		ldr	r0, [fp, #-132]	@ float
 1200 0670 80101BE5 		ldr	r1, [fp, #-128]	@ float
 1201 0674 FEFFFFEB 		bl	__mulsf3
 1202 0678 0030A0E1 		mov	r3, r0
 1203 067c 0300A0E1 		mov	r0, r3
 1204 0680 70101BE5 		ldr	r1, [fp, #-112]	@ float
 1205 0684 FEFFFFEB 		bl	__mulsf3
 1206 0688 0030A0E1 		mov	r3, r0
 1207 068c 0300A0E1 		mov	r0, r3
 1208 0690 68101BE5 		ldr	r1, [fp, #-104]	@ float
 1209 0694 FEFFFFEB 		bl	__divsf3
 1210 0698 0030A0E1 		mov	r3, r0
 1211 069c 78300BE5 		str	r3, [fp, #-120]	@ float
 348:lab.c         ****         grad_fy = k_att*b_att*y_diff/norm_diff;
 1213              	.LM82:
 1214 06a0 84001BE5 		ldr	r0, [fp, #-132]	@ float
 1215 06a4 80101BE5 		ldr	r1, [fp, #-128]	@ float
 1216 06a8 FEFFFFEB 		bl	__mulsf3
 1217 06ac 0030A0E1 		mov	r3, r0
 1218 06b0 0300A0E1 		mov	r0, r3
 1219 06b4 6C101BE5 		ldr	r1, [fp, #-108]	@ float
 1220 06b8 FEFFFFEB 		bl	__mulsf3
 1221 06bc 0030A0E1 		mov	r3, r0
 1222 06c0 0300A0E1 		mov	r0, r3
 1223 06c4 68101BE5 		ldr	r1, [fp, #-104]	@ float
 1224 06c8 FEFFFFEB 		bl	__divsf3
 1225 06cc 0030A0E1 		mov	r3, r0
 1226 06d0 74300BE5 		str	r3, [fp, #-116]	@ float
 1227              	.L36:
 349:lab.c         ****         //grad_fz = k_att*b_att*z_diff/norm_diff;
 350:lab.c         ****     }
 351:lab.c         ****     float dq[2];
 352:lab.c         ****     dq[0] = -delta_t*kdescent*grad_fx;
 1229              	.LM83:
 1230 06d4 7C301BE5 		ldr	r3, [fp, #-124]
 1231 06d8 023123E2 		eor	r3, r3, #-2147483648
 1232 06dc 0300A0E1 		mov	r0, r3
 1233 06e0 8C101BE5 		ldr	r1, [fp, #-140]	@ float
 1234 06e4 FEFFFFEB 		bl	__mulsf3
 1235 06e8 0030A0E1 		mov	r3, r0
 1236 06ec 0300A0E1 		mov	r0, r3
 1237 06f0 78101BE5 		ldr	r1, [fp, #-120]	@ float
 1238 06f4 FEFFFFEB 		bl	__mulsf3
 1239 06f8 0030A0E1 		mov	r3, r0
 1240 06fc 94300BE5 		str	r3, [fp, #-148]	@ float
 353:lab.c         ****     dq[1] = -delta_t*kdescent*grad_fy;
 1242              	.LM84:
 1243 0700 7C301BE5 		ldr	r3, [fp, #-124]
 1244 0704 023123E2 		eor	r3, r3, #-2147483648
 1245 0708 0300A0E1 		mov	r0, r3
 1246 070c 8C101BE5 		ldr	r1, [fp, #-140]	@ float
 1247 0710 FEFFFFEB 		bl	__mulsf3
 1248 0714 0030A0E1 		mov	r3, r0
 1249 0718 0300A0E1 		mov	r0, r3
 1250 071c 74101BE5 		ldr	r1, [fp, #-116]	@ float
 1251 0720 FEFFFFEB 		bl	__mulsf3
 1252 0724 0030A0E1 		mov	r3, r0
 1253 0728 90300BE5 		str	r3, [fp, #-144]	@ float
 354:lab.c         ****     float dqnorm = sqrt(pow(dq[0],2) + pow(dq[1],2));
 1255              	.LM85:
 1256 072c 94301BE5 		ldr	r3, [fp, #-148]	@ float
 1257 0730 0300A0E1 		mov	r0, r3
 1258 0734 FEFFFFEB 		bl	__extendsfdf2
 1259 0738 0030A0E1 		mov	r3, r0
 1260 073c 0140A0E1 		mov	r4, r1
 1261 0740 0300A0E1 		mov	r0, r3
 1262 0744 0410A0E1 		mov	r1, r4
 1263 0748 0320A0E1 		mov	r2, r3
 1264 074c 0430A0E1 		mov	r3, r4
 1265 0750 FEFFFFEB 		bl	__muldf3
 1266 0754 0030A0E1 		mov	r3, r0
 1267 0758 0140A0E1 		mov	r4, r1
 1268 075c 0350A0E1 		mov	r5, r3
 1269 0760 0460A0E1 		mov	r6, r4
 1270 0764 90301BE5 		ldr	r3, [fp, #-144]	@ float
 1271 0768 0300A0E1 		mov	r0, r3
 1272 076c FEFFFFEB 		bl	__extendsfdf2
 1273 0770 0030A0E1 		mov	r3, r0
 1274 0774 0140A0E1 		mov	r4, r1
 1275 0778 0300A0E1 		mov	r0, r3
 1276 077c 0410A0E1 		mov	r1, r4
 1277 0780 0320A0E1 		mov	r2, r3
 1278 0784 0430A0E1 		mov	r3, r4
 1279 0788 FEFFFFEB 		bl	__muldf3
 1280 078c 0030A0E1 		mov	r3, r0
 1281 0790 0140A0E1 		mov	r4, r1
 1282 0794 0500A0E1 		mov	r0, r5
 1283 0798 0610A0E1 		mov	r1, r6
 1284 079c 0320A0E1 		mov	r2, r3
 1285 07a0 0430A0E1 		mov	r3, r4
 1286 07a4 FEFFFFEB 		bl	__adddf3
 1287 07a8 0030A0E1 		mov	r3, r0
 1288 07ac 0140A0E1 		mov	r4, r1
 1289 07b0 0300A0E1 		mov	r0, r3
 1290 07b4 0410A0E1 		mov	r1, r4
 1291 07b8 FEFFFFEB 		bl	sqrt
 1292 07bc 0030A0E1 		mov	r3, r0
 1293 07c0 0140A0E1 		mov	r4, r1
 1294 07c4 0300A0E1 		mov	r0, r3
 1295 07c8 0410A0E1 		mov	r1, r4
 1296 07cc FEFFFFEB 		bl	__truncdfsf2
 1297 07d0 0030A0E1 		mov	r3, r0
 1298 07d4 64300BE5 		str	r3, [fp, #-100]	@ float
 355:lab.c         ****     if (dqnorm > bdescent) {
 1300              	.LM86:
 1301 07d8 64001BE5 		ldr	r0, [fp, #-100]	@ float
 1302 07dc 88101BE5 		ldr	r1, [fp, #-136]	@ float
 1303 07e0 FEFFFFEB 		bl	__gtsf2
 1304 07e4 0030A0E1 		mov	r3, r0
 1305 07e8 000053E3 		cmp	r3, #0
 1306 07ec 000000CA 		bgt	.L39
 1307 07f0 130000EA 		b	.L37
 1308              	.L39:
 356:lab.c         ****         dq[0] = bdescent * dq[0]/dqnorm;
 1310              	.LM87:
 1311 07f4 94301BE5 		ldr	r3, [fp, #-148]	@ float
 1312 07f8 0300A0E1 		mov	r0, r3
 1313 07fc 88101BE5 		ldr	r1, [fp, #-136]	@ float
 1314 0800 FEFFFFEB 		bl	__mulsf3
 1315 0804 0030A0E1 		mov	r3, r0
 1316 0808 0300A0E1 		mov	r0, r3
 1317 080c 64101BE5 		ldr	r1, [fp, #-100]	@ float
 1318 0810 FEFFFFEB 		bl	__divsf3
 1319 0814 0030A0E1 		mov	r3, r0
 1320 0818 94300BE5 		str	r3, [fp, #-148]	@ float
 357:lab.c         ****         dq[1] = bdescent * dq[1]/dqnorm;
 1322              	.LM88:
 1323 081c 90301BE5 		ldr	r3, [fp, #-144]	@ float
 1324 0820 0300A0E1 		mov	r0, r3
 1325 0824 88101BE5 		ldr	r1, [fp, #-136]	@ float
 1326 0828 FEFFFFEB 		bl	__mulsf3
 1327 082c 0030A0E1 		mov	r3, r0
 1328 0830 0300A0E1 		mov	r0, r3
 1329 0834 64101BE5 		ldr	r1, [fp, #-100]	@ float
 1330 0838 FEFFFFEB 		bl	__divsf3
 1331 083c 0030A0E1 		mov	r3, r0
 1332 0840 90300BE5 		str	r3, [fp, #-144]	@ float
 1333              	.L37:
 358:lab.c         ****     }
 359:lab.c         ****     float xnom = g_state.dX + dq[0];
 1335              	.LM89:
 1336 0844 F8359FE5 		ldr	r3, .L52+24
 1337 0848 043093E5 		ldr	r3, [r3, #4]	@ float
 1338 084c 94201BE5 		ldr	r2, [fp, #-148]	@ float
 1339 0850 0300A0E1 		mov	r0, r3
 1340 0854 0210A0E1 		mov	r1, r2
 1341 0858 FEFFFFEB 		bl	__addsf3
 1342 085c 0030A0E1 		mov	r3, r0
 1343 0860 60300BE5 		str	r3, [fp, #-96]	@ float
 360:lab.c         ****     float ynom = g_state.dY + dq[1];
 1345              	.LM90:
 1346 0864 D8359FE5 		ldr	r3, .L52+24
 1347 0868 083093E5 		ldr	r3, [r3, #8]	@ float
 1348 086c 90201BE5 		ldr	r2, [fp, #-144]	@ float
 1349 0870 0300A0E1 		mov	r0, r3
 1350 0874 0210A0E1 		mov	r1, r2
 1351 0878 FEFFFFEB 		bl	__addsf3
 1352 087c 0030A0E1 		mov	r3, r0
 1353 0880 5C300BE5 		str	r3, [fp, #-92]	@ float
 361:lab.c         **** 
 362:lab.c         ****     
 363:lab.c         ****     ////////////////// X Y  CONTROL ///////////////////////
 364:lab.c         ****     float Kp1 = 3.8; //0.5; 2.0 was not a good gain choice
 1355              	.LM91:
 1356 0884 BC359FE5 		ldr	r3, .L52+28	@ float
 1357 0888 58300BE5 		str	r3, [fp, #-88]	@ float
 365:lab.c         ****     float Kd1 = 2.8;
 1359              	.LM92:
 1360 088c B8359FE5 		ldr	r3, .L52+32	@ float
 1361 0890 54300BE5 		str	r3, [fp, #-84]	@ float
 366:lab.c         ****     float Kp2 = 3.8; // 0.5; 2.0 was not a good gain choice
 1363              	.LM93:
 1364 0894 AC359FE5 		ldr	r3, .L52+28	@ float
 1365 0898 50300BE5 		str	r3, [fp, #-80]	@ float
 367:lab.c         ****     float Kd2 = 2.8;
 1367              	.LM94:
 1368 089c A8359FE5 		ldr	r3, .L52+32	@ float
 1369 08a0 4C300BE5 		str	r3, [fp, #-76]	@ float
 368:lab.c         **** 
 369:lab.c         ****     float ax  = -Kp1*(g_state.dX - xnom) - Kd1*g_state.dVx;
 1371              	.LM95:
 1372 08a4 58301BE5 		ldr	r3, [fp, #-88]
 1373 08a8 024123E2 		eor	r4, r3, #-2147483648
 1374 08ac 90359FE5 		ldr	r3, .L52+24
 1375 08b0 043093E5 		ldr	r3, [r3, #4]	@ float
 1376 08b4 0300A0E1 		mov	r0, r3
 1377 08b8 60101BE5 		ldr	r1, [fp, #-96]	@ float
 1378 08bc FEFFFFEB 		bl	__subsf3
 1379 08c0 0030A0E1 		mov	r3, r0
 1380 08c4 0400A0E1 		mov	r0, r4
 1381 08c8 0310A0E1 		mov	r1, r3
 1382 08cc FEFFFFEB 		bl	__mulsf3
 1383 08d0 0030A0E1 		mov	r3, r0
 1384 08d4 0340A0E1 		mov	r4, r3
 1385 08d8 64359FE5 		ldr	r3, .L52+24
 1386 08dc 103093E5 		ldr	r3, [r3, #16]	@ float
 1387 08e0 0300A0E1 		mov	r0, r3
 1388 08e4 54101BE5 		ldr	r1, [fp, #-84]	@ float
 1389 08e8 FEFFFFEB 		bl	__mulsf3
 1390 08ec 0030A0E1 		mov	r3, r0
 1391 08f0 0400A0E1 		mov	r0, r4
 1392 08f4 0310A0E1 		mov	r1, r3
 1393 08f8 FEFFFFEB 		bl	__subsf3
 1394 08fc 0030A0E1 		mov	r3, r0
 1395 0900 48300BE5 		str	r3, [fp, #-72]	@ float
 370:lab.c         ****     float ay = -Kp2*(g_state.dY - ynom) - Kd2*g_state.dVy;
 1397              	.LM96:
 1398 0904 50301BE5 		ldr	r3, [fp, #-80]
 1399 0908 024123E2 		eor	r4, r3, #-2147483648
 1400 090c 30359FE5 		ldr	r3, .L52+24
 1401 0910 083093E5 		ldr	r3, [r3, #8]	@ float
 1402 0914 0300A0E1 		mov	r0, r3
 1403 0918 5C101BE5 		ldr	r1, [fp, #-92]	@ float
 1404 091c FEFFFFEB 		bl	__subsf3
 1405 0920 0030A0E1 		mov	r3, r0
 1406 0924 0400A0E1 		mov	r0, r4
 1407 0928 0310A0E1 		mov	r1, r3
 1408 092c FEFFFFEB 		bl	__mulsf3
 1409 0930 0030A0E1 		mov	r3, r0
 1410 0934 0340A0E1 		mov	r4, r3
 1411 0938 04359FE5 		ldr	r3, .L52+24
 1412 093c 143093E5 		ldr	r3, [r3, #20]	@ float
 1413 0940 0300A0E1 		mov	r0, r3
 1414 0944 4C101BE5 		ldr	r1, [fp, #-76]	@ float
 1415 0948 FEFFFFEB 		bl	__mulsf3
 1416 094c 0030A0E1 		mov	r3, r0
 1417 0950 0400A0E1 		mov	r0, r4
 1418 0954 0310A0E1 		mov	r1, r3
 1419 0958 FEFFFFEB 		bl	__subsf3
 1420 095c 0030A0E1 		mov	r3, r0
 1421 0960 44300BE5 		str	r3, [fp, #-68]	@ float
 371:lab.c         **** 
 372:lab.c         ****     *yaw_desired = 0.0;
 1423              	.LM97:
 1424 0964 08209BE5 		ldr	r2, [fp, #8]
 1425 0968 00359FE5 		ldr	r3, .L52+68	@ float
 1426 096c 003082E5 		str	r3, [r2, #0]	@ float
 373:lab.c         ****     *roll_desired = -(1.0/9.81)*(-ay * cos(*yaw_desired) + ax * sin(*yaw_desired));
 1428              	.LM98:
 1429 0970 44301BE5 		ldr	r3, [fp, #-68]
 1430 0974 023123E2 		eor	r3, r3, #-2147483648
 1431 0978 0300A0E1 		mov	r0, r3
 1432 097c FEFFFFEB 		bl	__extendsfdf2
 1433 0980 0050A0E1 		mov	r5, r0
 1434 0984 0160A0E1 		mov	r6, r1
 1435 0988 08309BE5 		ldr	r3, [fp, #8]
 1436 098c 003093E5 		ldr	r3, [r3, #0]	@ float
 1437 0990 0300A0E1 		mov	r0, r3
 1438 0994 FEFFFFEB 		bl	__extendsfdf2
 1439 0998 0030A0E1 		mov	r3, r0
 1440 099c 0140A0E1 		mov	r4, r1
 1441 09a0 0300A0E1 		mov	r0, r3
 1442 09a4 0410A0E1 		mov	r1, r4
 1443 09a8 FEFFFFEB 		bl	cos
 1444 09ac 0030A0E1 		mov	r3, r0
 1445 09b0 0140A0E1 		mov	r4, r1
 1446 09b4 0500A0E1 		mov	r0, r5
 1447 09b8 0610A0E1 		mov	r1, r6
 1448 09bc 0320A0E1 		mov	r2, r3
 1449 09c0 0430A0E1 		mov	r3, r4
 1450 09c4 FEFFFFEB 		bl	__muldf3
 1451 09c8 0030A0E1 		mov	r3, r0
 1452 09cc 0140A0E1 		mov	r4, r1
 1453 09d0 0370A0E1 		mov	r7, r3
 1454 09d4 0480A0E1 		mov	r8, r4
 1455 09d8 48001BE5 		ldr	r0, [fp, #-72]	@ float
 1456 09dc FEFFFFEB 		bl	__extendsfdf2
 1457 09e0 0050A0E1 		mov	r5, r0
 1458 09e4 0160A0E1 		mov	r6, r1
 1459 09e8 08309BE5 		ldr	r3, [fp, #8]
 1460 09ec 003093E5 		ldr	r3, [r3, #0]	@ float
 1461 09f0 0300A0E1 		mov	r0, r3
 1462 09f4 FEFFFFEB 		bl	__extendsfdf2
 1463 09f8 0030A0E1 		mov	r3, r0
 1464 09fc 0140A0E1 		mov	r4, r1
 1465 0a00 0300A0E1 		mov	r0, r3
 1466 0a04 0410A0E1 		mov	r1, r4
 1467 0a08 FEFFFFEB 		bl	sin
 1468 0a0c 0030A0E1 		mov	r3, r0
 1469 0a10 0140A0E1 		mov	r4, r1
 1470 0a14 0500A0E1 		mov	r0, r5
 1471 0a18 0610A0E1 		mov	r1, r6
 1472 0a1c 0320A0E1 		mov	r2, r3
 1473 0a20 0430A0E1 		mov	r3, r4
 1474 0a24 FEFFFFEB 		bl	__muldf3
 1475 0a28 0030A0E1 		mov	r3, r0
 1476 0a2c 0140A0E1 		mov	r4, r1
 1477 0a30 0700A0E1 		mov	r0, r7
 1478 0a34 0810A0E1 		mov	r1, r8
 1479 0a38 0320A0E1 		mov	r2, r3
 1480 0a3c 0430A0E1 		mov	r3, r4
 1481 0a40 FEFFFFEB 		bl	__adddf3
 1482 0a44 0030A0E1 		mov	r3, r0
 1483 0a48 0140A0E1 		mov	r4, r1
 1484 0a4c 0300A0E1 		mov	r0, r3
 1485 0a50 0410A0E1 		mov	r1, r4
 1486 0a54 3D2E8FE2 		adr	r2, .L52
 1487 0a58 0C0092E8 		ldmia	r2, {r2-r3}
 1488 0a5c FEFFFFEB 		bl	__muldf3
 1489 0a60 0030A0E1 		mov	r3, r0
 1490 0a64 0140A0E1 		mov	r4, r1
 1491 0a68 0300A0E1 		mov	r0, r3
 1492 0a6c 0410A0E1 		mov	r1, r4
 1493 0a70 FEFFFFEB 		bl	__truncdfsf2
 1494 0a74 0020A0E1 		mov	r2, r0
 1495 0a78 A4301BE5 		ldr	r3, [fp, #-164]
 1496 0a7c 002083E5 		str	r2, [r3, #0]	@ float
 374:lab.c         ****     *pitch_desired = -(1.0/9.81) * (ay * sin(*yaw_desired) + ax * cos(*yaw_desired));
 1498              	.LM99:
 1499 0a80 44001BE5 		ldr	r0, [fp, #-68]	@ float
 1500 0a84 FEFFFFEB 		bl	__extendsfdf2
 1501 0a88 0050A0E1 		mov	r5, r0
 1502 0a8c 0160A0E1 		mov	r6, r1
 1503 0a90 08309BE5 		ldr	r3, [fp, #8]
 1504 0a94 003093E5 		ldr	r3, [r3, #0]	@ float
 1505 0a98 0300A0E1 		mov	r0, r3
 1506 0a9c FEFFFFEB 		bl	__extendsfdf2
 1507 0aa0 0030A0E1 		mov	r3, r0
 1508 0aa4 0140A0E1 		mov	r4, r1
 1509 0aa8 0300A0E1 		mov	r0, r3
 1510 0aac 0410A0E1 		mov	r1, r4
 1511 0ab0 FEFFFFEB 		bl	sin
 1512 0ab4 0030A0E1 		mov	r3, r0
 1513 0ab8 0140A0E1 		mov	r4, r1
 1514 0abc 0500A0E1 		mov	r0, r5
 1515 0ac0 0610A0E1 		mov	r1, r6
 1516 0ac4 0320A0E1 		mov	r2, r3
 1517 0ac8 0430A0E1 		mov	r3, r4
 1518 0acc FEFFFFEB 		bl	__muldf3
 1519 0ad0 0030A0E1 		mov	r3, r0
 1520 0ad4 0140A0E1 		mov	r4, r1
 1521 0ad8 0370A0E1 		mov	r7, r3
 1522 0adc 0480A0E1 		mov	r8, r4
 1523 0ae0 48001BE5 		ldr	r0, [fp, #-72]	@ float
 1524 0ae4 FEFFFFEB 		bl	__extendsfdf2
 1525 0ae8 0050A0E1 		mov	r5, r0
 1526 0aec 0160A0E1 		mov	r6, r1
 1527 0af0 08309BE5 		ldr	r3, [fp, #8]
 1528 0af4 003093E5 		ldr	r3, [r3, #0]	@ float
 1529 0af8 0300A0E1 		mov	r0, r3
 1530 0afc FEFFFFEB 		bl	__extendsfdf2
 1531 0b00 0030A0E1 		mov	r3, r0
 1532 0b04 0140A0E1 		mov	r4, r1
 1533 0b08 0300A0E1 		mov	r0, r3
 1534 0b0c 0410A0E1 		mov	r1, r4
 1535 0b10 FEFFFFEB 		bl	cos
 1536 0b14 0030A0E1 		mov	r3, r0
 1537 0b18 0140A0E1 		mov	r4, r1
 1538 0b1c 0500A0E1 		mov	r0, r5
 1539 0b20 0610A0E1 		mov	r1, r6
 1540 0b24 0320A0E1 		mov	r2, r3
 1541 0b28 0430A0E1 		mov	r3, r4
 1542 0b2c FEFFFFEB 		bl	__muldf3
 1543 0b30 0030A0E1 		mov	r3, r0
 1544 0b34 0140A0E1 		mov	r4, r1
 1545 0b38 0700A0E1 		mov	r0, r7
 1546 0b3c 0810A0E1 		mov	r1, r8
 1547 0b40 0320A0E1 		mov	r2, r3
 1548 0b44 0430A0E1 		mov	r3, r4
 1549 0b48 FEFFFFEB 		bl	__adddf3
 1550 0b4c 0030A0E1 		mov	r3, r0
 1551 0b50 0140A0E1 		mov	r4, r1
 1552 0b54 0300A0E1 		mov	r0, r3
 1553 0b58 0410A0E1 		mov	r1, r4
 1554 0b5c B22F8FE2 		adr	r2, .L52
 1555 0b60 0C0092E8 		ldmia	r2, {r2-r3}
 1556 0b64 FEFFFFEB 		bl	__muldf3
 1557 0b68 0030A0E1 		mov	r3, r0
 1558 0b6c 0140A0E1 		mov	r4, r1
 1559 0b70 0300A0E1 		mov	r0, r3
 1560 0b74 0410A0E1 		mov	r1, r4
 1561 0b78 FEFFFFEB 		bl	__truncdfsf2
 1562 0b7c 0020A0E1 		mov	r2, r0
 1563 0b80 04309BE5 		ldr	r3, [fp, #4]
 1564 0b84 002083E5 		str	r2, [r3, #0]	@ float
 375:lab.c         ****     /////////////////// END X,Y CONTROL ///////////////////
 376:lab.c         **** 
 377:lab.c         **** 
 378:lab.c         ****     ////////////////// Z  CONTROL ///////////////////////
 379:lab.c         ****     float Kpz = 5.3;
 1566              	.LM100:
 1567 0b88 C0329FE5 		ldr	r3, .L52+36	@ float
 1568 0b8c 40300BE5 		str	r3, [fp, #-64]	@ float
 380:lab.c         ****     float Kdz = 2.7;
 1570              	.LM101:
 1571 0b90 BC329FE5 		ldr	r3, .L52+40	@ float
 1572 0b94 3C300BE5 		str	r3, [fp, #-60]	@ float
 381:lab.c         ****     float Kiz = 0.08;
 1574              	.LM102:
 1575 0b98 B8329FE5 		ldr	r3, .L52+44	@ float
 1576 0b9c 38300BE5 		str	r3, [fp, #-56]	@ float
 382:lab.c         ****     float m = 0.69; // kg
 1578              	.LM103:
 1579 0ba0 B4329FE5 		ldr	r3, .L52+48	@ float
 1580 0ba4 34300BE5 		str	r3, [fp, #-52]	@ float
 383:lab.c         ****     float g = 9.81; // gravity
 1582              	.LM104:
 1583 0ba8 B0329FE5 		ldr	r3, .L52+52	@ float
 1584 0bac 30300BE5 		str	r3, [fp, #-48]	@ float
 384:lab.c         ****     float z_error_sum;
 385:lab.c         ****     // Compute "integral error"
 386:lab.c         ****     if ((z_error_sum < .5) && (z_error_sum > -.5)) {
 1586              	.LM105:
 1587 0bb0 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 1588 0bb4 A8129FE5 		ldr	r1, .L52+56	@ float
 1589 0bb8 FEFFFFEB 		bl	__ltsf2
 1590 0bbc 0030A0E1 		mov	r3, r0
 1591 0bc0 000053E3 		cmp	r3, #0
 1592 0bc4 000000BA 		blt	.L42
 1593 0bc8 110000EA 		b	.L40
 1594              	.L42:
 1595 0bcc 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 1596 0bd0 90129FE5 		ldr	r1, .L52+60	@ float
 1597 0bd4 FEFFFFEB 		bl	__gtsf2
 1598 0bd8 0030A0E1 		mov	r3, r0
 1599 0bdc 000053E3 		cmp	r3, #0
 1600 0be0 000000CA 		bgt	.L44
 1601 0be4 0A0000EA 		b	.L40
 1602              	.L44:
 387:lab.c         ****         z_error_sum += g_state.dZ - z_desired;
 1604              	.LM106:
 1605 0be8 54329FE5 		ldr	r3, .L52+24
 1606 0bec 0C3093E5 		ldr	r3, [r3, #12]	@ float
 1607 0bf0 0300A0E1 		mov	r0, r3
 1608 0bf4 A0101BE5 		ldr	r1, [fp, #-160]	@ float
 1609 0bf8 FEFFFFEB 		bl	__subsf3
 1610 0bfc 0030A0E1 		mov	r3, r0
 1611 0c00 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 1612 0c04 0310A0E1 		mov	r1, r3
 1613 0c08 FEFFFFEB 		bl	__addsf3
 1614 0c0c 0030A0E1 		mov	r3, r0
 1615 0c10 2C300BE5 		str	r3, [fp, #-44]	@ float
 1616              	.L40:
 388:lab.c         ****     }
 389:lab.c         ****     g_u[3] = m*g - Kpz * (g_state.dZ * cos(g_sensor.dPhi) * cos(g_sensor.dTheta) - z_desired) - Kdz
 1618              	.LM107:
 1619 0c14 34001BE5 		ldr	r0, [fp, #-52]	@ float
 1620 0c18 30101BE5 		ldr	r1, [fp, #-48]	@ float
 1621 0c1c FEFFFFEB 		bl	__mulsf3
 1622 0c20 0030A0E1 		mov	r3, r0
 1623 0c24 0300A0E1 		mov	r0, r3
 1624 0c28 FEFFFFEB 		bl	__extendsfdf2
 1625 0c2c 0070A0E1 		mov	r7, r0
 1626 0c30 0180A0E1 		mov	r8, r1
 1627 0c34 40001BE5 		ldr	r0, [fp, #-64]	@ float
 1628 0c38 FEFFFFEB 		bl	__extendsfdf2
 1629 0c3c 0090A0E1 		mov	r9, r0
 1630 0c40 01A0A0E1 		mov	sl, r1
 1631 0c44 F8319FE5 		ldr	r3, .L52+24
 1632 0c48 0C3093E5 		ldr	r3, [r3, #12]	@ float
 1633 0c4c 0300A0E1 		mov	r0, r3
 1634 0c50 FEFFFFEB 		bl	__extendsfdf2
 1635 0c54 0050A0E1 		mov	r5, r0
 1636 0c58 0160A0E1 		mov	r6, r1
 1637 0c5c 08329FE5 		ldr	r3, .L52+64
 1638 0c60 043093E5 		ldr	r3, [r3, #4]	@ float
 1639 0c64 0300A0E1 		mov	r0, r3
 1640 0c68 FEFFFFEB 		bl	__extendsfdf2
 1641 0c6c 0030A0E1 		mov	r3, r0
 1642 0c70 0140A0E1 		mov	r4, r1
 1643 0c74 0300A0E1 		mov	r0, r3
 1644 0c78 0410A0E1 		mov	r1, r4
 1645 0c7c FEFFFFEB 		bl	cos
 1646 0c80 0030A0E1 		mov	r3, r0
 1647 0c84 0140A0E1 		mov	r4, r1
 1648 0c88 0500A0E1 		mov	r0, r5
 1649 0c8c 0610A0E1 		mov	r1, r6
 1650 0c90 0320A0E1 		mov	r2, r3
 1651 0c94 0430A0E1 		mov	r3, r4
 1652 0c98 FEFFFFEB 		bl	__muldf3
 1653 0c9c 0030A0E1 		mov	r3, r0
 1654 0ca0 0140A0E1 		mov	r4, r1
 1655 0ca4 0350A0E1 		mov	r5, r3
 1656 0ca8 0460A0E1 		mov	r6, r4
 1657 0cac B8319FE5 		ldr	r3, .L52+64
 1658 0cb0 083093E5 		ldr	r3, [r3, #8]	@ float
 1659 0cb4 0300A0E1 		mov	r0, r3
 1660 0cb8 FEFFFFEB 		bl	__extendsfdf2
 1661 0cbc 0030A0E1 		mov	r3, r0
 1662 0cc0 0140A0E1 		mov	r4, r1
 1663 0cc4 0300A0E1 		mov	r0, r3
 1664 0cc8 0410A0E1 		mov	r1, r4
 1665 0ccc FEFFFFEB 		bl	cos
 1666 0cd0 0030A0E1 		mov	r3, r0
 1667 0cd4 0140A0E1 		mov	r4, r1
 1668 0cd8 0500A0E1 		mov	r0, r5
 1669 0cdc 0610A0E1 		mov	r1, r6
 1670 0ce0 0320A0E1 		mov	r2, r3
 1671 0ce4 0430A0E1 		mov	r3, r4
 1672 0ce8 FEFFFFEB 		bl	__muldf3
 1673 0cec 0030A0E1 		mov	r3, r0
 1674 0cf0 0140A0E1 		mov	r4, r1
 1675 0cf4 0350A0E1 		mov	r5, r3
 1676 0cf8 0460A0E1 		mov	r6, r4
 1677 0cfc A0001BE5 		ldr	r0, [fp, #-160]	@ float
 1678 0d00 FEFFFFEB 		bl	__extendsfdf2
 1679 0d04 0030A0E1 		mov	r3, r0
 1680 0d08 0140A0E1 		mov	r4, r1
 1681 0d0c 0500A0E1 		mov	r0, r5
 1682 0d10 0610A0E1 		mov	r1, r6
 1683 0d14 0320A0E1 		mov	r2, r3
 1684 0d18 0430A0E1 		mov	r3, r4
 1685 0d1c FEFFFFEB 		bl	__subdf3
 1686 0d20 0030A0E1 		mov	r3, r0
 1687 0d24 0140A0E1 		mov	r4, r1
 1688 0d28 0900A0E1 		mov	r0, r9
 1689 0d2c 0A10A0E1 		mov	r1, sl
 1690 0d30 0320A0E1 		mov	r2, r3
 1691 0d34 0430A0E1 		mov	r3, r4
 1692 0d38 FEFFFFEB 		bl	__muldf3
 1693 0d3c 0030A0E1 		mov	r3, r0
 1694 0d40 0140A0E1 		mov	r4, r1
 1695 0d44 0700A0E1 		mov	r0, r7
 1696 0d48 0810A0E1 		mov	r1, r8
 1697 0d4c 0320A0E1 		mov	r2, r3
 1698 0d50 0430A0E1 		mov	r3, r4
 1699 0d54 FEFFFFEB 		bl	__subdf3
 1700 0d58 0030A0E1 		mov	r3, r0
 1701 0d5c 0140A0E1 		mov	r4, r1
 1702 0d60 0350A0E1 		mov	r5, r3
 1703 0d64 0460A0E1 		mov	r6, r4
 1704 0d68 D4309FE5 		ldr	r3, .L52+24
 1705 0d6c 183093E5 		ldr	r3, [r3, #24]	@ float
 1706 0d70 0300A0E1 		mov	r0, r3
 1707 0d74 3C101BE5 		ldr	r1, [fp, #-60]	@ float
 1708 0d78 FEFFFFEB 		bl	__mulsf3
 1709 0d7c 0030A0E1 		mov	r3, r0
 1710 0d80 0300A0E1 		mov	r0, r3
 1711 0d84 FEFFFFEB 		bl	__extendsfdf2
 1712 0d88 0030A0E1 		mov	r3, r0
 1713 0d8c 0140A0E1 		mov	r4, r1
 1714 0d90 0500A0E1 		mov	r0, r5
 1715 0d94 0610A0E1 		mov	r1, r6
 1716 0d98 0320A0E1 		mov	r2, r3
 1717 0d9c 0430A0E1 		mov	r3, r4
 1718 0da0 FEFFFFEB 		bl	__subdf3
 1719 0da4 0030A0E1 		mov	r3, r0
 1720 0da8 0140A0E1 		mov	r4, r1
 1721 0dac 0350A0E1 		mov	r5, r3
 1722 0db0 0460A0E1 		mov	r6, r4
 1723 0db4 38001BE5 		ldr	r0, [fp, #-56]	@ float
 1724 0db8 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 1725 0dbc FEFFFFEB 		bl	__mulsf3
 1726 0dc0 0030A0E1 		mov	r3, r0
 1727 0dc4 0300A0E1 		mov	r0, r3
 1728 0dc8 FEFFFFEB 		bl	__extendsfdf2
 1729 0dcc 0030A0E1 		mov	r3, r0
 1730 0dd0 0140A0E1 		mov	r4, r1
 1731 0dd4 0500A0E1 		mov	r0, r5
 1732 0dd8 0610A0E1 		mov	r1, r6
 1733 0ddc 0320A0E1 		mov	r2, r3
 1734 0de0 0430A0E1 		mov	r3, r4
 1735 0de4 FEFFFFEB 		bl	__subdf3
 1736 0de8 0030A0E1 		mov	r3, r0
 1737 0dec 0140A0E1 		mov	r4, r1
 1738 0df0 0300A0E1 		mov	r0, r3
 1739 0df4 0410A0E1 		mov	r1, r4
 1740 0df8 FEFFFFEB 		bl	__truncdfsf2
 1741 0dfc 0020A0E1 		mov	r2, r0
 1742 0e00 6C309FE5 		ldr	r3, .L52+72
 1743 0e04 0C2083E5 		str	r2, [r3, #12]	@ float
 390:lab.c         ****     if (g_u[3] < 0) {
 1745              	.LM108:
 1746 0e08 64309FE5 		ldr	r3, .L52+72
 1747 0e0c 0C3093E5 		ldr	r3, [r3, #12]	@ float
 1748 0e10 0300A0E1 		mov	r0, r3
 1749 0e14 54109FE5 		ldr	r1, .L52+68	@ float
 1750 0e18 FEFFFFEB 		bl	__ltsf2
 1751 0e1c 0030A0E1 		mov	r3, r0
 1752 0e20 000053E3 		cmp	r3, #0
 1753 0e24 140000BA 		blt	.L47
 1754 0e28 160000EA 		b	.L45
 1755              	.L53:
 1756              		.align	2
 1757              	.L52:
 1758 0e2c 8718BABF 		.word	-1078323065
 1759 0e30 88A1C1B2 		.word	-1295933048
 1760 0e34 00004842 		.word	1112014848
 1761 0e38 9A99993E 		.word	1050253722
 1762 0e3c 0000803F 		.word	1065353216
 1763 0e40 0AD7A33C 		.word	1017370378
 1764 0e44 00000000 		.word	g_state
 1765 0e48 33337340 		.word	1081291571
 1766 0e4c 33333340 		.word	1077097267
 1767 0e50 9A99A940 		.word	1084856730
 1768 0e54 CDCC2C40 		.word	1076677837
 1769 0e58 0AD7A33D 		.word	1034147594
 1770 0e5c D7A3303F 		.word	1060152279
 1771 0e60 C3F51C41 		.word	1092416963
 1772 0e64 0000003F 		.word	1056964608
 1773 0e68 000000BF 		.word	-1090519040
 1774 0e6c 00000000 		.word	g_sensor
 1775 0e70 00000000 		.word	0
 1776 0e74 00000000 		.word	g_u
 1777 0e78 00002041 		.word	1092616192
 1778              	.L47:
 391:lab.c         ****         g_u[3] = 0;
 1780              	.LM109:
 1781 0e7c 10201FE5 		ldr	r2, .L52+72
 1782 0e80 18301FE5 		ldr	r3, .L52+68	@ float
 1783 0e84 0C3082E5 		str	r3, [r2, #12]	@ float
 1784              	.L45:
 392:lab.c         ****     }
 393:lab.c         ****     if (g_u[3] > 10) {
 1786              	.LM110:
 1787 0e88 1C301FE5 		ldr	r3, .L52+72
 1788 0e8c 0C3093E5 		ldr	r3, [r3, #12]	@ float
 1789 0e90 0300A0E1 		mov	r0, r3
 1790 0e94 24101FE5 		ldr	r1, .L52+76	@ float
 1791 0e98 FEFFFFEB 		bl	__gtsf2
 1792 0e9c 0030A0E1 		mov	r3, r0
 1793 0ea0 000053E3 		cmp	r3, #0
 1794 0ea4 000000CA 		bgt	.L50
 1795 0ea8 020000EA 		b	.L51
 1796              	.L50:
 394:lab.c         ****         g_u[3] = 10;
 1798              	.LM111:
 1799 0eac 40201FE5 		ldr	r2, .L52+72
 1800 0eb0 40301FE5 		ldr	r3, .L52+76	@ float
 1801 0eb4 0C3082E5 		str	r3, [r2, #12]	@ float
 1802              	.L51:
 395:lab.c         ****     }
 396:lab.c         ****     ////////////////////// END Z CONTROL /////////////////
 397:lab.c         **** }
 1804              	.LM112:
 1805 0eb8 28D04BE2 		sub	sp, fp, #40
 1806 0ebc F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 1807 0ec0 1EFF2FE1 		bx	lr
 1837              	.Lscope7:
 1838              		.align	2
 1843              		.global	InnerLoop
 1845              	InnerLoop:
 398:lab.c         **** 
 399:lab.c         **** 
 400:lab.c         **** void InnerLoop(float roll_desired, float pitch_desired, float yaw_desired) { //{{{1
 1847              	.LM113:
 1848              		@ Function supports interworking.
 1849              		@ args = 0, pretend = 0, frame = 36
 1850              		@ frame_needed = 1, uses_anonymous_args = 0
 1851 0ec4 0DC0A0E1 		mov	ip, sp
 1852 0ec8 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 1853 0ecc 04B04CE2 		sub	fp, ip, #4
 1854 0ed0 24D04DE2 		sub	sp, sp, #36
 1855 0ed4 2C000BE5 		str	r0, [fp, #-44]	@ float
 1856 0ed8 30100BE5 		str	r1, [fp, #-48]	@ float
 1857 0edc 34200BE5 		str	r2, [fp, #-52]	@ float
 401:lab.c         ****     // Attitude inner loops:
 402:lab.c         ****     float K00 = 0.88;
 1859              	.LM114:
 1860 0ee0 AC319FE5 		ldr	r3, .L56	@ float
 1861 0ee4 28300BE5 		str	r3, [fp, #-40]	@ float
 403:lab.c         ****     float K01 = 0.13;
 1863              	.LM115:
 1864 0ee8 A8319FE5 		ldr	r3, .L56+4	@ float
 1865 0eec 24300BE5 		str	r3, [fp, #-36]	@ float
 404:lab.c         ****     float K10 = 0.88;
 1867              	.LM116:
 1868 0ef0 9C319FE5 		ldr	r3, .L56	@ float
 1869 0ef4 20300BE5 		str	r3, [fp, #-32]	@ float
 405:lab.c         ****     float K11 = 0.13;
 1871              	.LM117:
 1872 0ef8 98319FE5 		ldr	r3, .L56+4	@ float
 1873 0efc 1C300BE5 		str	r3, [fp, #-28]	@ float
 406:lab.c         ****     float K20 = 0.31;
 1875              	.LM118:
 1876 0f00 94319FE5 		ldr	r3, .L56+8	@ float
 1877 0f04 18300BE5 		str	r3, [fp, #-24]	@ float
 407:lab.c         ****     float K21 = 0.12;
 1879              	.LM119:
 1880 0f08 90319FE5 		ldr	r3, .L56+12	@ float
 1881 0f0c 14300BE5 		str	r3, [fp, #-20]	@ float
 408:lab.c         ****     // Attitude control
 409:lab.c         ****     g_u[0] = -K00 * (g_sensor.dPhi - roll_desired) - K01 * (g_sensor.dP);
 1883              	.LM120:
 1884 0f10 28301BE5 		ldr	r3, [fp, #-40]
 1885 0f14 024123E2 		eor	r4, r3, #-2147483648
 1886 0f18 84319FE5 		ldr	r3, .L56+16
 1887 0f1c 043093E5 		ldr	r3, [r3, #4]	@ float
 1888 0f20 0300A0E1 		mov	r0, r3
 1889 0f24 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 1890 0f28 FEFFFFEB 		bl	__subsf3
 1891 0f2c 0030A0E1 		mov	r3, r0
 1892 0f30 0400A0E1 		mov	r0, r4
 1893 0f34 0310A0E1 		mov	r1, r3
 1894 0f38 FEFFFFEB 		bl	__mulsf3
 1895 0f3c 0030A0E1 		mov	r3, r0
 1896 0f40 0340A0E1 		mov	r4, r3
 1897 0f44 58319FE5 		ldr	r3, .L56+16
 1898 0f48 1C3093E5 		ldr	r3, [r3, #28]	@ float
 1899 0f4c 0300A0E1 		mov	r0, r3
 1900 0f50 24101BE5 		ldr	r1, [fp, #-36]	@ float
 1901 0f54 FEFFFFEB 		bl	__mulsf3
 1902 0f58 0030A0E1 		mov	r3, r0
 1903 0f5c 0400A0E1 		mov	r0, r4
 1904 0f60 0310A0E1 		mov	r1, r3
 1905 0f64 FEFFFFEB 		bl	__subsf3
 1906 0f68 0030A0E1 		mov	r3, r0
 1907 0f6c 0320A0E1 		mov	r2, r3
 1908 0f70 30319FE5 		ldr	r3, .L56+20
 1909 0f74 002083E5 		str	r2, [r3, #0]	@ float
 410:lab.c         ****     g_u[1] = -K10 * (g_sensor.dTheta - pitch_desired) - K11 * (g_sensor.dQ);
 1911              	.LM121:
 1912 0f78 20301BE5 		ldr	r3, [fp, #-32]
 1913 0f7c 024123E2 		eor	r4, r3, #-2147483648
 1914 0f80 1C319FE5 		ldr	r3, .L56+16
 1915 0f84 083093E5 		ldr	r3, [r3, #8]	@ float
 1916 0f88 0300A0E1 		mov	r0, r3
 1917 0f8c 30101BE5 		ldr	r1, [fp, #-48]	@ float
 1918 0f90 FEFFFFEB 		bl	__subsf3
 1919 0f94 0030A0E1 		mov	r3, r0
 1920 0f98 0400A0E1 		mov	r0, r4
 1921 0f9c 0310A0E1 		mov	r1, r3
 1922 0fa0 FEFFFFEB 		bl	__mulsf3
 1923 0fa4 0030A0E1 		mov	r3, r0
 1924 0fa8 0340A0E1 		mov	r4, r3
 1925 0fac F0309FE5 		ldr	r3, .L56+16
 1926 0fb0 203093E5 		ldr	r3, [r3, #32]	@ float
 1927 0fb4 0300A0E1 		mov	r0, r3
 1928 0fb8 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 1929 0fbc FEFFFFEB 		bl	__mulsf3
 1930 0fc0 0030A0E1 		mov	r3, r0
 1931 0fc4 0400A0E1 		mov	r0, r4
 1932 0fc8 0310A0E1 		mov	r1, r3
 1933 0fcc FEFFFFEB 		bl	__subsf3
 1934 0fd0 0030A0E1 		mov	r3, r0
 1935 0fd4 0320A0E1 		mov	r2, r3
 1936 0fd8 C8309FE5 		ldr	r3, .L56+20
 1937 0fdc 042083E5 		str	r2, [r3, #4]	@ float
 411:lab.c         ****     g_u[2] = -K20 * (g_sensor.dPsi - yaw_desired) - K21 * (g_sensor.dR);
 1939              	.LM122:
 1940 0fe0 18301BE5 		ldr	r3, [fp, #-24]
 1941 0fe4 024123E2 		eor	r4, r3, #-2147483648
 1942 0fe8 B4309FE5 		ldr	r3, .L56+16
 1943 0fec 0C3093E5 		ldr	r3, [r3, #12]	@ float
 1944 0ff0 0300A0E1 		mov	r0, r3
 1945 0ff4 34101BE5 		ldr	r1, [fp, #-52]	@ float
 1946 0ff8 FEFFFFEB 		bl	__subsf3
 1947 0ffc 0030A0E1 		mov	r3, r0
 1948 1000 0400A0E1 		mov	r0, r4
 1949 1004 0310A0E1 		mov	r1, r3
 1950 1008 FEFFFFEB 		bl	__mulsf3
 1951 100c 0030A0E1 		mov	r3, r0
 1952 1010 0340A0E1 		mov	r4, r3
 1953 1014 88309FE5 		ldr	r3, .L56+16
 1954 1018 243093E5 		ldr	r3, [r3, #36]	@ float
 1955 101c 0300A0E1 		mov	r0, r3
 1956 1020 14101BE5 		ldr	r1, [fp, #-20]	@ float
 1957 1024 FEFFFFEB 		bl	__mulsf3
 1958 1028 0030A0E1 		mov	r3, r0
 1959 102c 0400A0E1 		mov	r0, r4
 1960 1030 0310A0E1 		mov	r1, r3
 1961 1034 FEFFFFEB 		bl	__subsf3
 1962 1038 0030A0E1 		mov	r3, r0
 1963 103c 0320A0E1 		mov	r2, r3
 1964 1040 60309FE5 		ldr	r3, .L56+20
 1965 1044 082083E5 		str	r2, [r3, #8]	@ float
 412:lab.c         **** 
 413:lab.c         ****     // for logging purposes
 414:lab.c         ****     g_motorinput.dU1 = g_u[0];
 1967              	.LM123:
 1968 1048 58309FE5 		ldr	r3, .L56+20
 1969 104c 002093E5 		ldr	r2, [r3, #0]	@ float
 1970 1050 54309FE5 		ldr	r3, .L56+24
 1971 1054 042083E5 		str	r2, [r3, #4]	@ float
 415:lab.c         ****     g_motorinput.dU2 = g_u[1];
 1973              	.LM124:
 1974 1058 48309FE5 		ldr	r3, .L56+20
 1975 105c 042093E5 		ldr	r2, [r3, #4]	@ float
 1976 1060 44309FE5 		ldr	r3, .L56+24
 1977 1064 082083E5 		str	r2, [r3, #8]	@ float
 416:lab.c         ****     g_motorinput.dU3 = g_u[2];
 1979              	.LM125:
 1980 1068 38309FE5 		ldr	r3, .L56+20
 1981 106c 082093E5 		ldr	r2, [r3, #8]	@ float
 1982 1070 34309FE5 		ldr	r3, .L56+24
 1983 1074 0C2083E5 		str	r2, [r3, #12]	@ float
 417:lab.c         ****     g_motorinput.dU4 = g_u[3];
 1985              	.LM126:
 1986 1078 28309FE5 		ldr	r3, .L56+20
 1987 107c 0C2093E5 		ldr	r2, [r3, #12]	@ float
 1988 1080 24309FE5 		ldr	r3, .L56+24
 1989 1084 102083E5 		str	r2, [r3, #16]	@ float
 418:lab.c         **** }
 1991              	.LM127:
 1992 1088 10D04BE2 		sub	sp, fp, #16
 1993 108c 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 1994 1090 1EFF2FE1 		bx	lr
 1995              	.L57:
 1996              		.align	2
 1997              	.L56:
 1998 1094 AE47613F 		.word	1063339950
 1999 1098 B81E053E 		.word	1040522936
 2000 109c 52B89E3E 		.word	1050589266
 2001 10a0 8FC2F53D 		.word	1039516303
 2002 10a4 00000000 		.word	g_sensor
 2003 10a8 00000000 		.word	g_u
 2004 10ac 00000000 		.word	g_motorinput
 2014              	.Lscope8:
 2015              		.align	2
 2020              		.global	InnerLoopRate
 2022              	InnerLoopRate:
 419:lab.c         **** 
 420:lab.c         **** void InnerLoopRate(float p_desired, float q_desired, float r_desired) { //{{{1
 2024              	.LM128:
 2025              		@ Function supports interworking.
 2026              		@ args = 0, pretend = 0, frame = 36
 2027              		@ frame_needed = 1, uses_anonymous_args = 0
 2028 10b0 0DC0A0E1 		mov	ip, sp
 2029 10b4 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 2030 10b8 04B04CE2 		sub	fp, ip, #4
 2031 10bc 24D04DE2 		sub	sp, sp, #36
 2032 10c0 2C000BE5 		str	r0, [fp, #-44]	@ float
 2033 10c4 30100BE5 		str	r1, [fp, #-48]	@ float
 2034 10c8 34200BE5 		str	r2, [fp, #-52]	@ float
 421:lab.c         ****     // Attitude inner loops:
 422:lab.c         ****     float K00 = 0.88;
 2036              	.LM129:
 2037 10cc A0319FE5 		ldr	r3, .L60	@ float
 2038 10d0 28300BE5 		str	r3, [fp, #-40]	@ float
 423:lab.c         ****     float K01 = 0.13;
 2040              	.LM130:
 2041 10d4 9C319FE5 		ldr	r3, .L60+4	@ float
 2042 10d8 24300BE5 		str	r3, [fp, #-36]	@ float
 424:lab.c         ****     float K10 = 0.88;
 2044              	.LM131:
 2045 10dc 90319FE5 		ldr	r3, .L60	@ float
 2046 10e0 20300BE5 		str	r3, [fp, #-32]	@ float
 425:lab.c         ****     float K11 = 0.13;
 2048              	.LM132:
 2049 10e4 8C319FE5 		ldr	r3, .L60+4	@ float
 2050 10e8 1C300BE5 		str	r3, [fp, #-28]	@ float
 426:lab.c         ****     float K20 = 0.31;
 2052              	.LM133:
 2053 10ec 88319FE5 		ldr	r3, .L60+8	@ float
 2054 10f0 18300BE5 		str	r3, [fp, #-24]	@ float
 427:lab.c         ****     float K21 = 0.12;
 2056              	.LM134:
 2057 10f4 84319FE5 		ldr	r3, .L60+12	@ float
 2058 10f8 14300BE5 		str	r3, [fp, #-20]	@ float
 428:lab.c         ****     // Attitude control
 429:lab.c         ****     g_u[0] = -K00 * angle_diff(g_sensor.dPhi,0) - K01 * (g_sensor.dP - p_desired);
 2060              	.LM135:
 2061 10fc 28301BE5 		ldr	r3, [fp, #-40]
 2062 1100 024123E2 		eor	r4, r3, #-2147483648
 2063 1104 78319FE5 		ldr	r3, .L60+16
 2064 1108 043093E5 		ldr	r3, [r3, #4]	@ float
 2065 110c 0300A0E1 		mov	r0, r3
 2066 1110 70119FE5 		ldr	r1, .L60+20	@ float
 2067 1114 FEFFFFEB 		bl	angle_diff
 2068 1118 0030A0E1 		mov	r3, r0
 2069 111c 0400A0E1 		mov	r0, r4
 2070 1120 0310A0E1 		mov	r1, r3
 2071 1124 FEFFFFEB 		bl	__mulsf3
 2072 1128 0030A0E1 		mov	r3, r0
 2073 112c 0340A0E1 		mov	r4, r3
 2074 1130 4C319FE5 		ldr	r3, .L60+16
 2075 1134 1C3093E5 		ldr	r3, [r3, #28]	@ float
 2076 1138 0300A0E1 		mov	r0, r3
 2077 113c 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 2078 1140 FEFFFFEB 		bl	__subsf3
 2079 1144 0030A0E1 		mov	r3, r0
 2080 1148 0300A0E1 		mov	r0, r3
 2081 114c 24101BE5 		ldr	r1, [fp, #-36]	@ float
 2082 1150 FEFFFFEB 		bl	__mulsf3
 2083 1154 0030A0E1 		mov	r3, r0
 2084 1158 0400A0E1 		mov	r0, r4
 2085 115c 0310A0E1 		mov	r1, r3
 2086 1160 FEFFFFEB 		bl	__subsf3
 2087 1164 0030A0E1 		mov	r3, r0
 2088 1168 0320A0E1 		mov	r2, r3
 2089 116c 18319FE5 		ldr	r3, .L60+24
 2090 1170 002083E5 		str	r2, [r3, #0]	@ float
 430:lab.c         ****     g_u[1] = -K10 * angle_diff(g_sensor.dTheta,0) - K11 * (g_sensor.dQ - q_desired);
 2092              	.LM136:
 2093 1174 20301BE5 		ldr	r3, [fp, #-32]
 2094 1178 024123E2 		eor	r4, r3, #-2147483648
 2095 117c 00319FE5 		ldr	r3, .L60+16
 2096 1180 083093E5 		ldr	r3, [r3, #8]	@ float
 2097 1184 0300A0E1 		mov	r0, r3
 2098 1188 F8109FE5 		ldr	r1, .L60+20	@ float
 2099 118c FEFFFFEB 		bl	angle_diff
 2100 1190 0030A0E1 		mov	r3, r0
 2101 1194 0400A0E1 		mov	r0, r4
 2102 1198 0310A0E1 		mov	r1, r3
 2103 119c FEFFFFEB 		bl	__mulsf3
 2104 11a0 0030A0E1 		mov	r3, r0
 2105 11a4 0340A0E1 		mov	r4, r3
 2106 11a8 D4309FE5 		ldr	r3, .L60+16
 2107 11ac 203093E5 		ldr	r3, [r3, #32]	@ float
 2108 11b0 0300A0E1 		mov	r0, r3
 2109 11b4 30101BE5 		ldr	r1, [fp, #-48]	@ float
 2110 11b8 FEFFFFEB 		bl	__subsf3
 2111 11bc 0030A0E1 		mov	r3, r0
 2112 11c0 0300A0E1 		mov	r0, r3
 2113 11c4 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 2114 11c8 FEFFFFEB 		bl	__mulsf3
 2115 11cc 0030A0E1 		mov	r3, r0
 2116 11d0 0400A0E1 		mov	r0, r4
 2117 11d4 0310A0E1 		mov	r1, r3
 2118 11d8 FEFFFFEB 		bl	__subsf3
 2119 11dc 0030A0E1 		mov	r3, r0
 2120 11e0 0320A0E1 		mov	r2, r3
 2121 11e4 A0309FE5 		ldr	r3, .L60+24
 2122 11e8 042083E5 		str	r2, [r3, #4]	@ float
 431:lab.c         ****     g_u[2] =  - K21 * (g_sensor.dR - r_desired);
 2124              	.LM137:
 2125 11ec 14301BE5 		ldr	r3, [fp, #-20]
 2126 11f0 024123E2 		eor	r4, r3, #-2147483648
 2127 11f4 88309FE5 		ldr	r3, .L60+16
 2128 11f8 243093E5 		ldr	r3, [r3, #36]	@ float
 2129 11fc 0300A0E1 		mov	r0, r3
 2130 1200 34101BE5 		ldr	r1, [fp, #-52]	@ float
 2131 1204 FEFFFFEB 		bl	__subsf3
 2132 1208 0030A0E1 		mov	r3, r0
 2133 120c 0400A0E1 		mov	r0, r4
 2134 1210 0310A0E1 		mov	r1, r3
 2135 1214 FEFFFFEB 		bl	__mulsf3
 2136 1218 0030A0E1 		mov	r3, r0
 2137 121c 0320A0E1 		mov	r2, r3
 2138 1220 64309FE5 		ldr	r3, .L60+24
 2139 1224 082083E5 		str	r2, [r3, #8]	@ float
 432:lab.c         **** 
 433:lab.c         ****     // for logging purposes
 434:lab.c         ****     g_motorinput.dU1 = g_u[0];
 2141              	.LM138:
 2142 1228 5C309FE5 		ldr	r3, .L60+24
 2143 122c 002093E5 		ldr	r2, [r3, #0]	@ float
 2144 1230 58309FE5 		ldr	r3, .L60+28
 2145 1234 042083E5 		str	r2, [r3, #4]	@ float
 435:lab.c         ****     g_motorinput.dU2 = g_u[1];
 2147              	.LM139:
 2148 1238 4C309FE5 		ldr	r3, .L60+24
 2149 123c 042093E5 		ldr	r2, [r3, #4]	@ float
 2150 1240 48309FE5 		ldr	r3, .L60+28
 2151 1244 082083E5 		str	r2, [r3, #8]	@ float
 436:lab.c         ****     g_motorinput.dU3 = g_u[2];
 2153              	.LM140:
 2154 1248 3C309FE5 		ldr	r3, .L60+24
 2155 124c 082093E5 		ldr	r2, [r3, #8]	@ float
 2156 1250 38309FE5 		ldr	r3, .L60+28
 2157 1254 0C2083E5 		str	r2, [r3, #12]	@ float
 437:lab.c         ****     g_motorinput.dU4 = g_u[3];
 2159              	.LM141:
 2160 1258 2C309FE5 		ldr	r3, .L60+24
 2161 125c 0C2093E5 		ldr	r2, [r3, #12]	@ float
 2162 1260 28309FE5 		ldr	r3, .L60+28
 2163 1264 102083E5 		str	r2, [r3, #16]	@ float
 438:lab.c         **** }
 2165              	.LM142:
 2166 1268 10D04BE2 		sub	sp, fp, #16
 2167 126c 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2168 1270 1EFF2FE1 		bx	lr
 2169              	.L61:
 2170              		.align	2
 2171              	.L60:
 2172 1274 AE47613F 		.word	1063339950
 2173 1278 B81E053E 		.word	1040522936
 2174 127c 52B89E3E 		.word	1050589266
 2175 1280 8FC2F53D 		.word	1039516303
 2176 1284 00000000 		.word	g_sensor
 2177 1288 00000000 		.word	0
 2178 128c 00000000 		.word	g_u
 2179 1290 00000000 		.word	g_motorinput
 2189              	.Lscope9:
 2190              		.align	2
 2198              		.global	InnerLoopAngleRate
 2200              	InnerLoopAngleRate:
 439:lab.c         **** 
 440:lab.c         **** 
 441:lab.c         **** void InnerLoopAngleRate(float roll_desired, float pitch_desired, float yaw_desired,  //{{{1
 442:lab.c         ****         float p_desired, float q_desired, float r_desired) { 
 2202              	.LM143:
 2203              		@ Function supports interworking.
 2204              		@ args = 8, pretend = 0, frame = 40
 2205              		@ frame_needed = 1, uses_anonymous_args = 0
 2206 1294 0DC0A0E1 		mov	ip, sp
 2207 1298 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 2208 129c 04B04CE2 		sub	fp, ip, #4
 2209 12a0 28D04DE2 		sub	sp, sp, #40
 2210 12a4 2C000BE5 		str	r0, [fp, #-44]	@ float
 2211 12a8 30100BE5 		str	r1, [fp, #-48]	@ float
 2212 12ac 34200BE5 		str	r2, [fp, #-52]	@ float
 2213 12b0 38300BE5 		str	r3, [fp, #-56]	@ float
 443:lab.c         ****     // GAINS
 444:lab.c         ****     float KR0 = 1.0857;
 2215              	.LM144:
 2216 12b4 08329FE5 		ldr	r3, .L64	@ float
 2217 12b8 28300BE5 		str	r3, [fp, #-40]	@ float
 445:lab.c         ****     float KR1 = 1.0857;
 2219              	.LM145:
 2220 12bc 00329FE5 		ldr	r3, .L64	@ float
 2221 12c0 24300BE5 		str	r3, [fp, #-36]	@ float
 446:lab.c         ****     float KR2 = 1.0857;
 2223              	.LM146:
 2224 12c4 F8319FE5 		ldr	r3, .L64	@ float
 2225 12c8 20300BE5 		str	r3, [fp, #-32]	@ float
 447:lab.c         ****     float Kw0 = 0.1781;
 2227              	.LM147:
 2228 12cc F4319FE5 		ldr	r3, .L64+4	@ float
 2229 12d0 1C300BE5 		str	r3, [fp, #-28]	@ float
 448:lab.c         ****     float Kw1 = 0.1781;
 2231              	.LM148:
 2232 12d4 EC319FE5 		ldr	r3, .L64+4	@ float
 2233 12d8 18300BE5 		str	r3, [fp, #-24]	@ float
 449:lab.c         ****     float Kw2 = 0.1781;
 2235              	.LM149:
 2236 12dc E4319FE5 		ldr	r3, .L64+4	@ float
 2237 12e0 14300BE5 		str	r3, [fp, #-20]	@ float
 450:lab.c         **** 
 451:lab.c         ****     /*
 452:lab.c         ****     // CURRENT ROTATION MATRIX
 453:lab.c         ****     euler2rotmat(g_sensor.dPhi, g_sensor.dTheta, g_sensor.dPsi, R01);
 454:lab.c         ****     matrix_transpose(3,3,R01,R10);
 455:lab.c         ****     // DESIRED ROTATION MATRIX
 456:lab.c         ****     euler2rotmat(roll_desired, pitch_desired, yaw_desired, R01_des);
 457:lab.c         ****     //matrix_transpose(3,3,R01_des,R10_des);
 458:lab.c         ****     // ATTITUDE ERROR
 459:lab.c         ****     matrix_multiply(3,3,3,R01_des,R10,tmpprod1);
 460:lab.c         ****     //matrix_multiply(3,3,3,R01,R10_des,tmpprod2);
 461:lab.c         ****     matrix_transpose(3,3,tmpprod1,tmpprod2);
 462:lab.c         ****     //matrix_scalar_mult(3,3, tmpprod2, -1.0); // overwrites tmpprod2
 463:lab.c         ****     matrix_subtract(3,3, tmpprod1, tmpprod2); // in place!  result in first arg!
 464:lab.c         ****     unwedge(tmpprod1, e_R);    
 465:lab.c         ****     matrix_scalar_mult(3,1, e_R, 0.5); // in place!
 466:lab.c         ****     */
 467:lab.c         ****     e_R[0] = angle_diff(g_sensor.dPhi, roll_desired);
 2239              	.LM150:
 2240 12e4 E0319FE5 		ldr	r3, .L64+8
 2241 12e8 043093E5 		ldr	r3, [r3, #4]	@ float
 2242 12ec 0300A0E1 		mov	r0, r3
 2243 12f0 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 2244 12f4 FEFFFFEB 		bl	angle_diff
 2245 12f8 0020A0E1 		mov	r2, r0
 2246 12fc CC319FE5 		ldr	r3, .L64+12
 2247 1300 002083E5 		str	r2, [r3, #0]	@ float
 468:lab.c         ****     e_R[1] = angle_diff(g_sensor.dTheta, pitch_desired);
 2249              	.LM151:
 2250 1304 C0319FE5 		ldr	r3, .L64+8
 2251 1308 083093E5 		ldr	r3, [r3, #8]	@ float
 2252 130c 0300A0E1 		mov	r0, r3
 2253 1310 30101BE5 		ldr	r1, [fp, #-48]	@ float
 2254 1314 FEFFFFEB 		bl	angle_diff
 2255 1318 0020A0E1 		mov	r2, r0
 2256 131c AC319FE5 		ldr	r3, .L64+12
 2257 1320 042083E5 		str	r2, [r3, #4]	@ float
 469:lab.c         ****     e_R[2] = angle_diff(g_sensor.dPsi, yaw_desired);
 2259              	.LM152:
 2260 1324 A0319FE5 		ldr	r3, .L64+8
 2261 1328 0C3093E5 		ldr	r3, [r3, #12]	@ float
 2262 132c 0300A0E1 		mov	r0, r3
 2263 1330 34101BE5 		ldr	r1, [fp, #-52]	@ float
 2264 1334 FEFFFFEB 		bl	angle_diff
 2265 1338 0020A0E1 		mov	r2, r0
 2266 133c 8C319FE5 		ldr	r3, .L64+12
 2267 1340 082083E5 		str	r2, [r3, #8]	@ float
 470:lab.c         **** 
 471:lab.c         ****     // ANGULAR VELOCITY ERROR
 472:lab.c         ****     e_w[0] = g_sensor.dP - p_desired;
 2269              	.LM153:
 2270 1344 80319FE5 		ldr	r3, .L64+8
 2271 1348 1C3093E5 		ldr	r3, [r3, #28]	@ float
 2272 134c 0300A0E1 		mov	r0, r3
 2273 1350 38101BE5 		ldr	r1, [fp, #-56]	@ float
 2274 1354 FEFFFFEB 		bl	__subsf3
 2275 1358 0030A0E1 		mov	r3, r0
 2276 135c 0320A0E1 		mov	r2, r3
 2277 1360 6C319FE5 		ldr	r3, .L64+16
 2278 1364 002083E5 		str	r2, [r3, #0]	@ float
 473:lab.c         ****     e_w[1] = g_sensor.dQ - q_desired;
 2280              	.LM154:
 2281 1368 5C319FE5 		ldr	r3, .L64+8
 2282 136c 203093E5 		ldr	r3, [r3, #32]	@ float
 2283 1370 0300A0E1 		mov	r0, r3
 2284 1374 04109BE5 		ldr	r1, [fp, #4]	@ float
 2285 1378 FEFFFFEB 		bl	__subsf3
 2286 137c 0030A0E1 		mov	r3, r0
 2287 1380 0320A0E1 		mov	r2, r3
 2288 1384 48319FE5 		ldr	r3, .L64+16
 2289 1388 042083E5 		str	r2, [r3, #4]	@ float
 474:lab.c         ****     e_w[2] = g_sensor.dR - r_desired;
 2291              	.LM155:
 2292 138c 38319FE5 		ldr	r3, .L64+8
 2293 1390 243093E5 		ldr	r3, [r3, #36]	@ float
 2294 1394 0300A0E1 		mov	r0, r3
 2295 1398 08109BE5 		ldr	r1, [fp, #8]	@ float
 2296 139c FEFFFFEB 		bl	__subsf3
 2297 13a0 0030A0E1 		mov	r3, r0
 2298 13a4 0320A0E1 		mov	r2, r3
 2299 13a8 24319FE5 		ldr	r3, .L64+16
 2300 13ac 082083E5 		str	r2, [r3, #8]	@ float
 475:lab.c         **** 
 476:lab.c         ****     // Attitude control
 477:lab.c         ****     g_u[0] = -KR0 * e_R[0] - Kw0 * e_w[0];
 2302              	.LM156:
 2303 13b0 28301BE5 		ldr	r3, [fp, #-40]
 2304 13b4 022123E2 		eor	r2, r3, #-2147483648
 2305 13b8 10319FE5 		ldr	r3, .L64+12
 2306 13bc 003093E5 		ldr	r3, [r3, #0]	@ float
 2307 13c0 0200A0E1 		mov	r0, r2
 2308 13c4 0310A0E1 		mov	r1, r3
 2309 13c8 FEFFFFEB 		bl	__mulsf3
 2310 13cc 0030A0E1 		mov	r3, r0
 2311 13d0 0340A0E1 		mov	r4, r3
 2312 13d4 F8309FE5 		ldr	r3, .L64+16
 2313 13d8 003093E5 		ldr	r3, [r3, #0]	@ float
 2314 13dc 0300A0E1 		mov	r0, r3
 2315 13e0 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 2316 13e4 FEFFFFEB 		bl	__mulsf3
 2317 13e8 0030A0E1 		mov	r3, r0
 2318 13ec 0400A0E1 		mov	r0, r4
 2319 13f0 0310A0E1 		mov	r1, r3
 2320 13f4 FEFFFFEB 		bl	__subsf3
 2321 13f8 0030A0E1 		mov	r3, r0
 2322 13fc 0320A0E1 		mov	r2, r3
 2323 1400 D0309FE5 		ldr	r3, .L64+20
 2324 1404 002083E5 		str	r2, [r3, #0]	@ float
 478:lab.c         ****     g_u[1] = -KR1 * e_R[1] - Kw1 * e_w[1]; 
 2326              	.LM157:
 2327 1408 24301BE5 		ldr	r3, [fp, #-36]
 2328 140c 022123E2 		eor	r2, r3, #-2147483648
 2329 1410 B8309FE5 		ldr	r3, .L64+12
 2330 1414 043093E5 		ldr	r3, [r3, #4]	@ float
 2331 1418 0200A0E1 		mov	r0, r2
 2332 141c 0310A0E1 		mov	r1, r3
 2333 1420 FEFFFFEB 		bl	__mulsf3
 2334 1424 0030A0E1 		mov	r3, r0
 2335 1428 0340A0E1 		mov	r4, r3
 2336 142c A0309FE5 		ldr	r3, .L64+16
 2337 1430 043093E5 		ldr	r3, [r3, #4]	@ float
 2338 1434 0300A0E1 		mov	r0, r3
 2339 1438 18101BE5 		ldr	r1, [fp, #-24]	@ float
 2340 143c FEFFFFEB 		bl	__mulsf3
 2341 1440 0030A0E1 		mov	r3, r0
 2342 1444 0400A0E1 		mov	r0, r4
 2343 1448 0310A0E1 		mov	r1, r3
 2344 144c FEFFFFEB 		bl	__subsf3
 2345 1450 0030A0E1 		mov	r3, r0
 2346 1454 0320A0E1 		mov	r2, r3
 2347 1458 78309FE5 		ldr	r3, .L64+20
 2348 145c 042083E5 		str	r2, [r3, #4]	@ float
 479:lab.c         ****     g_u[2] = -KR2 * e_R[2] - Kw2 * e_w[2];
 2350              	.LM158:
 2351 1460 20301BE5 		ldr	r3, [fp, #-32]
 2352 1464 022123E2 		eor	r2, r3, #-2147483648
 2353 1468 60309FE5 		ldr	r3, .L64+12
 2354 146c 083093E5 		ldr	r3, [r3, #8]	@ float
 2355 1470 0200A0E1 		mov	r0, r2
 2356 1474 0310A0E1 		mov	r1, r3
 2357 1478 FEFFFFEB 		bl	__mulsf3
 2358 147c 0030A0E1 		mov	r3, r0
 2359 1480 0340A0E1 		mov	r4, r3
 2360 1484 48309FE5 		ldr	r3, .L64+16
 2361 1488 083093E5 		ldr	r3, [r3, #8]	@ float
 2362 148c 0300A0E1 		mov	r0, r3
 2363 1490 14101BE5 		ldr	r1, [fp, #-20]	@ float
 2364 1494 FEFFFFEB 		bl	__mulsf3
 2365 1498 0030A0E1 		mov	r3, r0
 2366 149c 0400A0E1 		mov	r0, r4
 2367 14a0 0310A0E1 		mov	r1, r3
 2368 14a4 FEFFFFEB 		bl	__subsf3
 2369 14a8 0030A0E1 		mov	r3, r0
 2370 14ac 0320A0E1 		mov	r2, r3
 2371 14b0 20309FE5 		ldr	r3, .L64+20
 2372 14b4 082083E5 		str	r2, [r3, #8]	@ float
 480:lab.c         **** 
 481:lab.c         **** }
 2374              	.LM159:
 2375 14b8 10D04BE2 		sub	sp, fp, #16
 2376 14bc 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2377 14c0 1EFF2FE1 		bx	lr
 2378              	.L65:
 2379              		.align	2
 2380              	.L64:
 2381 14c4 38F88A3F 		.word	1066072120
 2382 14c8 D95F363E 		.word	1043750873
 2383 14cc 00000000 		.word	g_sensor
 2384 14d0 00000000 		.word	e_R
 2385 14d4 00000000 		.word	e_w
 2386 14d8 00000000 		.word	g_u
 2396              	.Lscope10:
 2397              		.global	__divdf3
 2398              		.align	2
 2400              		.global	outerloopGPS
 2402              	outerloopGPS:
 482:lab.c         **** 
 483:lab.c         **** 
 484:lab.c         **** 
 485:lab.c         **** //Potential Function: inputs current position and desired position, outputs next step
 486:lab.c         **** void outerloopGPS(void) { //{{{1
 2404              	.LM160:
 2405              		@ Function supports interworking.
 2406              		@ args = 0, pretend = 0, frame = 84
 2407              		@ frame_needed = 1, uses_anonymous_args = 0
 2408 14dc 0DC0A0E1 		mov	ip, sp
 2409 14e0 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2410 14e4 04B04CE2 		sub	fp, ip, #4
 2411 14e8 54D04DE2 		sub	sp, sp, #84
 487:lab.c         **** 
 488:lab.c         ****     DataOutputsPerSecond = 1;
 2413              	.LM161:
 2414 14ec 28239FE5 		ldr	r2, .L73+8
 2415 14f0 0130A0E3 		mov	r3, #1
 2416 14f4 0030C2E5 		strb	r3, [r2, #0]
 489:lab.c         ****     msg_flag = (1<<FMGPSSENSOR_ID);
 2418              	.LM162:
 2419 14f8 20239FE5 		ldr	r2, .L73+12
 2420 14fc 2030A0E3 		mov	r3, #32
 2421 1500 003082E5 		str	r3, [r2, #0]
 490:lab.c         ****     
 491:lab.c         ****     //compute xyz
 492:lab.c         ****     flatEarthl2x();
 2423              	.LM163:
 2424 1504 FEFFFFEB 		bl	flatEarthl2x
 493:lab.c         ****     //ll2x();
 494:lab.c         ****     //creating control around the next_position
 495:lab.c         ****     float Kd1 = 2.8;
 2426              	.LM164:
 2427 1508 14339FE5 		ldr	r3, .L73+16	@ float
 2428 150c 7C300BE5 		str	r3, [fp, #-124]	@ float
 496:lab.c         ****     float Kp1 = 0.8; //0.5; 2.0 was not a good gain choice
 2430              	.LM165:
 2431 1510 10339FE5 		ldr	r3, .L73+20	@ float
 2432 1514 78300BE5 		str	r3, [fp, #-120]	@ float
 497:lab.c         ****     float Kd2 = 2.8;
 2434              	.LM166:
 2435 1518 04339FE5 		ldr	r3, .L73+16	@ float
 2436 151c 74300BE5 		str	r3, [fp, #-116]	@ float
 498:lab.c         ****     float Kp2 = 0.8; // 0.5; 2.0 was not a good gain choice
 2438              	.LM167:
 2439 1520 00339FE5 		ldr	r3, .L73+20	@ float
 2440 1524 70300BE5 		str	r3, [fp, #-112]	@ float
 499:lab.c         ****     float desRoll = -(Kp1*(g_state.dX) + Kd1*g_state.dVx)/9.81;
 2442              	.LM168:
 2443 1528 34339FE5 		ldr	r3, .L73+80
 2444 152c 043093E5 		ldr	r3, [r3, #4]	@ float
 2445 1530 0300A0E1 		mov	r0, r3
 2446 1534 78101BE5 		ldr	r1, [fp, #-120]	@ float
 2447 1538 FEFFFFEB 		bl	__mulsf3
 2448 153c 0030A0E1 		mov	r3, r0
 2449 1540 0340A0E1 		mov	r4, r3
 2450 1544 18339FE5 		ldr	r3, .L73+80
 2451 1548 103093E5 		ldr	r3, [r3, #16]	@ float
 2452 154c 0300A0E1 		mov	r0, r3
 2453 1550 7C101BE5 		ldr	r1, [fp, #-124]	@ float
 2454 1554 FEFFFFEB 		bl	__mulsf3
 2455 1558 0030A0E1 		mov	r3, r0
 2456 155c 0400A0E1 		mov	r0, r4
 2457 1560 0310A0E1 		mov	r1, r3
 2458 1564 FEFFFFEB 		bl	__addsf3
 2459 1568 0030A0E1 		mov	r3, r0
 2460 156c 023123E2 		eor	r3, r3, #-2147483648
 2461 1570 0300A0E1 		mov	r0, r3
 2462 1574 FEFFFFEB 		bl	__extendsfdf2
 2463 1578 0030A0E1 		mov	r3, r0
 2464 157c 0140A0E1 		mov	r4, r1
 2465 1580 0300A0E1 		mov	r0, r3
 2466 1584 0410A0E1 		mov	r1, r4
 2467 1588 A12F8FE2 		adr	r2, .L73
 2468 158c 0C0092E8 		ldmia	r2, {r2-r3}
 2469 1590 FEFFFFEB 		bl	__divdf3
 2470 1594 0030A0E1 		mov	r3, r0
 2471 1598 0140A0E1 		mov	r4, r1
 2472 159c 0300A0E1 		mov	r0, r3
 2473 15a0 0410A0E1 		mov	r1, r4
 2474 15a4 FEFFFFEB 		bl	__truncdfsf2
 2475 15a8 0030A0E1 		mov	r3, r0
 2476 15ac 6C300BE5 		str	r3, [fp, #-108]	@ float
 500:lab.c         ****     float desPitch = (Kp2*(g_state.dY) + Kd2*g_state.dVy)/9.81;
 2478              	.LM169:
 2479 15b0 AC329FE5 		ldr	r3, .L73+80
 2480 15b4 083093E5 		ldr	r3, [r3, #8]	@ float
 2481 15b8 0300A0E1 		mov	r0, r3
 2482 15bc 70101BE5 		ldr	r1, [fp, #-112]	@ float
 2483 15c0 FEFFFFEB 		bl	__mulsf3
 2484 15c4 0030A0E1 		mov	r3, r0
 2485 15c8 0340A0E1 		mov	r4, r3
 2486 15cc 90329FE5 		ldr	r3, .L73+80
 2487 15d0 143093E5 		ldr	r3, [r3, #20]	@ float
 2488 15d4 0300A0E1 		mov	r0, r3
 2489 15d8 74101BE5 		ldr	r1, [fp, #-116]	@ float
 2490 15dc FEFFFFEB 		bl	__mulsf3
 2491 15e0 0030A0E1 		mov	r3, r0
 2492 15e4 0400A0E1 		mov	r0, r4
 2493 15e8 0310A0E1 		mov	r1, r3
 2494 15ec FEFFFFEB 		bl	__addsf3
 2495 15f0 0030A0E1 		mov	r3, r0
 2496 15f4 0300A0E1 		mov	r0, r3
 2497 15f8 FEFFFFEB 		bl	__extendsfdf2
 2498 15fc 0030A0E1 		mov	r3, r0
 2499 1600 0140A0E1 		mov	r4, r1
 2500 1604 0300A0E1 		mov	r0, r3
 2501 1608 0410A0E1 		mov	r1, r4
 2502 160c 022C8FE2 		adr	r2, .L73
 2503 1610 0C0092E8 		ldmia	r2, {r2-r3}
 2504 1614 FEFFFFEB 		bl	__divdf3
 2505 1618 0030A0E1 		mov	r3, r0
 2506 161c 0140A0E1 		mov	r4, r1
 2507 1620 0300A0E1 		mov	r0, r3
 2508 1624 0410A0E1 		mov	r1, r4
 2509 1628 FEFFFFEB 		bl	__truncdfsf2
 2510 162c 0030A0E1 		mov	r3, r0
 2511 1630 68300BE5 		str	r3, [fp, #-104]	@ float
 501:lab.c         ****     float desYaw = 0.0;
 2513              	.LM170:
 2514 1634 F0319FE5 		ldr	r3, .L73+24	@ float
 2515 1638 64300BE5 		str	r3, [fp, #-100]	@ float
 502:lab.c         ****     // Attitude inner loops:
 503:lab.c         ****     float K00 = 0.88;
 2517              	.LM171:
 2518 163c EC319FE5 		ldr	r3, .L73+28	@ float
 2519 1640 60300BE5 		str	r3, [fp, #-96]	@ float
 504:lab.c         ****     float K01 = 0.13;
 2521              	.LM172:
 2522 1644 E8319FE5 		ldr	r3, .L73+32	@ float
 2523 1648 5C300BE5 		str	r3, [fp, #-92]	@ float
 505:lab.c         ****     float K10 = 0.88;
 2525              	.LM173:
 2526 164c DC319FE5 		ldr	r3, .L73+28	@ float
 2527 1650 58300BE5 		str	r3, [fp, #-88]	@ float
 506:lab.c         ****     float K11 = 0.13;
 2529              	.LM174:
 2530 1654 D8319FE5 		ldr	r3, .L73+32	@ float
 2531 1658 54300BE5 		str	r3, [fp, #-84]	@ float
 507:lab.c         ****     float K20 = 0.31;
 2533              	.LM175:
 2534 165c D4319FE5 		ldr	r3, .L73+36	@ float
 2535 1660 50300BE5 		str	r3, [fp, #-80]	@ float
 508:lab.c         ****     float K21 = 0.12;
 2537              	.LM176:
 2538 1664 D0319FE5 		ldr	r3, .L73+40	@ float
 2539 1668 4C300BE5 		str	r3, [fp, #-76]	@ float
 509:lab.c         ****     // Attitude control
 510:lab.c         ****     g_u[0] = -K00 * (g_sensor.dPhi - desRoll) - K01 * (g_sensor.dP);
 2541              	.LM177:
 2542 166c 60301BE5 		ldr	r3, [fp, #-96]
 2543 1670 024123E2 		eor	r4, r3, #-2147483648
 2544 1674 E4319FE5 		ldr	r3, .L73+76
 2545 1678 043093E5 		ldr	r3, [r3, #4]	@ float
 2546 167c 0300A0E1 		mov	r0, r3
 2547 1680 6C101BE5 		ldr	r1, [fp, #-108]	@ float
 2548 1684 FEFFFFEB 		bl	__subsf3
 2549 1688 0030A0E1 		mov	r3, r0
 2550 168c 0400A0E1 		mov	r0, r4
 2551 1690 0310A0E1 		mov	r1, r3
 2552 1694 FEFFFFEB 		bl	__mulsf3
 2553 1698 0030A0E1 		mov	r3, r0
 2554 169c 0340A0E1 		mov	r4, r3
 2555 16a0 B8319FE5 		ldr	r3, .L73+76
 2556 16a4 1C3093E5 		ldr	r3, [r3, #28]	@ float
 2557 16a8 0300A0E1 		mov	r0, r3
 2558 16ac 5C101BE5 		ldr	r1, [fp, #-92]	@ float
 2559 16b0 FEFFFFEB 		bl	__mulsf3
 2560 16b4 0030A0E1 		mov	r3, r0
 2561 16b8 0400A0E1 		mov	r0, r4
 2562 16bc 0310A0E1 		mov	r1, r3
 2563 16c0 FEFFFFEB 		bl	__subsf3
 2564 16c4 0030A0E1 		mov	r3, r0
 2565 16c8 0320A0E1 		mov	r2, r3
 2566 16cc 94319FE5 		ldr	r3, .L73+84
 2567 16d0 002083E5 		str	r2, [r3, #0]	@ float
 511:lab.c         ****     g_u[1] = -K10 * (g_sensor.dTheta - desPitch) - K11 * (g_sensor.dQ);
 2569              	.LM178:
 2570 16d4 58301BE5 		ldr	r3, [fp, #-88]
 2571 16d8 024123E2 		eor	r4, r3, #-2147483648
 2572 16dc 7C319FE5 		ldr	r3, .L73+76
 2573 16e0 083093E5 		ldr	r3, [r3, #8]	@ float
 2574 16e4 0300A0E1 		mov	r0, r3
 2575 16e8 68101BE5 		ldr	r1, [fp, #-104]	@ float
 2576 16ec FEFFFFEB 		bl	__subsf3
 2577 16f0 0030A0E1 		mov	r3, r0
 2578 16f4 0400A0E1 		mov	r0, r4
 2579 16f8 0310A0E1 		mov	r1, r3
 2580 16fc FEFFFFEB 		bl	__mulsf3
 2581 1700 0030A0E1 		mov	r3, r0
 2582 1704 0340A0E1 		mov	r4, r3
 2583 1708 50319FE5 		ldr	r3, .L73+76
 2584 170c 203093E5 		ldr	r3, [r3, #32]	@ float
 2585 1710 0300A0E1 		mov	r0, r3
 2586 1714 54101BE5 		ldr	r1, [fp, #-84]	@ float
 2587 1718 FEFFFFEB 		bl	__mulsf3
 2588 171c 0030A0E1 		mov	r3, r0
 2589 1720 0400A0E1 		mov	r0, r4
 2590 1724 0310A0E1 		mov	r1, r3
 2591 1728 FEFFFFEB 		bl	__subsf3
 2592 172c 0030A0E1 		mov	r3, r0
 2593 1730 0320A0E1 		mov	r2, r3
 2594 1734 2C319FE5 		ldr	r3, .L73+84
 2595 1738 042083E5 		str	r2, [r3, #4]	@ float
 512:lab.c         ****     g_u[2] = -K20 * (g_sensor.dPsi - desYaw) - K21 * (g_sensor.dR);
 2597              	.LM179:
 2598 173c 50301BE5 		ldr	r3, [fp, #-80]
 2599 1740 024123E2 		eor	r4, r3, #-2147483648
 2600 1744 14319FE5 		ldr	r3, .L73+76
 2601 1748 0C3093E5 		ldr	r3, [r3, #12]	@ float
 2602 174c 0300A0E1 		mov	r0, r3
 2603 1750 64101BE5 		ldr	r1, [fp, #-100]	@ float
 2604 1754 FEFFFFEB 		bl	__subsf3
 2605 1758 0030A0E1 		mov	r3, r0
 2606 175c 0400A0E1 		mov	r0, r4
 2607 1760 0310A0E1 		mov	r1, r3
 2608 1764 FEFFFFEB 		bl	__mulsf3
 2609 1768 0030A0E1 		mov	r3, r0
 2610 176c 0340A0E1 		mov	r4, r3
 2611 1770 E8309FE5 		ldr	r3, .L73+76
 2612 1774 243093E5 		ldr	r3, [r3, #36]	@ float
 2613 1778 0300A0E1 		mov	r0, r3
 2614 177c 4C101BE5 		ldr	r1, [fp, #-76]	@ float
 2615 1780 FEFFFFEB 		bl	__mulsf3
 2616 1784 0030A0E1 		mov	r3, r0
 2617 1788 0400A0E1 		mov	r0, r4
 2618 178c 0310A0E1 		mov	r1, r3
 2619 1790 FEFFFFEB 		bl	__subsf3
 2620 1794 0030A0E1 		mov	r3, r0
 2621 1798 0320A0E1 		mov	r2, r3
 2622 179c C4309FE5 		ldr	r3, .L73+84
 2623 17a0 082083E5 		str	r2, [r3, #8]	@ float
 513:lab.c         ****     // Altitude control
 514:lab.c         ****     float Kpz = 4.0;
 2625              	.LM180:
 2626 17a4 94309FE5 		ldr	r3, .L73+44	@ float
 2627 17a8 48300BE5 		str	r3, [fp, #-72]	@ float
 515:lab.c         ****     float Kdz = 2.0;
 2629              	.LM181:
 2630 17ac 90309FE5 		ldr	r3, .L73+48	@ float
 2631 17b0 44300BE5 		str	r3, [fp, #-68]	@ float
 516:lab.c         ****     float Kiz = 0.05;
 2633              	.LM182:
 2634 17b4 8C309FE5 		ldr	r3, .L73+52	@ float
 2635 17b8 40300BE5 		str	r3, [fp, #-64]	@ float
 517:lab.c         ****     float m = 0.69; // kg
 2637              	.LM183:
 2638 17bc 88309FE5 		ldr	r3, .L73+56	@ float
 2639 17c0 3C300BE5 		str	r3, [fp, #-60]	@ float
 518:lab.c         ****     float g = 9.81; // gravity
 2641              	.LM184:
 2642 17c4 84309FE5 		ldr	r3, .L73+60	@ float
 2643 17c8 38300BE5 		str	r3, [fp, #-56]	@ float
 519:lab.c         ****     // centimeters from ground
 520:lab.c         ****     float z_desired = 0.2;
 2645              	.LM185:
 2646 17cc 80309FE5 		ldr	r3, .L73+64	@ float
 2647 17d0 34300BE5 		str	r3, [fp, #-52]	@ float
 521:lab.c         ****     float vz_desired = 0.0;
 2649              	.LM186:
 2650 17d4 50309FE5 		ldr	r3, .L73+24	@ float
 2651 17d8 30300BE5 		str	r3, [fp, #-48]	@ float
 522:lab.c         ****     float z_error_sum;
 523:lab.c         ****     // Compute "integral error"
 524:lab.c         ****     if ((z_error_sum < .5) && (z_error_sum > -.5)) {
 2653              	.LM187:
 2654 17dc 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 2655 17e0 70109FE5 		ldr	r1, .L73+68	@ float
 2656 17e4 FEFFFFEB 		bl	__ltsf2
 2657 17e8 0030A0E1 		mov	r3, r0
 2658 17ec 000053E3 		cmp	r3, #0
 2659 17f0 000000BA 		blt	.L69
 2660 17f4 270000EA 		b	.L67
 2661              	.L69:
 2662 17f8 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 2663 17fc 58109FE5 		ldr	r1, .L73+72	@ float
 2664 1800 FEFFFFEB 		bl	__gtsf2
 2665 1804 0030A0E1 		mov	r3, r0
 2666 1808 000053E3 		cmp	r3, #0
 2667 180c 160000CA 		bgt	.L71
 2668 1810 200000EA 		b	.L67
 2669              	.L74:
 2670              		.align	2
 2671              	.L73:
 2672 1814 B89E2340 		.word	1076076216
 2673 1818 1F85EB51 		.word	1374389535
 2674 181c 00000000 		.word	DataOutputsPerSecond
 2675 1820 00000000 		.word	msg_flag
 2676 1824 33333340 		.word	1077097267
 2677 1828 CDCC4C3F 		.word	1061997773
 2678 182c 00000000 		.word	0
 2679 1830 AE47613F 		.word	1063339950
 2680 1834 B81E053E 		.word	1040522936
 2681 1838 52B89E3E 		.word	1050589266
 2682 183c 8FC2F53D 		.word	1039516303
 2683 1840 00008040 		.word	1082130432
 2684 1844 00000040 		.word	1073741824
 2685 1848 CDCC4C3D 		.word	1028443341
 2686 184c D7A3303F 		.word	1060152279
 2687 1850 C3F51C41 		.word	1092416963
 2688 1854 CDCC4C3E 		.word	1045220557
 2689 1858 0000003F 		.word	1056964608
 2690 185c 000000BF 		.word	-1090519040
 2691 1860 00000000 		.word	g_sensor
 2692 1864 00000000 		.word	g_state
 2693 1868 00000000 		.word	g_u
 2694              	.L71:
 525:lab.c         ****         z_error_sum += g_state.dZ - z_desired;
 2696              	.LM188:
 2697 186c 10301FE5 		ldr	r3, .L73+80
 2698 1870 0C3093E5 		ldr	r3, [r3, #12]	@ float
 2699 1874 0300A0E1 		mov	r0, r3
 2700 1878 34101BE5 		ldr	r1, [fp, #-52]	@ float
 2701 187c FEFFFFEB 		bl	__subsf3
 2702 1880 0030A0E1 		mov	r3, r0
 2703 1884 2C001BE5 		ldr	r0, [fp, #-44]	@ float
 2704 1888 0310A0E1 		mov	r1, r3
 2705 188c FEFFFFEB 		bl	__addsf3
 2706 1890 0030A0E1 		mov	r3, r0
 2707 1894 2C300BE5 		str	r3, [fp, #-44]	@ float
 2708              	.L67:
 526:lab.c         ****     }
 527:lab.c         ****     g_u[3] = m*g - Kpz * (g_state.dZ * cos(g_sensor.dPhi) * cos(g_sensor.dTheta) - z_desired) - Kdz
 2710              	.LM189:
 2711 1898 3C001BE5 		ldr	r0, [fp, #-60]	@ float
 2712 189c 38101BE5 		ldr	r1, [fp, #-56]	@ float
 2713 18a0 FEFFFFEB 		bl	__mulsf3
 2714 18a4 0030A0E1 		mov	r3, r0
 2715 18a8 0300A0E1 		mov	r0, r3
 2716 18ac FEFFFFEB 		bl	__extendsfdf2
 2717 18b0 0070A0E1 		mov	r7, r0
 2718 18b4 0180A0E1 		mov	r8, r1
 2719 18b8 48001BE5 		ldr	r0, [fp, #-72]	@ float
 2720 18bc FEFFFFEB 		bl	__extendsfdf2
 2721 18c0 0090A0E1 		mov	r9, r0
 2722 18c4 01A0A0E1 		mov	sl, r1
 2723 18c8 6C301FE5 		ldr	r3, .L73+80
 2724 18cc 0C3093E5 		ldr	r3, [r3, #12]	@ float
 2725 18d0 0300A0E1 		mov	r0, r3
 2726 18d4 FEFFFFEB 		bl	__extendsfdf2
 2727 18d8 0050A0E1 		mov	r5, r0
 2728 18dc 0160A0E1 		mov	r6, r1
 2729 18e0 88301FE5 		ldr	r3, .L73+76
 2730 18e4 043093E5 		ldr	r3, [r3, #4]	@ float
 2731 18e8 0300A0E1 		mov	r0, r3
 2732 18ec FEFFFFEB 		bl	__extendsfdf2
 2733 18f0 0030A0E1 		mov	r3, r0
 2734 18f4 0140A0E1 		mov	r4, r1
 2735 18f8 0300A0E1 		mov	r0, r3
 2736 18fc 0410A0E1 		mov	r1, r4
 2737 1900 FEFFFFEB 		bl	cos
 2738 1904 0030A0E1 		mov	r3, r0
 2739 1908 0140A0E1 		mov	r4, r1
 2740 190c 0500A0E1 		mov	r0, r5
 2741 1910 0610A0E1 		mov	r1, r6
 2742 1914 0320A0E1 		mov	r2, r3
 2743 1918 0430A0E1 		mov	r3, r4
 2744 191c FEFFFFEB 		bl	__muldf3
 2745 1920 0030A0E1 		mov	r3, r0
 2746 1924 0140A0E1 		mov	r4, r1
 2747 1928 0350A0E1 		mov	r5, r3
 2748 192c 0460A0E1 		mov	r6, r4
 2749 1930 D8301FE5 		ldr	r3, .L73+76
 2750 1934 083093E5 		ldr	r3, [r3, #8]	@ float
 2751 1938 0300A0E1 		mov	r0, r3
 2752 193c FEFFFFEB 		bl	__extendsfdf2
 2753 1940 0030A0E1 		mov	r3, r0
 2754 1944 0140A0E1 		mov	r4, r1
 2755 1948 0300A0E1 		mov	r0, r3
 2756 194c 0410A0E1 		mov	r1, r4
 2757 1950 FEFFFFEB 		bl	cos
 2758 1954 0030A0E1 		mov	r3, r0
 2759 1958 0140A0E1 		mov	r4, r1
 2760 195c 0500A0E1 		mov	r0, r5
 2761 1960 0610A0E1 		mov	r1, r6
 2762 1964 0320A0E1 		mov	r2, r3
 2763 1968 0430A0E1 		mov	r3, r4
 2764 196c FEFFFFEB 		bl	__muldf3
 2765 1970 0030A0E1 		mov	r3, r0
 2766 1974 0140A0E1 		mov	r4, r1
 2767 1978 0350A0E1 		mov	r5, r3
 2768 197c 0460A0E1 		mov	r6, r4
 2769 1980 34001BE5 		ldr	r0, [fp, #-52]	@ float
 2770 1984 FEFFFFEB 		bl	__extendsfdf2
 2771 1988 0030A0E1 		mov	r3, r0
 2772 198c 0140A0E1 		mov	r4, r1
 2773 1990 0500A0E1 		mov	r0, r5
 2774 1994 0610A0E1 		mov	r1, r6
 2775 1998 0320A0E1 		mov	r2, r3
 2776 199c 0430A0E1 		mov	r3, r4
 2777 19a0 FEFFFFEB 		bl	__subdf3
 2778 19a4 0030A0E1 		mov	r3, r0
 2779 19a8 0140A0E1 		mov	r4, r1
 2780 19ac 0900A0E1 		mov	r0, r9
 2781 19b0 0A10A0E1 		mov	r1, sl
 2782 19b4 0320A0E1 		mov	r2, r3
 2783 19b8 0430A0E1 		mov	r3, r4
 2784 19bc FEFFFFEB 		bl	__muldf3
 2785 19c0 0030A0E1 		mov	r3, r0
 2786 19c4 0140A0E1 		mov	r4, r1
 2787 19c8 0700A0E1 		mov	r0, r7
 2788 19cc 0810A0E1 		mov	r1, r8
 2789 19d0 0320A0E1 		mov	r2, r3
 2790 19d4 0430A0E1 		mov	r3, r4
 2791 19d8 FEFFFFEB 		bl	__subdf3
 2792 19dc 0030A0E1 		mov	r3, r0
 2793 19e0 0140A0E1 		mov	r4, r1
 2794 19e4 0350A0E1 		mov	r5, r3
 2795 19e8 0460A0E1 		mov	r6, r4
 2796 19ec 90311FE5 		ldr	r3, .L73+80
 2797 19f0 183093E5 		ldr	r3, [r3, #24]	@ float
 2798 19f4 0300A0E1 		mov	r0, r3
 2799 19f8 30101BE5 		ldr	r1, [fp, #-48]	@ float
 2800 19fc FEFFFFEB 		bl	__subsf3
 2801 1a00 0030A0E1 		mov	r3, r0
 2802 1a04 0300A0E1 		mov	r0, r3
 2803 1a08 44101BE5 		ldr	r1, [fp, #-68]	@ float
 2804 1a0c FEFFFFEB 		bl	__mulsf3
 2805 1a10 0030A0E1 		mov	r3, r0
 2806 1a14 0300A0E1 		mov	r0, r3
 2807 1a18 FEFFFFEB 		bl	__extendsfdf2
 2808 1a1c 0030A0E1 		mov	r3, r0
 2809 1a20 0140A0E1 		mov	r4, r1
 2810 1a24 0500A0E1 		mov	r0, r5
 2811 1a28 0610A0E1 		mov	r1, r6
 2812 1a2c 0320A0E1 		mov	r2, r3
 2813 1a30 0430A0E1 		mov	r3, r4
 2814 1a34 FEFFFFEB 		bl	__subdf3
 2815 1a38 0030A0E1 		mov	r3, r0
 2816 1a3c 0140A0E1 		mov	r4, r1
 2817 1a40 0350A0E1 		mov	r5, r3
 2818 1a44 0460A0E1 		mov	r6, r4
 2819 1a48 40001BE5 		ldr	r0, [fp, #-64]	@ float
 2820 1a4c 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 2821 1a50 FEFFFFEB 		bl	__mulsf3
 2822 1a54 0030A0E1 		mov	r3, r0
 2823 1a58 0300A0E1 		mov	r0, r3
 2824 1a5c FEFFFFEB 		bl	__extendsfdf2
 2825 1a60 0030A0E1 		mov	r3, r0
 2826 1a64 0140A0E1 		mov	r4, r1
 2827 1a68 0500A0E1 		mov	r0, r5
 2828 1a6c 0610A0E1 		mov	r1, r6
 2829 1a70 0320A0E1 		mov	r2, r3
 2830 1a74 0430A0E1 		mov	r3, r4
 2831 1a78 FEFFFFEB 		bl	__subdf3
 2832 1a7c 0030A0E1 		mov	r3, r0
 2833 1a80 0140A0E1 		mov	r4, r1
 2834 1a84 0300A0E1 		mov	r0, r3
 2835 1a88 0410A0E1 		mov	r1, r4
 2836 1a8c FEFFFFEB 		bl	__truncdfsf2
 2837 1a90 0020A0E1 		mov	r2, r0
 2838 1a94 34321FE5 		ldr	r3, .L73+84
 2839 1a98 0C2083E5 		str	r2, [r3, #12]	@ float
 528:lab.c         **** 
 529:lab.c         ****     AE483_send_control();
 2841              	.LM190:
 2842 1a9c FEFFFFEB 		bl	AE483_send_control
 530:lab.c         **** 
 531:lab.c         **** }
 2844              	.LM191:
 2845 1aa0 28D04BE2 		sub	sp, fp, #40
 2846 1aa4 F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 2847 1aa8 1EFF2FE1 		bx	lr
 2872              	.Lscope11:
 2873              		.global	__floatsidf
 2874              		.align	2
 2876              		.global	flatEarthl2x
 2878              	flatEarthl2x:
 532:lab.c         **** 
 533:lab.c         **** // flat earth GPS coord transform
 534:lab.c         **** void flatEarthl2x(void) { //{{{1
 2880              	.LM192:
 2881              		@ Function supports interworking.
 2882              		@ args = 0, pretend = 0, frame = 36
 2883              		@ frame_needed = 1, uses_anonymous_args = 0
 2884 1aac 0DC0A0E1 		mov	ip, sp
 2885 1ab0 70D82DE9 		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 2886 1ab4 04B04CE2 		sub	fp, ip, #4
 2887 1ab8 24D04DE2 		sub	sp, sp, #36
 535:lab.c         ****     float r = 6378100.0;
 2889              	.LM193:
 2890 1abc D4329FE5 		ldr	r3, .L77+16	@ float
 2891 1ac0 3C300BE5 		str	r3, [fp, #-60]	@ float
 536:lab.c         ****     double lon = ((double)RO_ALL_Data.GPS_longitude/10000000.0)*3.14159/180.0;
 2893              	.LM194:
 2894 1ac4 D0329FE5 		ldr	r3, .L77+20
 2895 1ac8 483093E5 		ldr	r3, [r3, #72]
 2896 1acc 0300A0E1 		mov	r0, r3
 2897 1ad0 FEFFFFEB 		bl	__floatsidf
 2898 1ad4 0030A0E1 		mov	r3, r0
 2899 1ad8 0140A0E1 		mov	r4, r1
 2900 1adc 0300A0E1 		mov	r0, r3
 2901 1ae0 0410A0E1 		mov	r1, r4
 2902 1ae4 A72F8FE2 		adr	r2, .L77
 2903 1ae8 0C0092E8 		ldmia	r2, {r2-r3}
 2904 1aec FEFFFFEB 		bl	__divdf3
 2905 1af0 0030A0E1 		mov	r3, r0
 2906 1af4 0140A0E1 		mov	r4, r1
 2907 1af8 0300A0E1 		mov	r0, r3
 2908 1afc 0410A0E1 		mov	r1, r4
 2909 1b00 A22F8FE2 		adr	r2, .L77+8
 2910 1b04 0C0092E8 		ldmia	r2, {r2-r3}
 2911 1b08 FEFFFFEB 		bl	__muldf3
 2912 1b0c 0030A0E1 		mov	r3, r0
 2913 1b10 0140A0E1 		mov	r4, r1
 2914 1b14 0300A0E1 		mov	r0, r3
 2915 1b18 0410A0E1 		mov	r1, r4
 2916 1b1c 0121A0E3 		mov	r2, #1073741824
 2917 1b20 662882E2 		add	r2, r2, #6684672
 2918 1b24 022982E2 		add	r2, r2, #32768
 2919 1b28 0030A0E3 		mov	r3, #0
 2920 1b2c FEFFFFEB 		bl	__divdf3
 2921 1b30 0030A0E1 		mov	r3, r0
 2922 1b34 0140A0E1 		mov	r4, r1
 2923 1b38 38300BE5 		str	r3, [fp, #-56]
 2924 1b3c 34400BE5 		str	r4, [fp, #-52]
 537:lab.c         ****     double lat = ((double)RO_ALL_Data.GPS_latitude/10000000.0)*3.14159/180.0;
 2926              	.LM195:
 2927 1b40 54329FE5 		ldr	r3, .L77+20
 2928 1b44 443093E5 		ldr	r3, [r3, #68]
 2929 1b48 0300A0E1 		mov	r0, r3
 2930 1b4c FEFFFFEB 		bl	__floatsidf
 2931 1b50 0030A0E1 		mov	r3, r0
 2932 1b54 0140A0E1 		mov	r4, r1
 2933 1b58 0300A0E1 		mov	r0, r3
 2934 1b5c 0410A0E1 		mov	r1, r4
 2935 1b60 222E8FE2 		adr	r2, .L77
 2936 1b64 0C0092E8 		ldmia	r2, {r2-r3}
 2937 1b68 FEFFFFEB 		bl	__divdf3
 2938 1b6c 0030A0E1 		mov	r3, r0
 2939 1b70 0140A0E1 		mov	r4, r1
 2940 1b74 0300A0E1 		mov	r0, r3
 2941 1b78 0410A0E1 		mov	r1, r4
 2942 1b7c 832F8FE2 		adr	r2, .L77+8
 2943 1b80 0C0092E8 		ldmia	r2, {r2-r3}
 2944 1b84 FEFFFFEB 		bl	__muldf3
 2945 1b88 0030A0E1 		mov	r3, r0
 2946 1b8c 0140A0E1 		mov	r4, r1
 2947 1b90 0300A0E1 		mov	r0, r3
 2948 1b94 0410A0E1 		mov	r1, r4
 2949 1b98 0121A0E3 		mov	r2, #1073741824
 2950 1b9c 662882E2 		add	r2, r2, #6684672
 2951 1ba0 022982E2 		add	r2, r2, #32768
 2952 1ba4 0030A0E3 		mov	r3, #0
 2953 1ba8 FEFFFFEB 		bl	__divdf3
 2954 1bac 0030A0E1 		mov	r3, r0
 2955 1bb0 0140A0E1 		mov	r4, r1
 2956 1bb4 30300BE5 		str	r3, [fp, #-48]
 2957 1bb8 2C400BE5 		str	r4, [fp, #-44]
 538:lab.c         ****     //float lat = g_state.dY*3.14159/180.0;
 539:lab.c         ****     //float lon = g_state.dX*3.14159/180.0;
 540:lab.c         ****     double lat0 = g_pinfo.homeLat*3.14159/180.0;
 2959              	.LM196:
 2960 1bbc DC319FE5 		ldr	r3, .L77+24
 2961 1bc0 003093E5 		ldr	r3, [r3, #0]	@ float
 2962 1bc4 0300A0E1 		mov	r0, r3
 2963 1bc8 FEFFFFEB 		bl	__extendsfdf2
 2964 1bcc 0030A0E1 		mov	r3, r0
 2965 1bd0 0140A0E1 		mov	r4, r1
 2966 1bd4 0300A0E1 		mov	r0, r3
 2967 1bd8 0410A0E1 		mov	r1, r4
 2968 1bdc 6B2F8FE2 		adr	r2, .L77+8
 2969 1be0 0C0092E8 		ldmia	r2, {r2-r3}
 2970 1be4 FEFFFFEB 		bl	__muldf3
 2971 1be8 0030A0E1 		mov	r3, r0
 2972 1bec 0140A0E1 		mov	r4, r1
 2973 1bf0 0300A0E1 		mov	r0, r3
 2974 1bf4 0410A0E1 		mov	r1, r4
 2975 1bf8 0121A0E3 		mov	r2, #1073741824
 2976 1bfc 662882E2 		add	r2, r2, #6684672
 2977 1c00 022982E2 		add	r2, r2, #32768
 2978 1c04 0030A0E3 		mov	r3, #0
 2979 1c08 FEFFFFEB 		bl	__divdf3
 2980 1c0c 0030A0E1 		mov	r3, r0
 2981 1c10 0140A0E1 		mov	r4, r1
 2982 1c14 28300BE5 		str	r3, [fp, #-40]
 2983 1c18 24400BE5 		str	r4, [fp, #-36]
 541:lab.c         ****     double lon0 = g_pinfo.homeLong*3.14159/180.0;
 2985              	.LM197:
 2986 1c1c 7C319FE5 		ldr	r3, .L77+24
 2987 1c20 043093E5 		ldr	r3, [r3, #4]	@ float
 2988 1c24 0300A0E1 		mov	r0, r3
 2989 1c28 FEFFFFEB 		bl	__extendsfdf2
 2990 1c2c 0030A0E1 		mov	r3, r0
 2991 1c30 0140A0E1 		mov	r4, r1
 2992 1c34 0300A0E1 		mov	r0, r3
 2993 1c38 0410A0E1 		mov	r1, r4
 2994 1c3c 532F8FE2 		adr	r2, .L77+8
 2995 1c40 0C0092E8 		ldmia	r2, {r2-r3}
 2996 1c44 FEFFFFEB 		bl	__muldf3
 2997 1c48 0030A0E1 		mov	r3, r0
 2998 1c4c 0140A0E1 		mov	r4, r1
 2999 1c50 0300A0E1 		mov	r0, r3
 3000 1c54 0410A0E1 		mov	r1, r4
 3001 1c58 0121A0E3 		mov	r2, #1073741824
 3002 1c5c 662882E2 		add	r2, r2, #6684672
 3003 1c60 022982E2 		add	r2, r2, #32768
 3004 1c64 0030A0E3 		mov	r3, #0
 3005 1c68 FEFFFFEB 		bl	__divdf3
 3006 1c6c 0030A0E1 		mov	r3, r0
 3007 1c70 0140A0E1 		mov	r4, r1
 3008 1c74 20300BE5 		str	r3, [fp, #-32]
 3009 1c78 1C400BE5 		str	r4, [fp, #-28]
 542:lab.c         ****     g_state.dX = (float)((lon-lon0)*r*cos(lat));
 3011              	.LM198:
 3012 1c7c 38004BE2 		sub	r0, fp, #56
 3013 1c80 030090E8 		ldmia	r0, {r0-r1}
 3014 1c84 20204BE2 		sub	r2, fp, #32
 3015 1c88 0C0092E8 		ldmia	r2, {r2-r3}
 3016 1c8c FEFFFFEB 		bl	__subdf3
 3017 1c90 0030A0E1 		mov	r3, r0
 3018 1c94 0140A0E1 		mov	r4, r1
 3019 1c98 0350A0E1 		mov	r5, r3
 3020 1c9c 0460A0E1 		mov	r6, r4
 3021 1ca0 3C001BE5 		ldr	r0, [fp, #-60]	@ float
 3022 1ca4 FEFFFFEB 		bl	__extendsfdf2
 3023 1ca8 0030A0E1 		mov	r3, r0
 3024 1cac 0140A0E1 		mov	r4, r1
 3025 1cb0 0500A0E1 		mov	r0, r5
 3026 1cb4 0610A0E1 		mov	r1, r6
 3027 1cb8 0320A0E1 		mov	r2, r3
 3028 1cbc 0430A0E1 		mov	r3, r4
 3029 1cc0 FEFFFFEB 		bl	__muldf3
 3030 1cc4 0030A0E1 		mov	r3, r0
 3031 1cc8 0140A0E1 		mov	r4, r1
 3032 1ccc 0350A0E1 		mov	r5, r3
 3033 1cd0 0460A0E1 		mov	r6, r4
 3034 1cd4 30004BE2 		sub	r0, fp, #48
 3035 1cd8 030090E8 		ldmia	r0, {r0-r1}
 3036 1cdc FEFFFFEB 		bl	cos
 3037 1ce0 0030A0E1 		mov	r3, r0
 3038 1ce4 0140A0E1 		mov	r4, r1
 3039 1ce8 0500A0E1 		mov	r0, r5
 3040 1cec 0610A0E1 		mov	r1, r6
 3041 1cf0 0320A0E1 		mov	r2, r3
 3042 1cf4 0430A0E1 		mov	r3, r4
 3043 1cf8 FEFFFFEB 		bl	__muldf3
 3044 1cfc 0030A0E1 		mov	r3, r0
 3045 1d00 0140A0E1 		mov	r4, r1
 3046 1d04 0300A0E1 		mov	r0, r3
 3047 1d08 0410A0E1 		mov	r1, r4
 3048 1d0c FEFFFFEB 		bl	__truncdfsf2
 3049 1d10 0020A0E1 		mov	r2, r0
 3050 1d14 88309FE5 		ldr	r3, .L77+28
 3051 1d18 042083E5 		str	r2, [r3, #4]	@ float
 543:lab.c         ****     g_state.dY = (float)(r*(lat-lat0));
 3053              	.LM199:
 3054 1d1c 3C001BE5 		ldr	r0, [fp, #-60]	@ float
 3055 1d20 FEFFFFEB 		bl	__extendsfdf2
 3056 1d24 0050A0E1 		mov	r5, r0
 3057 1d28 0160A0E1 		mov	r6, r1
 3058 1d2c 30004BE2 		sub	r0, fp, #48
 3059 1d30 030090E8 		ldmia	r0, {r0-r1}
 3060 1d34 28204BE2 		sub	r2, fp, #40
 3061 1d38 0C0092E8 		ldmia	r2, {r2-r3}
 3062 1d3c FEFFFFEB 		bl	__subdf3
 3063 1d40 0030A0E1 		mov	r3, r0
 3064 1d44 0140A0E1 		mov	r4, r1
 3065 1d48 0500A0E1 		mov	r0, r5
 3066 1d4c 0610A0E1 		mov	r1, r6
 3067 1d50 0320A0E1 		mov	r2, r3
 3068 1d54 0430A0E1 		mov	r3, r4
 3069 1d58 FEFFFFEB 		bl	__muldf3
 3070 1d5c 0030A0E1 		mov	r3, r0
 3071 1d60 0140A0E1 		mov	r4, r1
 3072 1d64 0300A0E1 		mov	r0, r3
 3073 1d68 0410A0E1 		mov	r1, r4
 3074 1d6c FEFFFFEB 		bl	__truncdfsf2
 3075 1d70 0020A0E1 		mov	r2, r0
 3076 1d74 28309FE5 		ldr	r3, .L77+28
 3077 1d78 082083E5 		str	r2, [r3, #8]	@ float
 544:lab.c         **** }
 3079              	.LM200:
 3080 1d7c 18D04BE2 		sub	sp, fp, #24
 3081 1d80 70689DE8 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 3082 1d84 1EFF2FE1 		bx	lr
 3083              	.L78:
 3084              		.align	2
 3085              	.L77:
 3086 1d88 D0126341 		.word	1097011920
 3087 1d8c 00000000 		.word	0
 3088 1d90 F9210940 		.word	1074340345
 3089 1d94 6E861BF0 		.word	-266631570
 3090 1d98 E8A4C24A 		.word	1254270184
 3091 1d9c 00000000 		.word	RO_ALL_Data
 3092 1da0 00000000 		.word	g_pinfo
 3093 1da4 00000000 		.word	g_state
 3102              	.Lscope12:
 3103              		.global	__floatsisf
 3104              		.align	2
 3106              		.global	constant_altitude_control
 3108              	constant_altitude_control:
 545:lab.c         **** 
 546:lab.c         **** 
 547:lab.c         **** // Altitude controlled by throttle
 548:lab.c         **** // roll, pitch, and yaw are controlled in the usual way
 549:lab.c         **** void constant_altitude_control(void) { //{{{1
 3110              	.LM201:
 3111              		@ Function supports interworking.
 3112              		@ args = 0, pretend = 0, frame = 96
 3113              		@ frame_needed = 1, uses_anonymous_args = 0
 3114 1da8 0DC0A0E1 		mov	ip, sp
 3115 1dac F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3116 1db0 04B04CE2 		sub	fp, ip, #4
 3117 1db4 60D04DE2 		sub	sp, sp, #96
 550:lab.c         ****     DataOutputsPerSecond = 10;
 3119              	.LM202:
 3120 1db8 A8249FE5 		ldr	r2, .L89+8
 3121 1dbc 0A30A0E3 		mov	r3, #10
 3122 1dc0 0030C2E5 		strb	r3, [r2, #0]
 551:lab.c         ****     msg_flag = (1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID);
 3124              	.LM203:
 3125 1dc4 A0249FE5 		ldr	r2, .L89+12
 3126 1dc8 8230A0E3 		mov	r3, #130
 3127 1dcc 003082E5 		str	r3, [r2, #0]
 552:lab.c         ****     //msg_flag = (1<<FMGPSSENSOR_ID);
 553:lab.c         ****     ////////////////////////////////////////////////////////
 554:lab.c         ****     ///////// COMPUTE CONTROL VECTOR HERE //////////////////
 555:lab.c         ****     float desPitch = (3.14159/180)*((60.0/4096)*(float)(RO_ALL_Data.channel[0])-30);
 3129              	.LM204:
 3130 1dd0 98349FE5 		ldr	r3, .L89+16
 3131 1dd4 B040D3E1 		ldrh	r4, [r3, #0]
 3132 1dd8 0438A0E1 		mov	r3, r4, asl #16
 3133 1ddc 4338A0E1 		mov	r3, r3, asr #16
 3134 1de0 0300A0E1 		mov	r0, r3
 3135 1de4 FEFFFFEB 		bl	__floatsisf
 3136 1de8 88000BE5 		str	r0, [fp, #-136]	@ float
 3137 1dec 0438A0E1 		mov	r3, r4, asl #16
 3138 1df0 4338A0E1 		mov	r3, r3, asr #16
 3139 1df4 000053E3 		cmp	r3, #0
 3140 1df8 040000AA 		bge	.L80
 3141 1dfc 88001BE5 		ldr	r0, [fp, #-136]	@ float
 3142 1e00 6C149FE5 		ldr	r1, .L89+20	@ float
 3143 1e04 FEFFFFEB 		bl	__addsf3
 3144 1e08 0030A0E1 		mov	r3, r0
 3145 1e0c 88300BE5 		str	r3, [fp, #-136]	@ float
 3146              	.L80:
 3147 1e10 88001BE5 		ldr	r0, [fp, #-136]	@ float
 3148 1e14 FEFFFFEB 		bl	__extendsfdf2
 3149 1e18 0030A0E1 		mov	r3, r0
 3150 1e1c 0140A0E1 		mov	r4, r1
 3151 1e20 0300A0E1 		mov	r0, r3
 3152 1e24 0410A0E1 		mov	r1, r4
 3153 1e28 FE25A0E3 		mov	r2, #1065353216
 3154 1e2c 0E2882E2 		add	r2, r2, #917504
 3155 1e30 0030A0E3 		mov	r3, #0
 3156 1e34 FEFFFFEB 		bl	__muldf3
 3157 1e38 0030A0E1 		mov	r3, r0
 3158 1e3c 0140A0E1 		mov	r4, r1
 3159 1e40 0300A0E1 		mov	r0, r3
 3160 1e44 0410A0E1 		mov	r1, r4
 3161 1e48 0121A0E3 		mov	r2, #1073741824
 3162 1e4c 3E2882E2 		add	r2, r2, #4063232
 3163 1e50 0030A0E3 		mov	r3, #0
 3164 1e54 FEFFFFEB 		bl	__subdf3
 3165 1e58 0030A0E1 		mov	r3, r0
 3166 1e5c 0140A0E1 		mov	r4, r1
 3167 1e60 0300A0E1 		mov	r0, r3
 3168 1e64 0410A0E1 		mov	r1, r4
 3169 1e68 3F2E8FE2 		adr	r2, .L89
 3170 1e6c 0C0092E8 		ldmia	r2, {r2-r3}
 3171 1e70 FEFFFFEB 		bl	__muldf3
 3172 1e74 0030A0E1 		mov	r3, r0
 3173 1e78 0140A0E1 		mov	r4, r1
 3174 1e7c 0300A0E1 		mov	r0, r3
 3175 1e80 0410A0E1 		mov	r1, r4
 3176 1e84 FEFFFFEB 		bl	__truncdfsf2
 3177 1e88 0030A0E1 		mov	r3, r0
 3178 1e8c 7C300BE5 		str	r3, [fp, #-124]	@ float
 556:lab.c         ****     float desRoll = (3.14159/180)*((60.0/4096)*(float)(RO_ALL_Data.channel[1])-30);
 3180              	.LM205:
 3181 1e90 D8339FE5 		ldr	r3, .L89+16
 3182 1e94 B240D3E1 		ldrh	r4, [r3, #2]
 3183 1e98 0438A0E1 		mov	r3, r4, asl #16
 3184 1e9c 4338A0E1 		mov	r3, r3, asr #16
 3185 1ea0 0300A0E1 		mov	r0, r3
 3186 1ea4 FEFFFFEB 		bl	__floatsisf
 3187 1ea8 84000BE5 		str	r0, [fp, #-132]	@ float
 3188 1eac 0438A0E1 		mov	r3, r4, asl #16
 3189 1eb0 4338A0E1 		mov	r3, r3, asr #16
 3190 1eb4 000053E3 		cmp	r3, #0
 3191 1eb8 040000AA 		bge	.L81
 3192 1ebc 84001BE5 		ldr	r0, [fp, #-132]	@ float
 3193 1ec0 AC139FE5 		ldr	r1, .L89+20	@ float
 3194 1ec4 FEFFFFEB 		bl	__addsf3
 3195 1ec8 0030A0E1 		mov	r3, r0
 3196 1ecc 84300BE5 		str	r3, [fp, #-132]	@ float
 3197              	.L81:
 3198 1ed0 84001BE5 		ldr	r0, [fp, #-132]	@ float
 3199 1ed4 FEFFFFEB 		bl	__extendsfdf2
 3200 1ed8 0030A0E1 		mov	r3, r0
 3201 1edc 0140A0E1 		mov	r4, r1
 3202 1ee0 0300A0E1 		mov	r0, r3
 3203 1ee4 0410A0E1 		mov	r1, r4
 3204 1ee8 FE25A0E3 		mov	r2, #1065353216
 3205 1eec 0E2882E2 		add	r2, r2, #917504
 3206 1ef0 0030A0E3 		mov	r3, #0
 3207 1ef4 FEFFFFEB 		bl	__muldf3
 3208 1ef8 0030A0E1 		mov	r3, r0
 3209 1efc 0140A0E1 		mov	r4, r1
 3210 1f00 0300A0E1 		mov	r0, r3
 3211 1f04 0410A0E1 		mov	r1, r4
 3212 1f08 0121A0E3 		mov	r2, #1073741824
 3213 1f0c 3E2882E2 		add	r2, r2, #4063232
 3214 1f10 0030A0E3 		mov	r3, #0
 3215 1f14 FEFFFFEB 		bl	__subdf3
 3216 1f18 0030A0E1 		mov	r3, r0
 3217 1f1c 0140A0E1 		mov	r4, r1
 3218 1f20 0300A0E1 		mov	r0, r3
 3219 1f24 0410A0E1 		mov	r1, r4
 3220 1f28 332E8FE2 		adr	r2, .L89
 3221 1f2c 0C0092E8 		ldmia	r2, {r2-r3}
 3222 1f30 FEFFFFEB 		bl	__muldf3
 3223 1f34 0030A0E1 		mov	r3, r0
 3224 1f38 0140A0E1 		mov	r4, r1
 3225 1f3c 0300A0E1 		mov	r0, r3
 3226 1f40 0410A0E1 		mov	r1, r4
 3227 1f44 FEFFFFEB 		bl	__truncdfsf2
 3228 1f48 0030A0E1 		mov	r3, r0
 3229 1f4c 78300BE5 		str	r3, [fp, #-120]	@ float
 557:lab.c         ****     //float desYaw = (3.14159/180)*((float)(RO_ALL_Data.channel[3]));
 558:lab.c         ****     float desYawRate = (3.14159/180)*((60.0/4096)*(float)(RO_ALL_Data.channel[3])-30.0);
 3231              	.LM206:
 3232 1f50 18339FE5 		ldr	r3, .L89+16
 3233 1f54 B640D3E1 		ldrh	r4, [r3, #6]
 3234 1f58 0438A0E1 		mov	r3, r4, asl #16
 3235 1f5c 4338A0E1 		mov	r3, r3, asr #16
 3236 1f60 0300A0E1 		mov	r0, r3
 3237 1f64 FEFFFFEB 		bl	__floatsisf
 3238 1f68 80000BE5 		str	r0, [fp, #-128]	@ float
 3239 1f6c 0438A0E1 		mov	r3, r4, asl #16
 3240 1f70 4338A0E1 		mov	r3, r3, asr #16
 3241 1f74 000053E3 		cmp	r3, #0
 3242 1f78 040000AA 		bge	.L82
 3243 1f7c 80001BE5 		ldr	r0, [fp, #-128]	@ float
 3244 1f80 EC129FE5 		ldr	r1, .L89+20	@ float
 3245 1f84 FEFFFFEB 		bl	__addsf3
 3246 1f88 0030A0E1 		mov	r3, r0
 3247 1f8c 80300BE5 		str	r3, [fp, #-128]	@ float
 3248              	.L82:
 3249 1f90 80001BE5 		ldr	r0, [fp, #-128]	@ float
 3250 1f94 FEFFFFEB 		bl	__extendsfdf2
 3251 1f98 0030A0E1 		mov	r3, r0
 3252 1f9c 0140A0E1 		mov	r4, r1
 3253 1fa0 0300A0E1 		mov	r0, r3
 3254 1fa4 0410A0E1 		mov	r1, r4
 3255 1fa8 FE25A0E3 		mov	r2, #1065353216
 3256 1fac 0E2882E2 		add	r2, r2, #917504
 3257 1fb0 0030A0E3 		mov	r3, #0
 3258 1fb4 FEFFFFEB 		bl	__muldf3
 3259 1fb8 0030A0E1 		mov	r3, r0
 3260 1fbc 0140A0E1 		mov	r4, r1
 3261 1fc0 0300A0E1 		mov	r0, r3
 3262 1fc4 0410A0E1 		mov	r1, r4
 3263 1fc8 0121A0E3 		mov	r2, #1073741824
 3264 1fcc 3E2882E2 		add	r2, r2, #4063232
 3265 1fd0 0030A0E3 		mov	r3, #0
 3266 1fd4 FEFFFFEB 		bl	__subdf3
 3267 1fd8 0030A0E1 		mov	r3, r0
 3268 1fdc 0140A0E1 		mov	r4, r1
 3269 1fe0 0300A0E1 		mov	r0, r3
 3270 1fe4 0410A0E1 		mov	r1, r4
 3271 1fe8 272E8FE2 		adr	r2, .L89
 3272 1fec 0C0092E8 		ldmia	r2, {r2-r3}
 3273 1ff0 FEFFFFEB 		bl	__muldf3
 3274 1ff4 0030A0E1 		mov	r3, r0
 3275 1ff8 0140A0E1 		mov	r4, r1
 3276 1ffc 0300A0E1 		mov	r0, r3
 3277 2000 0410A0E1 		mov	r1, r4
 3278 2004 FEFFFFEB 		bl	__truncdfsf2
 3279 2008 0030A0E1 		mov	r3, r0
 3280 200c 74300BE5 		str	r3, [fp, #-116]	@ float
 559:lab.c         ****     float desYaw = 0.0;
 3282              	.LM207:
 3283 2010 60329FE5 		ldr	r3, .L89+24	@ float
 3284 2014 70300BE5 		str	r3, [fp, #-112]	@ float
 560:lab.c         ****     //desYaw = desYaw + (3.14159/180)*((4/4095)*RO_ALL_Data.channel[3]-2);
 561:lab.c         ****     // Attitude inner loops:
 562:lab.c         ****     //float K00 = 0.88;
 563:lab.c         ****     //float K01 = 0.13;
 564:lab.c         ****     //float K10 = 0.88;
 565:lab.c         ****     //float K11 = 0.13;
 566:lab.c         ****     //float K20 = 0.31;
 567:lab.c         ****     float K00 = 1.0;
 3286              	.LM208:
 3287 2018 5C329FE5 		ldr	r3, .L89+28	@ float
 3288 201c 6C300BE5 		str	r3, [fp, #-108]	@ float
 568:lab.c         ****     float K01 = 0.2;
 3290              	.LM209:
 3291 2020 58329FE5 		ldr	r3, .L89+32	@ float
 3292 2024 68300BE5 		str	r3, [fp, #-104]	@ float
 569:lab.c         ****     float K10 = 1.0;
 3294              	.LM210:
 3295 2028 4C329FE5 		ldr	r3, .L89+28	@ float
 3296 202c 64300BE5 		str	r3, [fp, #-100]	@ float
 570:lab.c         ****     float K11 = 0.2;
 3298              	.LM211:
 3299 2030 48329FE5 		ldr	r3, .L89+32	@ float
 3300 2034 60300BE5 		str	r3, [fp, #-96]	@ float
 571:lab.c         ****     float K20 = 0.0;
 3302              	.LM212:
 3303 2038 38329FE5 		ldr	r3, .L89+24	@ float
 3304 203c 5C300BE5 		str	r3, [fp, #-92]	@ float
 572:lab.c         ****     //float K21 = 0.12;
 573:lab.c         ****     float K21 = 0.3;
 3306              	.LM213:
 3307 2040 3C329FE5 		ldr	r3, .L89+36	@ float
 3308 2044 58300BE5 		str	r3, [fp, #-88]	@ float
 574:lab.c         **** 
 575:lab.c         ****     float K02 = 1.0;
 3310              	.LM214:
 3311 2048 2C329FE5 		ldr	r3, .L89+28	@ float
 3312 204c 54300BE5 		str	r3, [fp, #-84]	@ float
 576:lab.c         ****     float K12 = 1.0;
 3314              	.LM215:
 3315 2050 24329FE5 		ldr	r3, .L89+28	@ float
 3316 2054 50300BE5 		str	r3, [fp, #-80]	@ float
 577:lab.c         **** 
 578:lab.c         ****     // compute desired roll pitch rates based on angle error
 579:lab.c         ****     float desRollRate = -K02 * (g_sensor.dPhi - desRoll);
 3318              	.LM216:
 3319 2058 54301BE5 		ldr	r3, [fp, #-84]
 3320 205c 024123E2 		eor	r4, r3, #-2147483648
 3321 2060 40329FE5 		ldr	r3, .L89+72
 3322 2064 043093E5 		ldr	r3, [r3, #4]	@ float
 3323 2068 0300A0E1 		mov	r0, r3
 3324 206c 78101BE5 		ldr	r1, [fp, #-120]	@ float
 3325 2070 FEFFFFEB 		bl	__subsf3
 3326 2074 0030A0E1 		mov	r3, r0
 3327 2078 0400A0E1 		mov	r0, r4
 3328 207c 0310A0E1 		mov	r1, r3
 3329 2080 FEFFFFEB 		bl	__mulsf3
 3330 2084 0030A0E1 		mov	r3, r0
 3331 2088 4C300BE5 		str	r3, [fp, #-76]	@ float
 580:lab.c         ****     float desPitchRate = -K12 * (g_sensor.dTheta - desPitch);
 3333              	.LM217:
 3334 208c 50301BE5 		ldr	r3, [fp, #-80]
 3335 2090 024123E2 		eor	r4, r3, #-2147483648
 3336 2094 0C329FE5 		ldr	r3, .L89+72
 3337 2098 083093E5 		ldr	r3, [r3, #8]	@ float
 3338 209c 0300A0E1 		mov	r0, r3
 3339 20a0 7C101BE5 		ldr	r1, [fp, #-124]	@ float
 3340 20a4 FEFFFFEB 		bl	__subsf3
 3341 20a8 0030A0E1 		mov	r3, r0
 3342 20ac 0400A0E1 		mov	r0, r4
 3343 20b0 0310A0E1 		mov	r1, r3
 3344 20b4 FEFFFFEB 		bl	__mulsf3
 3345 20b8 0030A0E1 		mov	r3, r0
 3346 20bc 48300BE5 		str	r3, [fp, #-72]	@ float
 581:lab.c         **** 
 582:lab.c         ****     // Attitude control
 583:lab.c         ****     g_u[0] = -K00 * (g_sensor.dPhi - desRoll) - K01 * (g_sensor.dP - desRollRate);
 3348              	.LM218:
 3349 20c0 6C301BE5 		ldr	r3, [fp, #-108]
 3350 20c4 024123E2 		eor	r4, r3, #-2147483648
 3351 20c8 D8319FE5 		ldr	r3, .L89+72
 3352 20cc 043093E5 		ldr	r3, [r3, #4]	@ float
 3353 20d0 0300A0E1 		mov	r0, r3
 3354 20d4 78101BE5 		ldr	r1, [fp, #-120]	@ float
 3355 20d8 FEFFFFEB 		bl	__subsf3
 3356 20dc 0030A0E1 		mov	r3, r0
 3357 20e0 0400A0E1 		mov	r0, r4
 3358 20e4 0310A0E1 		mov	r1, r3
 3359 20e8 FEFFFFEB 		bl	__mulsf3
 3360 20ec 0030A0E1 		mov	r3, r0
 3361 20f0 0340A0E1 		mov	r4, r3
 3362 20f4 AC319FE5 		ldr	r3, .L89+72
 3363 20f8 1C3093E5 		ldr	r3, [r3, #28]	@ float
 3364 20fc 0300A0E1 		mov	r0, r3
 3365 2100 4C101BE5 		ldr	r1, [fp, #-76]	@ float
 3366 2104 FEFFFFEB 		bl	__subsf3
 3367 2108 0030A0E1 		mov	r3, r0
 3368 210c 0300A0E1 		mov	r0, r3
 3369 2110 68101BE5 		ldr	r1, [fp, #-104]	@ float
 3370 2114 FEFFFFEB 		bl	__mulsf3
 3371 2118 0030A0E1 		mov	r3, r0
 3372 211c 0400A0E1 		mov	r0, r4
 3373 2120 0310A0E1 		mov	r1, r3
 3374 2124 FEFFFFEB 		bl	__subsf3
 3375 2128 0030A0E1 		mov	r3, r0
 3376 212c 0320A0E1 		mov	r2, r3
 3377 2130 7C319FE5 		ldr	r3, .L89+84
 3378 2134 002083E5 		str	r2, [r3, #0]	@ float
 584:lab.c         ****     g_u[1] = -K10 * (g_sensor.dTheta - desPitch) - K11 * (g_sensor.dQ - desPitchRate);
 3380              	.LM219:
 3381 2138 64301BE5 		ldr	r3, [fp, #-100]
 3382 213c 024123E2 		eor	r4, r3, #-2147483648
 3383 2140 60319FE5 		ldr	r3, .L89+72
 3384 2144 083093E5 		ldr	r3, [r3, #8]	@ float
 3385 2148 0300A0E1 		mov	r0, r3
 3386 214c 7C101BE5 		ldr	r1, [fp, #-124]	@ float
 3387 2150 FEFFFFEB 		bl	__subsf3
 3388 2154 0030A0E1 		mov	r3, r0
 3389 2158 0400A0E1 		mov	r0, r4
 3390 215c 0310A0E1 		mov	r1, r3
 3391 2160 FEFFFFEB 		bl	__mulsf3
 3392 2164 0030A0E1 		mov	r3, r0
 3393 2168 0340A0E1 		mov	r4, r3
 3394 216c 34319FE5 		ldr	r3, .L89+72
 3395 2170 203093E5 		ldr	r3, [r3, #32]	@ float
 3396 2174 0300A0E1 		mov	r0, r3
 3397 2178 48101BE5 		ldr	r1, [fp, #-72]	@ float
 3398 217c FEFFFFEB 		bl	__subsf3
 3399 2180 0030A0E1 		mov	r3, r0
 3400 2184 0300A0E1 		mov	r0, r3
 3401 2188 60101BE5 		ldr	r1, [fp, #-96]	@ float
 3402 218c FEFFFFEB 		bl	__mulsf3
 3403 2190 0030A0E1 		mov	r3, r0
 3404 2194 0400A0E1 		mov	r0, r4
 3405 2198 0310A0E1 		mov	r1, r3
 3406 219c FEFFFFEB 		bl	__subsf3
 3407 21a0 0030A0E1 		mov	r3, r0
 3408 21a4 0320A0E1 		mov	r2, r3
 3409 21a8 04319FE5 		ldr	r3, .L89+84
 3410 21ac 042083E5 		str	r2, [r3, #4]	@ float
 585:lab.c         ****     g_u[2] = -K20 * (g_sensor.dPsi - desYaw) - K21 * (g_sensor.dR - desYawRate);
 3412              	.LM220:
 3413 21b0 5C301BE5 		ldr	r3, [fp, #-92]
 3414 21b4 024123E2 		eor	r4, r3, #-2147483648
 3415 21b8 E8309FE5 		ldr	r3, .L89+72
 3416 21bc 0C3093E5 		ldr	r3, [r3, #12]	@ float
 3417 21c0 0300A0E1 		mov	r0, r3
 3418 21c4 70101BE5 		ldr	r1, [fp, #-112]	@ float
 3419 21c8 FEFFFFEB 		bl	__subsf3
 3420 21cc 0030A0E1 		mov	r3, r0
 3421 21d0 0400A0E1 		mov	r0, r4
 3422 21d4 0310A0E1 		mov	r1, r3
 3423 21d8 FEFFFFEB 		bl	__mulsf3
 3424 21dc 0030A0E1 		mov	r3, r0
 3425 21e0 0340A0E1 		mov	r4, r3
 3426 21e4 BC309FE5 		ldr	r3, .L89+72
 3427 21e8 243093E5 		ldr	r3, [r3, #36]	@ float
 3428 21ec 0300A0E1 		mov	r0, r3
 3429 21f0 74101BE5 		ldr	r1, [fp, #-116]	@ float
 3430 21f4 FEFFFFEB 		bl	__subsf3
 3431 21f8 0030A0E1 		mov	r3, r0
 3432 21fc 0300A0E1 		mov	r0, r3
 3433 2200 58101BE5 		ldr	r1, [fp, #-88]	@ float
 3434 2204 FEFFFFEB 		bl	__mulsf3
 3435 2208 0030A0E1 		mov	r3, r0
 3436 220c 0400A0E1 		mov	r0, r4
 3437 2210 0310A0E1 		mov	r1, r3
 3438 2214 FEFFFFEB 		bl	__subsf3
 3439 2218 0030A0E1 		mov	r3, r0
 3440 221c 0320A0E1 		mov	r2, r3
 3441 2220 8C309FE5 		ldr	r3, .L89+84
 3442 2224 082083E5 		str	r2, [r3, #8]	@ float
 586:lab.c         ****     //g_u[0] = 0;
 587:lab.c         ****     //g_u[1] = 0;
 588:lab.c         ****     //g_u[2] = 0;
 589:lab.c         **** 
 590:lab.c         ****     // Altitude control
 591:lab.c         ****     float Kpz = 10.0;
 3444              	.LM221:
 3445 2228 58309FE5 		ldr	r3, .L89+40	@ float
 3446 222c 44300BE5 		str	r3, [fp, #-68]	@ float
 592:lab.c         ****     float Kdz = 2.0;
 3448              	.LM222:
 3449 2230 54309FE5 		ldr	r3, .L89+44	@ float
 3450 2234 40300BE5 		str	r3, [fp, #-64]	@ float
 593:lab.c         ****     float Kiz = 0.1;
 3452              	.LM223:
 3453 2238 50309FE5 		ldr	r3, .L89+48	@ float
 3454 223c 3C300BE5 		str	r3, [fp, #-60]	@ float
 594:lab.c         ****     //float m = 0.69; // kg
 595:lab.c         ****     float m = 2.2; // kg
 3456              	.LM224:
 3457 2240 4C309FE5 		ldr	r3, .L89+52	@ float
 3458 2244 38300BE5 		str	r3, [fp, #-56]	@ float
 596:lab.c         ****     float g = 9.81; // gravity
 3460              	.LM225:
 3461 2248 48309FE5 		ldr	r3, .L89+56	@ float
 3462 224c 34300BE5 		str	r3, [fp, #-52]	@ float
 597:lab.c         ****     float z_desired = 0.25; // centimeters from ground
 3464              	.LM226:
 3465 2250 44309FE5 		ldr	r3, .L89+60	@ float
 3466 2254 30300BE5 		str	r3, [fp, #-48]	@ float
 598:lab.c         ****     //float z_desired = 0.2 + (0.4/4096)*(float)RO_ALL_Data.channel[2];
 599:lab.c         ****     float vz_desired = 0.0;
 3468              	.LM227:
 3469 2258 18309FE5 		ldr	r3, .L89+24	@ float
 3470 225c 160000EA 		b	.L90
 3471              	.L91:
 3472              		.align	2
 3473              	.L89:
 3474 2260 45DF913F 		.word	1066524485
 3475 2264 70E20DA5 		.word	-1525816720
 3476 2268 00000000 		.word	DataOutputsPerSecond
 3477 226c 00000000 		.word	msg_flag
 3478 2270 00000000 		.word	RO_ALL_Data
 3479 2274 00008047 		.word	1199570944
 3480 2278 00000000 		.word	0
 3481 227c 0000803F 		.word	1065353216
 3482 2280 CDCC4C3E 		.word	1045220557
 3483 2284 9A99993E 		.word	1050253722
 3484 2288 00002041 		.word	1092616192
 3485 228c 00000040 		.word	1073741824
 3486 2290 CDCCCC3D 		.word	1036831949
 3487 2294 CDCC0C40 		.word	1074580685
 3488 2298 C3F51C41 		.word	1092416963
 3489 229c 0000803E 		.word	1048576000
 3490 22a0 0000003F 		.word	1056964608
 3491 22a4 000000BF 		.word	-1090519040
 3492 22a8 00000000 		.word	g_sensor
 3493 22ac 00000000 		.word	g_state
 3494 22b0 00000000 		.word	ultrasound_z_error_sum
 3495 22b4 00000000 		.word	g_u
 3496 22b8 00000000 		.word	g_motorinput
 3497              	.L90:
 3498 22bc 2C300BE5 		str	r3, [fp, #-44]	@ float
 600:lab.c         ****     // Compute "integral error"
 601:lab.c         ****     if ((ultrasound_z_error_sum < .5) && (ultrasound_z_error_sum > -.5)) {
 3500              	.LM228:
 3501 22c0 18301FE5 		ldr	r3, .L89+80
 3502 22c4 003093E5 		ldr	r3, [r3, #0]	@ float
 3503 22c8 0300A0E1 		mov	r0, r3
 3504 22cc 34101FE5 		ldr	r1, .L89+64	@ float
 3505 22d0 FEFFFFEB 		bl	__ltsf2
 3506 22d4 0030A0E1 		mov	r3, r0
 3507 22d8 000053E3 		cmp	r3, #0
 3508 22dc 000000BA 		blt	.L85
 3509 22e0 180000EA 		b	.L83
 3510              	.L85:
 3511 22e4 3C301FE5 		ldr	r3, .L89+80
 3512 22e8 003093E5 		ldr	r3, [r3, #0]	@ float
 3513 22ec 0300A0E1 		mov	r0, r3
 3514 22f0 54101FE5 		ldr	r1, .L89+68	@ float
 3515 22f4 FEFFFFEB 		bl	__gtsf2
 3516 22f8 0030A0E1 		mov	r3, r0
 3517 22fc 000053E3 		cmp	r3, #0
 3518 2300 000000CA 		bgt	.L87
 3519 2304 0F0000EA 		b	.L83
 3520              	.L87:
 602:lab.c         ****         ultrasound_z_error_sum += g_state.dZ - z_desired;
 3522              	.LM229:
 3523 2308 64301FE5 		ldr	r3, .L89+76
 3524 230c 0C3093E5 		ldr	r3, [r3, #12]	@ float
 3525 2310 0300A0E1 		mov	r0, r3
 3526 2314 30101BE5 		ldr	r1, [fp, #-48]	@ float
 3527 2318 FEFFFFEB 		bl	__subsf3
 3528 231c 0030A0E1 		mov	r3, r0
 3529 2320 0320A0E1 		mov	r2, r3
 3530 2324 7C301FE5 		ldr	r3, .L89+80
 3531 2328 003093E5 		ldr	r3, [r3, #0]	@ float
 3532 232c 0200A0E1 		mov	r0, r2
 3533 2330 0310A0E1 		mov	r1, r3
 3534 2334 FEFFFFEB 		bl	__addsf3
 3535 2338 0030A0E1 		mov	r3, r0
 3536 233c 0320A0E1 		mov	r2, r3
 3537 2340 98301FE5 		ldr	r3, .L89+80
 3538 2344 002083E5 		str	r2, [r3, #0]	@ float
 3539              	.L83:
 603:lab.c         ****     }
 604:lab.c         ****     g_u[3] = m*g - Kpz * (g_state.dZ * cos(g_sensor.dPhi) * cos(g_sensor.dTheta) - z_desired) - Kdz
 3541              	.LM230:
 3542 2348 38001BE5 		ldr	r0, [fp, #-56]	@ float
 3543 234c 34101BE5 		ldr	r1, [fp, #-52]	@ float
 3544 2350 FEFFFFEB 		bl	__mulsf3
 3545 2354 0030A0E1 		mov	r3, r0
 3546 2358 0300A0E1 		mov	r0, r3
 3547 235c FEFFFFEB 		bl	__extendsfdf2
 3548 2360 0070A0E1 		mov	r7, r0
 3549 2364 0180A0E1 		mov	r8, r1
 3550 2368 44001BE5 		ldr	r0, [fp, #-68]	@ float
 3551 236c FEFFFFEB 		bl	__extendsfdf2
 3552 2370 0090A0E1 		mov	r9, r0
 3553 2374 01A0A0E1 		mov	sl, r1
 3554 2378 D4301FE5 		ldr	r3, .L89+76
 3555 237c 0C3093E5 		ldr	r3, [r3, #12]	@ float
 3556 2380 0300A0E1 		mov	r0, r3
 3557 2384 FEFFFFEB 		bl	__extendsfdf2
 3558 2388 0050A0E1 		mov	r5, r0
 3559 238c 0160A0E1 		mov	r6, r1
 3560 2390 F0301FE5 		ldr	r3, .L89+72
 3561 2394 043093E5 		ldr	r3, [r3, #4]	@ float
 3562 2398 0300A0E1 		mov	r0, r3
 3563 239c FEFFFFEB 		bl	__extendsfdf2
 3564 23a0 0030A0E1 		mov	r3, r0
 3565 23a4 0140A0E1 		mov	r4, r1
 3566 23a8 0300A0E1 		mov	r0, r3
 3567 23ac 0410A0E1 		mov	r1, r4
 3568 23b0 FEFFFFEB 		bl	cos
 3569 23b4 0030A0E1 		mov	r3, r0
 3570 23b8 0140A0E1 		mov	r4, r1
 3571 23bc 0500A0E1 		mov	r0, r5
 3572 23c0 0610A0E1 		mov	r1, r6
 3573 23c4 0320A0E1 		mov	r2, r3
 3574 23c8 0430A0E1 		mov	r3, r4
 3575 23cc FEFFFFEB 		bl	__muldf3
 3576 23d0 0030A0E1 		mov	r3, r0
 3577 23d4 0140A0E1 		mov	r4, r1
 3578 23d8 0350A0E1 		mov	r5, r3
 3579 23dc 0460A0E1 		mov	r6, r4
 3580 23e0 40311FE5 		ldr	r3, .L89+72
 3581 23e4 083093E5 		ldr	r3, [r3, #8]	@ float
 3582 23e8 0300A0E1 		mov	r0, r3
 3583 23ec FEFFFFEB 		bl	__extendsfdf2
 3584 23f0 0030A0E1 		mov	r3, r0
 3585 23f4 0140A0E1 		mov	r4, r1
 3586 23f8 0300A0E1 		mov	r0, r3
 3587 23fc 0410A0E1 		mov	r1, r4
 3588 2400 FEFFFFEB 		bl	cos
 3589 2404 0030A0E1 		mov	r3, r0
 3590 2408 0140A0E1 		mov	r4, r1
 3591 240c 0500A0E1 		mov	r0, r5
 3592 2410 0610A0E1 		mov	r1, r6
 3593 2414 0320A0E1 		mov	r2, r3
 3594 2418 0430A0E1 		mov	r3, r4
 3595 241c FEFFFFEB 		bl	__muldf3
 3596 2420 0030A0E1 		mov	r3, r0
 3597 2424 0140A0E1 		mov	r4, r1
 3598 2428 0350A0E1 		mov	r5, r3
 3599 242c 0460A0E1 		mov	r6, r4
 3600 2430 30001BE5 		ldr	r0, [fp, #-48]	@ float
 3601 2434 FEFFFFEB 		bl	__extendsfdf2
 3602 2438 0030A0E1 		mov	r3, r0
 3603 243c 0140A0E1 		mov	r4, r1
 3604 2440 0500A0E1 		mov	r0, r5
 3605 2444 0610A0E1 		mov	r1, r6
 3606 2448 0320A0E1 		mov	r2, r3
 3607 244c 0430A0E1 		mov	r3, r4
 3608 2450 FEFFFFEB 		bl	__subdf3
 3609 2454 0030A0E1 		mov	r3, r0
 3610 2458 0140A0E1 		mov	r4, r1
 3611 245c 0900A0E1 		mov	r0, r9
 3612 2460 0A10A0E1 		mov	r1, sl
 3613 2464 0320A0E1 		mov	r2, r3
 3614 2468 0430A0E1 		mov	r3, r4
 3615 246c FEFFFFEB 		bl	__muldf3
 3616 2470 0030A0E1 		mov	r3, r0
 3617 2474 0140A0E1 		mov	r4, r1
 3618 2478 0700A0E1 		mov	r0, r7
 3619 247c 0810A0E1 		mov	r1, r8
 3620 2480 0320A0E1 		mov	r2, r3
 3621 2484 0430A0E1 		mov	r3, r4
 3622 2488 FEFFFFEB 		bl	__subdf3
 3623 248c 0030A0E1 		mov	r3, r0
 3624 2490 0140A0E1 		mov	r4, r1
 3625 2494 0350A0E1 		mov	r5, r3
 3626 2498 0460A0E1 		mov	r6, r4
 3627 249c F8311FE5 		ldr	r3, .L89+76
 3628 24a0 183093E5 		ldr	r3, [r3, #24]	@ float
 3629 24a4 0300A0E1 		mov	r0, r3
 3630 24a8 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 3631 24ac FEFFFFEB 		bl	__subsf3
 3632 24b0 0030A0E1 		mov	r3, r0
 3633 24b4 0300A0E1 		mov	r0, r3
 3634 24b8 40101BE5 		ldr	r1, [fp, #-64]	@ float
 3635 24bc FEFFFFEB 		bl	__mulsf3
 3636 24c0 0030A0E1 		mov	r3, r0
 3637 24c4 0300A0E1 		mov	r0, r3
 3638 24c8 FEFFFFEB 		bl	__extendsfdf2
 3639 24cc 0030A0E1 		mov	r3, r0
 3640 24d0 0140A0E1 		mov	r4, r1
 3641 24d4 0500A0E1 		mov	r0, r5
 3642 24d8 0610A0E1 		mov	r1, r6
 3643 24dc 0320A0E1 		mov	r2, r3
 3644 24e0 0430A0E1 		mov	r3, r4
 3645 24e4 FEFFFFEB 		bl	__subdf3
 3646 24e8 0030A0E1 		mov	r3, r0
 3647 24ec 0140A0E1 		mov	r4, r1
 3648 24f0 0350A0E1 		mov	r5, r3
 3649 24f4 0460A0E1 		mov	r6, r4
 3650 24f8 50321FE5 		ldr	r3, .L89+80
 3651 24fc 003093E5 		ldr	r3, [r3, #0]	@ float
 3652 2500 0300A0E1 		mov	r0, r3
 3653 2504 3C101BE5 		ldr	r1, [fp, #-60]	@ float
 3654 2508 FEFFFFEB 		bl	__mulsf3
 3655 250c 0030A0E1 		mov	r3, r0
 3656 2510 0300A0E1 		mov	r0, r3
 3657 2514 FEFFFFEB 		bl	__extendsfdf2
 3658 2518 0030A0E1 		mov	r3, r0
 3659 251c 0140A0E1 		mov	r4, r1
 3660 2520 0500A0E1 		mov	r0, r5
 3661 2524 0610A0E1 		mov	r1, r6
 3662 2528 0320A0E1 		mov	r2, r3
 3663 252c 0430A0E1 		mov	r3, r4
 3664 2530 FEFFFFEB 		bl	__subdf3
 3665 2534 0030A0E1 		mov	r3, r0
 3666 2538 0140A0E1 		mov	r4, r1
 3667 253c 0300A0E1 		mov	r0, r3
 3668 2540 0410A0E1 		mov	r1, r4
 3669 2544 FEFFFFEB 		bl	__truncdfsf2
 3670 2548 0020A0E1 		mov	r2, r0
 3671 254c A0321FE5 		ldr	r3, .L89+84
 3672 2550 0C2083E5 		str	r2, [r3, #12]	@ float
 605:lab.c         ****     //g_u[3] = m*g;
 606:lab.c         **** 
 607:lab.c         **** 
 608:lab.c         ****     g_motorinput.dU1 = g_u[0];
 3674              	.LM231:
 3675 2554 A8321FE5 		ldr	r3, .L89+84
 3676 2558 002093E5 		ldr	r2, [r3, #0]	@ float
 3677 255c AC321FE5 		ldr	r3, .L89+88
 3678 2560 042083E5 		str	r2, [r3, #4]	@ float
 609:lab.c         ****     g_motorinput.dU2 = g_u[1];
 3680              	.LM232:
 3681 2564 B8321FE5 		ldr	r3, .L89+84
 3682 2568 042093E5 		ldr	r2, [r3, #4]	@ float
 3683 256c BC321FE5 		ldr	r3, .L89+88
 3684 2570 082083E5 		str	r2, [r3, #8]	@ float
 610:lab.c         ****     g_motorinput.dU3 = g_u[2];
 3686              	.LM233:
 3687 2574 C8321FE5 		ldr	r3, .L89+84
 3688 2578 082093E5 		ldr	r2, [r3, #8]	@ float
 3689 257c CC321FE5 		ldr	r3, .L89+88
 3690 2580 0C2083E5 		str	r2, [r3, #12]	@ float
 611:lab.c         ****     g_motorinput.dU4 = g_u[3];   //6.77 + g_u[3];
 3692              	.LM234:
 3693 2584 D8321FE5 		ldr	r3, .L89+84
 3694 2588 0C2093E5 		ldr	r2, [r3, #12]	@ float
 3695 258c DC321FE5 		ldr	r3, .L89+88
 3696 2590 102083E5 		str	r2, [r3, #16]	@ float
 612:lab.c         **** 
 613:lab.c         **** 
 614:lab.c         ****     /////////////////////////////////////////////////////////
 615:lab.c         **** 
 616:lab.c         ****     AE483_send_control();
 3698              	.LM235:
 3699 2594 FEFFFFEB 		bl	AE483_send_control
 617:lab.c         **** 
 618:lab.c         **** }
 3701              	.LM236:
 3702 2598 28D04BE2 		sub	sp, fp, #40
 3703 259c F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 3704 25a0 1EFF2FE1 		bx	lr
 3729              	.Lscope13:
 3730              		.align	2
 3732              		.global	ultrasound_control
 3734              	ultrasound_control:
 619:lab.c         **** 
 620:lab.c         **** void ultrasound_control(void) { //{{{1
 3736              	.LM237:
 3737              		@ Function supports interworking.
 3738              		@ args = 0, pretend = 0, frame = 52
 3739              		@ frame_needed = 1, uses_anonymous_args = 0
 3740 25a4 0DC0A0E1 		mov	ip, sp
 3741 25a8 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 3742 25ac 04B04CE2 		sub	fp, ip, #4
 3743 25b0 34D04DE2 		sub	sp, sp, #52
 621:lab.c         ****     DataOutputsPerSecond = 5;
 3745              	.LM238:
 3746 25b4 60239FE5 		ldr	r2, .L99
 3747 25b8 0530A0E3 		mov	r3, #5
 3748 25bc 0030C2E5 		strb	r3, [r2, #0]
 622:lab.c         ****     msg_flag = (1<<FMGPSSENSOR_ID); // | (1<<FMMOTORINPUT_ID);
 3750              	.LM239:
 3751 25c0 58239FE5 		ldr	r2, .L99+4
 3752 25c4 2030A0E3 		mov	r3, #32
 3753 25c8 003082E5 		str	r3, [r2, #0]
 623:lab.c         ****     ////////////////////////////////////////////////////////
 624:lab.c         ****     ///////// COMPUTE CONTROL VECTOR HERE //////////////////
 625:lab.c         **** 
 626:lab.c         ****     // Attitude inner loops:
 627:lab.c         ****     float K00 = 0.88;
 3755              	.LM240:
 3756 25cc 50339FE5 		ldr	r3, .L99+8	@ float
 3757 25d0 44300BE5 		str	r3, [fp, #-68]	@ float
 628:lab.c         ****     float K01 = 0.13;
 3759              	.LM241:
 3760 25d4 4C339FE5 		ldr	r3, .L99+12	@ float
 3761 25d8 40300BE5 		str	r3, [fp, #-64]	@ float
 629:lab.c         ****     float K10 = 0.88;
 3763              	.LM242:
 3764 25dc 40339FE5 		ldr	r3, .L99+8	@ float
 3765 25e0 3C300BE5 		str	r3, [fp, #-60]	@ float
 630:lab.c         ****     float K11 = 0.13;
 3767              	.LM243:
 3768 25e4 3C339FE5 		ldr	r3, .L99+12	@ float
 3769 25e8 38300BE5 		str	r3, [fp, #-56]	@ float
 631:lab.c         ****     float K20 = 0.31;
 3771              	.LM244:
 3772 25ec 38339FE5 		ldr	r3, .L99+16	@ float
 3773 25f0 34300BE5 		str	r3, [fp, #-52]	@ float
 632:lab.c         ****     float K21 = 0.12;
 3775              	.LM245:
 3776 25f4 34339FE5 		ldr	r3, .L99+20	@ float
 3777 25f8 30300BE5 		str	r3, [fp, #-48]	@ float
 633:lab.c         ****     // Attitude control
 634:lab.c         ****     g_u[0] = -K00 * (g_sensor.dPhi - u_outer.roll_desired) - K01 * (g_sensor.dP);
 3779              	.LM246:
 3780 25fc 44301BE5 		ldr	r3, [fp, #-68]
 3781 2600 024123E2 		eor	r4, r3, #-2147483648
 3782 2604 28339FE5 		ldr	r3, .L99+24
 3783 2608 042093E5 		ldr	r2, [r3, #4]	@ float
 3784 260c 24339FE5 		ldr	r3, .L99+28
 3785 2610 003093E5 		ldr	r3, [r3, #0]	@ float
 3786 2614 0200A0E1 		mov	r0, r2
 3787 2618 0310A0E1 		mov	r1, r3
 3788 261c FEFFFFEB 		bl	__subsf3
 3789 2620 0030A0E1 		mov	r3, r0
 3790 2624 0400A0E1 		mov	r0, r4
 3791 2628 0310A0E1 		mov	r1, r3
 3792 262c FEFFFFEB 		bl	__mulsf3
 3793 2630 0030A0E1 		mov	r3, r0
 3794 2634 0340A0E1 		mov	r4, r3
 3795 2638 F4329FE5 		ldr	r3, .L99+24
 3796 263c 1C3093E5 		ldr	r3, [r3, #28]	@ float
 3797 2640 0300A0E1 		mov	r0, r3
 3798 2644 40101BE5 		ldr	r1, [fp, #-64]	@ float
 3799 2648 FEFFFFEB 		bl	__mulsf3
 3800 264c 0030A0E1 		mov	r3, r0
 3801 2650 0400A0E1 		mov	r0, r4
 3802 2654 0310A0E1 		mov	r1, r3
 3803 2658 FEFFFFEB 		bl	__subsf3
 3804 265c 0030A0E1 		mov	r3, r0
 3805 2660 0320A0E1 		mov	r2, r3
 3806 2664 D0329FE5 		ldr	r3, .L99+32
 3807 2668 002083E5 		str	r2, [r3, #0]	@ float
 635:lab.c         ****     g_u[1] = -K10 * (g_sensor.dTheta - u_outer.pitch_desired) - K11 * (g_sensor.dQ);
 3809              	.LM247:
 3810 266c 3C301BE5 		ldr	r3, [fp, #-60]
 3811 2670 024123E2 		eor	r4, r3, #-2147483648
 3812 2674 B8329FE5 		ldr	r3, .L99+24
 3813 2678 082093E5 		ldr	r2, [r3, #8]	@ float
 3814 267c B4329FE5 		ldr	r3, .L99+28
 3815 2680 043093E5 		ldr	r3, [r3, #4]	@ float
 3816 2684 0200A0E1 		mov	r0, r2
 3817 2688 0310A0E1 		mov	r1, r3
 3818 268c FEFFFFEB 		bl	__subsf3
 3819 2690 0030A0E1 		mov	r3, r0
 3820 2694 0400A0E1 		mov	r0, r4
 3821 2698 0310A0E1 		mov	r1, r3
 3822 269c FEFFFFEB 		bl	__mulsf3
 3823 26a0 0030A0E1 		mov	r3, r0
 3824 26a4 0340A0E1 		mov	r4, r3
 3825 26a8 84329FE5 		ldr	r3, .L99+24
 3826 26ac 203093E5 		ldr	r3, [r3, #32]	@ float
 3827 26b0 0300A0E1 		mov	r0, r3
 3828 26b4 38101BE5 		ldr	r1, [fp, #-56]	@ float
 3829 26b8 FEFFFFEB 		bl	__mulsf3
 3830 26bc 0030A0E1 		mov	r3, r0
 3831 26c0 0400A0E1 		mov	r0, r4
 3832 26c4 0310A0E1 		mov	r1, r3
 3833 26c8 FEFFFFEB 		bl	__subsf3
 3834 26cc 0030A0E1 		mov	r3, r0
 3835 26d0 0320A0E1 		mov	r2, r3
 3836 26d4 60329FE5 		ldr	r3, .L99+32
 3837 26d8 042083E5 		str	r2, [r3, #4]	@ float
 636:lab.c         ****     g_u[2] = -K20 * (g_sensor.dPsi - u_outer.yaw_desired) - K21 * (g_sensor.dR);
 3839              	.LM248:
 3840 26dc 34301BE5 		ldr	r3, [fp, #-52]
 3841 26e0 024123E2 		eor	r4, r3, #-2147483648
 3842 26e4 48329FE5 		ldr	r3, .L99+24
 3843 26e8 0C2093E5 		ldr	r2, [r3, #12]	@ float
 3844 26ec 44329FE5 		ldr	r3, .L99+28
 3845 26f0 083093E5 		ldr	r3, [r3, #8]	@ float
 3846 26f4 0200A0E1 		mov	r0, r2
 3847 26f8 0310A0E1 		mov	r1, r3
 3848 26fc FEFFFFEB 		bl	__subsf3
 3849 2700 0030A0E1 		mov	r3, r0
 3850 2704 0400A0E1 		mov	r0, r4
 3851 2708 0310A0E1 		mov	r1, r3
 3852 270c FEFFFFEB 		bl	__mulsf3
 3853 2710 0030A0E1 		mov	r3, r0
 3854 2714 0340A0E1 		mov	r4, r3
 3855 2718 14329FE5 		ldr	r3, .L99+24
 3856 271c 243093E5 		ldr	r3, [r3, #36]	@ float
 3857 2720 0300A0E1 		mov	r0, r3
 3858 2724 30101BE5 		ldr	r1, [fp, #-48]	@ float
 3859 2728 FEFFFFEB 		bl	__mulsf3
 3860 272c 0030A0E1 		mov	r3, r0
 3861 2730 0400A0E1 		mov	r0, r4
 3862 2734 0310A0E1 		mov	r1, r3
 3863 2738 FEFFFFEB 		bl	__subsf3
 3864 273c 0030A0E1 		mov	r3, r0
 3865 2740 0320A0E1 		mov	r2, r3
 3866 2744 F0319FE5 		ldr	r3, .L99+32
 3867 2748 082083E5 		str	r2, [r3, #8]	@ float
 637:lab.c         **** 
 638:lab.c         ****     // Altitude control
 639:lab.c         ****     float Kpz = 4.0;
 3869              	.LM249:
 3870 274c EC319FE5 		ldr	r3, .L99+36	@ float
 3871 2750 2C300BE5 		str	r3, [fp, #-44]	@ float
 640:lab.c         ****     float Kdz = 2.0;
 3873              	.LM250:
 3874 2754 E8319FE5 		ldr	r3, .L99+40	@ float
 3875 2758 28300BE5 		str	r3, [fp, #-40]	@ float
 641:lab.c         ****     float Kiz = 0.05;
 3877              	.LM251:
 3878 275c E4319FE5 		ldr	r3, .L99+44	@ float
 3879 2760 24300BE5 		str	r3, [fp, #-36]	@ float
 642:lab.c         ****     float m = 0.69; // kg
 3881              	.LM252:
 3882 2764 E0319FE5 		ldr	r3, .L99+48	@ float
 3883 2768 20300BE5 		str	r3, [fp, #-32]	@ float
 643:lab.c         ****     float g = 9.81; // gravity
 3885              	.LM253:
 3886 276c DC319FE5 		ldr	r3, .L99+52	@ float
 3887 2770 1C300BE5 		str	r3, [fp, #-28]	@ float
 644:lab.c         ****     float z_desired = 0.2; // centimeters from ground
 3889              	.LM254:
 3890 2774 D8319FE5 		ldr	r3, .L99+56	@ float
 3891 2778 18300BE5 		str	r3, [fp, #-24]	@ float
 645:lab.c         ****     float vz_desired = 0.0;
 3893              	.LM255:
 3894 277c D4319FE5 		ldr	r3, .L99+60	@ float
 3895 2780 14300BE5 		str	r3, [fp, #-20]	@ float
 646:lab.c         ****     // Compute "integral error"
 647:lab.c         ****     if ((ultrasound_z_error_sum < .5) && (ultrasound_z_error_sum > -.5)) {
 3897              	.LM256:
 3898 2784 D0319FE5 		ldr	r3, .L99+64
 3899 2788 003093E5 		ldr	r3, [r3, #0]	@ float
 3900 278c 0300A0E1 		mov	r0, r3
 3901 2790 C8119FE5 		ldr	r1, .L99+68	@ float
 3902 2794 FEFFFFEB 		bl	__ltsf2
 3903 2798 0030A0E1 		mov	r3, r0
 3904 279c 000053E3 		cmp	r3, #0
 3905 27a0 000000BA 		blt	.L95
 3906 27a4 180000EA 		b	.L93
 3907              	.L95:
 3908 27a8 AC319FE5 		ldr	r3, .L99+64
 3909 27ac 003093E5 		ldr	r3, [r3, #0]	@ float
 3910 27b0 0300A0E1 		mov	r0, r3
 3911 27b4 A8119FE5 		ldr	r1, .L99+72	@ float
 3912 27b8 FEFFFFEB 		bl	__gtsf2
 3913 27bc 0030A0E1 		mov	r3, r0
 3914 27c0 000053E3 		cmp	r3, #0
 3915 27c4 000000CA 		bgt	.L97
 3916 27c8 0F0000EA 		b	.L93
 3917              	.L97:
 648:lab.c         ****         ultrasound_z_error_sum += g_state.dZ - z_desired;
 3919              	.LM257:
 3920 27cc 94319FE5 		ldr	r3, .L99+76
 3921 27d0 0C3093E5 		ldr	r3, [r3, #12]	@ float
 3922 27d4 0300A0E1 		mov	r0, r3
 3923 27d8 18101BE5 		ldr	r1, [fp, #-24]	@ float
 3924 27dc FEFFFFEB 		bl	__subsf3
 3925 27e0 0030A0E1 		mov	r3, r0
 3926 27e4 0320A0E1 		mov	r2, r3
 3927 27e8 6C319FE5 		ldr	r3, .L99+64
 3928 27ec 003093E5 		ldr	r3, [r3, #0]	@ float
 3929 27f0 0200A0E1 		mov	r0, r2
 3930 27f4 0310A0E1 		mov	r1, r3
 3931 27f8 FEFFFFEB 		bl	__addsf3
 3932 27fc 0030A0E1 		mov	r3, r0
 3933 2800 0320A0E1 		mov	r2, r3
 3934 2804 50319FE5 		ldr	r3, .L99+64
 3935 2808 002083E5 		str	r2, [r3, #0]	@ float
 3936              	.L93:
 649:lab.c         ****     }
 650:lab.c         ****     g_u[3] = m*g - Kpz * (g_state.dZ - z_desired) - Kdz * (g_state.dVz - vz_desired) - Kiz * (ultra
 3938              	.LM258:
 3939 280c 20001BE5 		ldr	r0, [fp, #-32]	@ float
 3940 2810 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 3941 2814 FEFFFFEB 		bl	__mulsf3
 3942 2818 0030A0E1 		mov	r3, r0
 3943 281c 0340A0E1 		mov	r4, r3
 3944 2820 40319FE5 		ldr	r3, .L99+76
 3945 2824 0C3093E5 		ldr	r3, [r3, #12]	@ float
 3946 2828 0300A0E1 		mov	r0, r3
 3947 282c 18101BE5 		ldr	r1, [fp, #-24]	@ float
 3948 2830 FEFFFFEB 		bl	__subsf3
 3949 2834 0030A0E1 		mov	r3, r0
 3950 2838 0300A0E1 		mov	r0, r3
 3951 283c 2C101BE5 		ldr	r1, [fp, #-44]	@ float
 3952 2840 FEFFFFEB 		bl	__mulsf3
 3953 2844 0030A0E1 		mov	r3, r0
 3954 2848 0400A0E1 		mov	r0, r4
 3955 284c 0310A0E1 		mov	r1, r3
 3956 2850 FEFFFFEB 		bl	__subsf3
 3957 2854 0030A0E1 		mov	r3, r0
 3958 2858 0340A0E1 		mov	r4, r3
 3959 285c 04319FE5 		ldr	r3, .L99+76
 3960 2860 183093E5 		ldr	r3, [r3, #24]	@ float
 3961 2864 0300A0E1 		mov	r0, r3
 3962 2868 14101BE5 		ldr	r1, [fp, #-20]	@ float
 3963 286c FEFFFFEB 		bl	__subsf3
 3964 2870 0030A0E1 		mov	r3, r0
 3965 2874 0300A0E1 		mov	r0, r3
 3966 2878 28101BE5 		ldr	r1, [fp, #-40]	@ float
 3967 287c FEFFFFEB 		bl	__mulsf3
 3968 2880 0030A0E1 		mov	r3, r0
 3969 2884 0400A0E1 		mov	r0, r4
 3970 2888 0310A0E1 		mov	r1, r3
 3971 288c FEFFFFEB 		bl	__subsf3
 3972 2890 0030A0E1 		mov	r3, r0
 3973 2894 0340A0E1 		mov	r4, r3
 3974 2898 BC309FE5 		ldr	r3, .L99+64
 3975 289c 003093E5 		ldr	r3, [r3, #0]	@ float
 3976 28a0 0300A0E1 		mov	r0, r3
 3977 28a4 24101BE5 		ldr	r1, [fp, #-36]	@ float
 3978 28a8 FEFFFFEB 		bl	__mulsf3
 3979 28ac 0030A0E1 		mov	r3, r0
 3980 28b0 0400A0E1 		mov	r0, r4
 3981 28b4 0310A0E1 		mov	r1, r3
 3982 28b8 FEFFFFEB 		bl	__subsf3
 3983 28bc 0030A0E1 		mov	r3, r0
 3984 28c0 0320A0E1 		mov	r2, r3
 3985 28c4 70309FE5 		ldr	r3, .L99+32
 3986 28c8 0C2083E5 		str	r2, [r3, #12]	@ float
 651:lab.c         ****     //g_u[3] = u_outer.thrust_desired;
 652:lab.c         ****     //g_u[3] = 3.0;//7.8;
 653:lab.c         **** 
 654:lab.c         ****     g_motorinput.dU1 = g_u[0];
 3988              	.LM259:
 3989 28cc 68309FE5 		ldr	r3, .L99+32
 3990 28d0 002093E5 		ldr	r2, [r3, #0]	@ float
 3991 28d4 90309FE5 		ldr	r3, .L99+80
 3992 28d8 042083E5 		str	r2, [r3, #4]	@ float
 655:lab.c         ****     g_motorinput.dU2 = g_u[1];
 3994              	.LM260:
 3995 28dc 58309FE5 		ldr	r3, .L99+32
 3996 28e0 042093E5 		ldr	r2, [r3, #4]	@ float
 3997 28e4 80309FE5 		ldr	r3, .L99+80
 3998 28e8 082083E5 		str	r2, [r3, #8]	@ float
 656:lab.c         ****     g_motorinput.dU3 = g_u[2];
 4000              	.LM261:
 4001 28ec 48309FE5 		ldr	r3, .L99+32
 4002 28f0 082093E5 		ldr	r2, [r3, #8]	@ float
 4003 28f4 70309FE5 		ldr	r3, .L99+80
 4004 28f8 0C2083E5 		str	r2, [r3, #12]	@ float
 657:lab.c         ****     g_motorinput.dU4 = g_u[3];   //6.77 + g_u[3];
 4006              	.LM262:
 4007 28fc 38309FE5 		ldr	r3, .L99+32
 4008 2900 0C2093E5 		ldr	r2, [r3, #12]	@ float
 4009 2904 60309FE5 		ldr	r3, .L99+80
 4010 2908 102083E5 		str	r2, [r3, #16]	@ float
 658:lab.c         **** 
 659:lab.c         **** 
 660:lab.c         ****     /////////////////////////////////////////////////////////
 661:lab.c         **** 
 662:lab.c         ****     AE483_send_control();
 4012              	.LM263:
 4013 290c FEFFFFEB 		bl	AE483_send_control
 663:lab.c         **** 
 664:lab.c         **** }
 4015              	.LM264:
 4016 2910 10D04BE2 		sub	sp, fp, #16
 4017 2914 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 4018 2918 1EFF2FE1 		bx	lr
 4019              	.L100:
 4020              		.align	2
 4021              	.L99:
 4022 291c 00000000 		.word	DataOutputsPerSecond
 4023 2920 00000000 		.word	msg_flag
 4024 2924 AE47613F 		.word	1063339950
 4025 2928 B81E053E 		.word	1040522936
 4026 292c 52B89E3E 		.word	1050589266
 4027 2930 8FC2F53D 		.word	1039516303
 4028 2934 00000000 		.word	g_sensor
 4029 2938 00000000 		.word	u_outer
 4030 293c 00000000 		.word	g_u
 4031 2940 00008040 		.word	1082130432
 4032 2944 00000040 		.word	1073741824
 4033 2948 CDCC4C3D 		.word	1028443341
 4034 294c D7A3303F 		.word	1060152279
 4035 2950 C3F51C41 		.word	1092416963
 4036 2954 CDCC4C3E 		.word	1045220557
 4037 2958 00000000 		.word	0
 4038 295c 00000000 		.word	ultrasound_z_error_sum
 4039 2960 0000003F 		.word	1056964608
 4040 2964 000000BF 		.word	-1090519040
 4041 2968 00000000 		.word	g_state
 4042 296c 00000000 		.word	g_motorinput
 4059              	.Lscope14:
 4060              		.align	2
 4062              		.global	lab3
 4064              	lab3:
 665:lab.c         **** 
 666:lab.c         **** 
 667:lab.c         **** 
 668:lab.c         **** void lab3(void) { //{{{1
 4066              	.LM265:
 4067              		@ Function supports interworking.
 4068              		@ args = 0, pretend = 0, frame = 24
 4069              		@ frame_needed = 1, uses_anonymous_args = 0
 4070 2970 0DC0A0E1 		mov	ip, sp
 4071 2974 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 4072 2978 04B04CE2 		sub	fp, ip, #4
 4073 297c 18D04DE2 		sub	sp, sp, #24
 669:lab.c         ****     DataOutputsPerSecond = 5;
 4075              	.LM266:
 4076 2980 F0219FE5 		ldr	r2, .L103
 4077 2984 0530A0E3 		mov	r3, #5
 4078 2988 0030C2E5 		strb	r3, [r2, #0]
 670:lab.c         ****     msg_flag = 0; //(1<<FMSTATE_ID) | (1<<FMMOTORINPUT_ID);
 4080              	.LM267:
 4081 298c E8219FE5 		ldr	r2, .L103+4
 4082 2990 0030A0E3 		mov	r3, #0
 4083 2994 003082E5 		str	r3, [r2, #0]
 671:lab.c         ****     ////////////////////////////////////////////////////////
 672:lab.c         ****     ///////// COMPUTE CONTROL VECTOR HERE //////////////////
 673:lab.c         **** 
 674:lab.c         **** //    // GET CURRENT ROTATION MATRIX
 675:lab.c         **** //    euler2rotmat(g_sensor.dPhi, g_sensor.dTheta, g_sensor.dPsi, R01);
 676:lab.c         **** //    //matrix_transpose(3,3,R01,R10);
 677:lab.c         **** //
 678:lab.c         **** //    // ROTATE POSITION AND DESIRED POSITION TO BODY FRAME
 679:lab.c         **** //
 680:lab.c         **** //    position0[0] = g_state.dX;  position0[1] = g_state.dY; position0[2] = g_state.dZ;
 681:lab.c         **** //    matrix_multiply( 3, 3, 1 , R01, position0, position1 );
 682:lab.c         **** //
 683:lab.c         **** //    // ROTATE VELOCITIES TO BODY FRAME
 684:lab.c         **** //
 685:lab.c         **** //    velocity0[0] = g_state.dVx;  velocity0[1] = g_state.dVy;  velocity0[2] = g_state.dVz;
 686:lab.c         **** //    matrix_multiply( 3, 3, 1 , R01, velocity0, velocity1 );
 687:lab.c         **** //
 688:lab.c         **** //    // OUTER LOOP
 689:lab.c         **** //    phi_desired = yControl(position1[1], velocity1[1], y_desired);
 690:lab.c         **** //    theta_desired = xControl(position1[0], velocity1[0], x_desired);
 691:lab.c         **** //
 692:lab.c         **** //    // INNER LOOP
 693:lab.c         **** //
 694:lab.c         **** //    g_u[0] = rollControl(g_sensor.dPhi, g_sensor.dP, phi_desired);
 695:lab.c         **** //    g_u[1] = pitchControl(g_sensor.dTheta, g_sensor.dQ, theta_desired);
 696:lab.c         **** //    g_u[2] = yawControl(g_sensor.dPsi, g_sensor.dR, psi_desired);
 697:lab.c         **** //    g_u[3] = zControl(position1[2], velocity1[2], z_desired, g_sensor.dPhi, g_sensor.dTheta);
 698:lab.c         **** 
 699:lab.c         ****         // LQR CONTROLLER
 700:lab.c         **** //    g_xerr[0] = g_state.dX - g_xnom[0];
 701:lab.c         **** //    g_xerr[1] = g_state.dY - g_xnom[1];
 702:lab.c         **** //    g_xerr[2] = g_state.dZ - g_xnom[2];
 703:lab.c         **** //    g_xerr[3] = g_state.dVx;
 704:lab.c         **** //    g_xerr[4] = g_state.dVy;
 705:lab.c         **** //    g_xerr[5] = g_state.dVz;
 706:lab.c         **** //    g_xerr[6] = g_state.dPhi;
 707:lab.c         **** //    g_xerr[7] = g_state.dTheta;
 708:lab.c         **** //    g_xerr[8] = g_state.dPsi;
 709:lab.c         **** //    g_xerr[9] = g_state.dP;
 710:lab.c         **** //    g_xerr[10] = g_state.dQ;
 711:lab.c         **** //    g_xerr[11] = g_state.dR;
 712:lab.c         **** //    matrix_multiply(4, 12, 1, K3, g_xerr, g_u);
 713:lab.c         **** //    g_u[3] = g_u[3] + 6.77;
 714:lab.c         **** 
 715:lab.c         ****     float K00 = 0.8831;
 4085              	.LM268:
 4086 2998 E0319FE5 		ldr	r3, .L103+8	@ float
 4087 299c 28300BE5 		str	r3, [fp, #-40]	@ float
 716:lab.c         ****     float K01 = 0.08876;
 4089              	.LM269:
 4090 29a0 DC319FE5 		ldr	r3, .L103+12	@ float
 4091 29a4 24300BE5 		str	r3, [fp, #-36]	@ float
 717:lab.c         ****     float K10 = 0.8828;
 4093              	.LM270:
 4094 29a8 D8319FE5 		ldr	r3, .L103+16	@ float
 4095 29ac 20300BE5 		str	r3, [fp, #-32]	@ float
 718:lab.c         ****     float K11 = 0.08872;
 4097              	.LM271:
 4098 29b0 D4319FE5 		ldr	r3, .L103+20	@ float
 4099 29b4 1C300BE5 		str	r3, [fp, #-28]	@ float
 719:lab.c         ****     float K20 = 0.9359;
 4101              	.LM272:
 4102 29b8 D0319FE5 		ldr	r3, .L103+24	@ float
 4103 29bc 18300BE5 		str	r3, [fp, #-24]	@ float
 720:lab.c         ****     float K21 = 0.0943;
 4105              	.LM273:
 4106 29c0 CC319FE5 		ldr	r3, .L103+28	@ float
 4107 29c4 14300BE5 		str	r3, [fp, #-20]	@ float
 721:lab.c         **** 
 722:lab.c         ****     g_u[0] = -K00 * (g_sensor.dPhi - u_outer.roll_desired) - K01 * (g_sensor.dP);
 4109              	.LM274:
 4110 29c8 28301BE5 		ldr	r3, [fp, #-40]
 4111 29cc 024123E2 		eor	r4, r3, #-2147483648
 4112 29d0 C0319FE5 		ldr	r3, .L103+32
 4113 29d4 042093E5 		ldr	r2, [r3, #4]	@ float
 4114 29d8 BC319FE5 		ldr	r3, .L103+36
 4115 29dc 003093E5 		ldr	r3, [r3, #0]	@ float
 4116 29e0 0200A0E1 		mov	r0, r2
 4117 29e4 0310A0E1 		mov	r1, r3
 4118 29e8 FEFFFFEB 		bl	__subsf3
 4119 29ec 0030A0E1 		mov	r3, r0
 4120 29f0 0400A0E1 		mov	r0, r4
 4121 29f4 0310A0E1 		mov	r1, r3
 4122 29f8 FEFFFFEB 		bl	__mulsf3
 4123 29fc 0030A0E1 		mov	r3, r0
 4124 2a00 0340A0E1 		mov	r4, r3
 4125 2a04 8C319FE5 		ldr	r3, .L103+32
 4126 2a08 1C3093E5 		ldr	r3, [r3, #28]	@ float
 4127 2a0c 0300A0E1 		mov	r0, r3
 4128 2a10 24101BE5 		ldr	r1, [fp, #-36]	@ float
 4129 2a14 FEFFFFEB 		bl	__mulsf3
 4130 2a18 0030A0E1 		mov	r3, r0
 4131 2a1c 0400A0E1 		mov	r0, r4
 4132 2a20 0310A0E1 		mov	r1, r3
 4133 2a24 FEFFFFEB 		bl	__subsf3
 4134 2a28 0030A0E1 		mov	r3, r0
 4135 2a2c 0320A0E1 		mov	r2, r3
 4136 2a30 68319FE5 		ldr	r3, .L103+40
 4137 2a34 002083E5 		str	r2, [r3, #0]	@ float
 723:lab.c         ****     g_u[1] = -K10 * (g_sensor.dTheta - u_outer.pitch_desired) - K11 * (g_sensor.dQ);
 4139              	.LM275:
 4140 2a38 20301BE5 		ldr	r3, [fp, #-32]
 4141 2a3c 024123E2 		eor	r4, r3, #-2147483648
 4142 2a40 50319FE5 		ldr	r3, .L103+32
 4143 2a44 082093E5 		ldr	r2, [r3, #8]	@ float
 4144 2a48 4C319FE5 		ldr	r3, .L103+36
 4145 2a4c 043093E5 		ldr	r3, [r3, #4]	@ float
 4146 2a50 0200A0E1 		mov	r0, r2
 4147 2a54 0310A0E1 		mov	r1, r3
 4148 2a58 FEFFFFEB 		bl	__subsf3
 4149 2a5c 0030A0E1 		mov	r3, r0
 4150 2a60 0400A0E1 		mov	r0, r4
 4151 2a64 0310A0E1 		mov	r1, r3
 4152 2a68 FEFFFFEB 		bl	__mulsf3
 4153 2a6c 0030A0E1 		mov	r3, r0
 4154 2a70 0340A0E1 		mov	r4, r3
 4155 2a74 1C319FE5 		ldr	r3, .L103+32
 4156 2a78 203093E5 		ldr	r3, [r3, #32]	@ float
 4157 2a7c 0300A0E1 		mov	r0, r3
 4158 2a80 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 4159 2a84 FEFFFFEB 		bl	__mulsf3
 4160 2a88 0030A0E1 		mov	r3, r0
 4161 2a8c 0400A0E1 		mov	r0, r4
 4162 2a90 0310A0E1 		mov	r1, r3
 4163 2a94 FEFFFFEB 		bl	__subsf3
 4164 2a98 0030A0E1 		mov	r3, r0
 4165 2a9c 0320A0E1 		mov	r2, r3
 4166 2aa0 F8309FE5 		ldr	r3, .L103+40
 4167 2aa4 042083E5 		str	r2, [r3, #4]	@ float
 724:lab.c         ****     g_u[2] = -K20 * (g_sensor.dPsi - u_outer.yaw_desired) - K21 * (g_sensor.dR);
 4169              	.LM276:
 4170 2aa8 18301BE5 		ldr	r3, [fp, #-24]
 4171 2aac 024123E2 		eor	r4, r3, #-2147483648
 4172 2ab0 E0309FE5 		ldr	r3, .L103+32
 4173 2ab4 0C2093E5 		ldr	r2, [r3, #12]	@ float
 4174 2ab8 DC309FE5 		ldr	r3, .L103+36
 4175 2abc 083093E5 		ldr	r3, [r3, #8]	@ float
 4176 2ac0 0200A0E1 		mov	r0, r2
 4177 2ac4 0310A0E1 		mov	r1, r3
 4178 2ac8 FEFFFFEB 		bl	__subsf3
 4179 2acc 0030A0E1 		mov	r3, r0
 4180 2ad0 0400A0E1 		mov	r0, r4
 4181 2ad4 0310A0E1 		mov	r1, r3
 4182 2ad8 FEFFFFEB 		bl	__mulsf3
 4183 2adc 0030A0E1 		mov	r3, r0
 4184 2ae0 0340A0E1 		mov	r4, r3
 4185 2ae4 AC309FE5 		ldr	r3, .L103+32
 4186 2ae8 243093E5 		ldr	r3, [r3, #36]	@ float
 4187 2aec 0300A0E1 		mov	r0, r3
 4188 2af0 14101BE5 		ldr	r1, [fp, #-20]	@ float
 4189 2af4 FEFFFFEB 		bl	__mulsf3
 4190 2af8 0030A0E1 		mov	r3, r0
 4191 2afc 0400A0E1 		mov	r0, r4
 4192 2b00 0310A0E1 		mov	r1, r3
 4193 2b04 FEFFFFEB 		bl	__subsf3
 4194 2b08 0030A0E1 		mov	r3, r0
 4195 2b0c 0320A0E1 		mov	r2, r3
 4196 2b10 88309FE5 		ldr	r3, .L103+40
 4197 2b14 082083E5 		str	r2, [r3, #8]	@ float
 725:lab.c         ****     g_u[3] = u_outer.thrust_desired;
 4199              	.LM277:
 4200 2b18 7C309FE5 		ldr	r3, .L103+36
 4201 2b1c 182093E5 		ldr	r2, [r3, #24]	@ float
 4202 2b20 78309FE5 		ldr	r3, .L103+40
 4203 2b24 0C2083E5 		str	r2, [r3, #12]	@ float
 726:lab.c         **** 
 727:lab.c         ****     g_motorinput.dU1 = g_u[0];
 4205              	.LM278:
 4206 2b28 70309FE5 		ldr	r3, .L103+40
 4207 2b2c 002093E5 		ldr	r2, [r3, #0]	@ float
 4208 2b30 6C309FE5 		ldr	r3, .L103+44
 4209 2b34 042083E5 		str	r2, [r3, #4]	@ float
 728:lab.c         ****     g_motorinput.dU2 = g_u[1];
 4211              	.LM279:
 4212 2b38 60309FE5 		ldr	r3, .L103+40
 4213 2b3c 042093E5 		ldr	r2, [r3, #4]	@ float
 4214 2b40 5C309FE5 		ldr	r3, .L103+44
 4215 2b44 082083E5 		str	r2, [r3, #8]	@ float
 729:lab.c         ****     g_motorinput.dU3 = g_u[2];
 4217              	.LM280:
 4218 2b48 50309FE5 		ldr	r3, .L103+40
 4219 2b4c 082093E5 		ldr	r2, [r3, #8]	@ float
 4220 2b50 4C309FE5 		ldr	r3, .L103+44
 4221 2b54 0C2083E5 		str	r2, [r3, #12]	@ float
 730:lab.c         ****     g_motorinput.dU4 = g_u[3];
 4223              	.LM281:
 4224 2b58 40309FE5 		ldr	r3, .L103+40
 4225 2b5c 0C2093E5 		ldr	r2, [r3, #12]	@ float
 4226 2b60 3C309FE5 		ldr	r3, .L103+44
 4227 2b64 102083E5 		str	r2, [r3, #16]	@ float
 731:lab.c         **** 
 732:lab.c         ****     /////////////////////////////////////////////////////////
 733:lab.c         **** 
 734:lab.c         ****     AE483_send_control();
 4229              	.LM282:
 4230 2b68 FEFFFFEB 		bl	AE483_send_control
 735:lab.c         **** }
 4232              	.LM283:
 4233 2b6c 10D04BE2 		sub	sp, fp, #16
 4234 2b70 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 4235 2b74 1EFF2FE1 		bx	lr
 4236              	.L104:
 4237              		.align	2
 4238              	.L103:
 4239 2b78 00000000 		.word	DataOutputsPerSecond
 4240 2b7c 00000000 		.word	msg_flag
 4241 2b80 D712623F 		.word	1063391959
 4242 2b84 CEC7B53D 		.word	1035323342
 4243 2b88 2EFF613F 		.word	1063386926
 4244 2b8c D5B2B53D 		.word	1035317973
 4245 2b90 24976F3F 		.word	1064277796
 4246 2b94 5C20C13D 		.word	1036066908
 4247 2b98 00000000 		.word	g_sensor
 4248 2b9c 00000000 		.word	u_outer
 4249 2ba0 00000000 		.word	g_u
 4250 2ba4 00000000 		.word	g_motorinput
 4260              	.Lscope15:
 4261              		.align	2
 4263              		.global	lab2
 4265              	lab2:
 736:lab.c         **** 
 737:lab.c         **** 
 738:lab.c         **** void lab2(void) { //{{{1
 4267              	.LM284:
 4268              		@ Function supports interworking.
 4269              		@ args = 0, pretend = 0, frame = 8
 4270              		@ frame_needed = 1, uses_anonymous_args = 0
 4271 2ba8 0DC0A0E1 		mov	ip, sp
 4272 2bac 70D82DE9 		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 4273 2bb0 04B04CE2 		sub	fp, ip, #4
 4274 2bb4 08D04DE2 		sub	sp, sp, #8
 739:lab.c         ****     // Note that g_sensor is a global variable which holds on-board filtered sensor data
 740:lab.c         ****     // (i.e. the "sensor" data object that you are used to.
 741:lab.c         **** 
 742:lab.c         ****     ///////////////////////////////////////////////////////
 743:lab.c         ****     ///////// YOUR LAB 2 CODE HERE ////////////////////////
 744:lab.c         ****     ///////////////////////////////////////////////////////
 745:lab.c         ****     float kp = 0.1;
 4276              	.LM285:
 4277 2bb8 28319FE5 		ldr	r3, .L107+8	@ float
 4278 2bbc 20300BE5 		str	r3, [fp, #-32]	@ float
 746:lab.c         ****     float kd = 0.03;
 4280              	.LM286:
 4281 2bc0 24319FE5 		ldr	r3, .L107+12	@ float
 4282 2bc4 1C300BE5 		str	r3, [fp, #-28]	@ float
 747:lab.c         ****     // UPDATE u!
 748:lab.c         ****     g_u[0]=0; // roll control
 4284              	.LM287:
 4285 2bc8 20219FE5 		ldr	r2, .L107+16
 4286 2bcc 20319FE5 		ldr	r3, .L107+20	@ float
 4287 2bd0 003082E5 		str	r3, [r2, #0]	@ float
 749:lab.c         ****     g_u[1]= -kp * (g_sensor.dTheta - 3.14159/4) - kd * g_sensor.dQ; // pitch control
 4289              	.LM288:
 4290 2bd4 20301BE5 		ldr	r3, [fp, #-32]
 4291 2bd8 023123E2 		eor	r3, r3, #-2147483648
 4292 2bdc 0300A0E1 		mov	r0, r3
 4293 2be0 FEFFFFEB 		bl	__extendsfdf2
 4294 2be4 0050A0E1 		mov	r5, r0
 4295 2be8 0160A0E1 		mov	r6, r1
 4296 2bec 04319FE5 		ldr	r3, .L107+24
 4297 2bf0 083093E5 		ldr	r3, [r3, #8]	@ float
 4298 2bf4 0300A0E1 		mov	r0, r3
 4299 2bf8 FEFFFFEB 		bl	__extendsfdf2
 4300 2bfc 0030A0E1 		mov	r3, r0
 4301 2c00 0140A0E1 		mov	r4, r1
 4302 2c04 0300A0E1 		mov	r0, r3
 4303 2c08 0410A0E1 		mov	r1, r4
 4304 2c0c CC208FE2 		adr	r2, .L107
 4305 2c10 0C0092E8 		ldmia	r2, {r2-r3}
 4306 2c14 FEFFFFEB 		bl	__subdf3
 4307 2c18 0030A0E1 		mov	r3, r0
 4308 2c1c 0140A0E1 		mov	r4, r1
 4309 2c20 0500A0E1 		mov	r0, r5
 4310 2c24 0610A0E1 		mov	r1, r6
 4311 2c28 0320A0E1 		mov	r2, r3
 4312 2c2c 0430A0E1 		mov	r3, r4
 4313 2c30 FEFFFFEB 		bl	__muldf3
 4314 2c34 0030A0E1 		mov	r3, r0
 4315 2c38 0140A0E1 		mov	r4, r1
 4316 2c3c 0350A0E1 		mov	r5, r3
 4317 2c40 0460A0E1 		mov	r6, r4
 4318 2c44 AC309FE5 		ldr	r3, .L107+24
 4319 2c48 203093E5 		ldr	r3, [r3, #32]	@ float
 4320 2c4c 0300A0E1 		mov	r0, r3
 4321 2c50 1C101BE5 		ldr	r1, [fp, #-28]	@ float
 4322 2c54 FEFFFFEB 		bl	__mulsf3
 4323 2c58 0030A0E1 		mov	r3, r0
 4324 2c5c 0300A0E1 		mov	r0, r3
 4325 2c60 FEFFFFEB 		bl	__extendsfdf2
 4326 2c64 0030A0E1 		mov	r3, r0
 4327 2c68 0140A0E1 		mov	r4, r1
 4328 2c6c 0500A0E1 		mov	r0, r5
 4329 2c70 0610A0E1 		mov	r1, r6
 4330 2c74 0320A0E1 		mov	r2, r3
 4331 2c78 0430A0E1 		mov	r3, r4
 4332 2c7c FEFFFFEB 		bl	__subdf3
 4333 2c80 0030A0E1 		mov	r3, r0
 4334 2c84 0140A0E1 		mov	r4, r1
 4335 2c88 0300A0E1 		mov	r0, r3
 4336 2c8c 0410A0E1 		mov	r1, r4
 4337 2c90 FEFFFFEB 		bl	__truncdfsf2
 4338 2c94 0020A0E1 		mov	r2, r0
 4339 2c98 50309FE5 		ldr	r3, .L107+16
 4340 2c9c 042083E5 		str	r2, [r3, #4]	@ float
 750:lab.c         ****     g_u[2]=0; // yaw control
 4342              	.LM289:
 4343 2ca0 48209FE5 		ldr	r2, .L107+16
 4344 2ca4 48309FE5 		ldr	r3, .L107+20	@ float
 4345 2ca8 083082E5 		str	r3, [r2, #8]	@ float
 751:lab.c         ****     g_u[3]=3.0; // thrust control
 4347              	.LM290:
 4348 2cac 3C209FE5 		ldr	r2, .L107+16
 4349 2cb0 44309FE5 		ldr	r3, .L107+28	@ float
 4350 2cb4 0C3082E5 		str	r3, [r2, #12]	@ float
 752:lab.c         ****     //////////////////////////////////////////////////////////
 753:lab.c         ****     //////////////////////////////////////////////////////////
 754:lab.c         **** 
 755:lab.c         ****     AE483_send_control();
 4352              	.LM291:
 4353 2cb8 FEFFFFEB 		bl	AE483_send_control
 756:lab.c         **** 
 757:lab.c         ****     // TURN OFF MOTORS WE DONT NEED FOR PITCH CONTROL
 758:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[2]=0;
 4355              	.LM292:
 4356 2cbc 3C209FE5 		ldr	r2, .L107+32
 4357 2cc0 0030A0E3 		mov	r3, #0
 4358 2cc4 0230C2E5 		strb	r3, [r2, #2]
 759:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[3]=0;
 4360              	.LM293:
 4361 2cc8 30209FE5 		ldr	r2, .L107+32
 4362 2ccc 0030A0E3 		mov	r3, #0
 4363 2cd0 0330C2E5 		strb	r3, [r2, #3]
 760:lab.c         **** 
 761:lab.c         **** }
 4365              	.LM294:
 4366 2cd4 18D04BE2 		sub	sp, fp, #24
 4367 2cd8 70689DE8 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 4368 2cdc 1EFF2FE1 		bx	lr
 4369              	.L108:
 4370              		.align	2
 4371              	.L107:
 4372 2ce0 F921E93F 		.word	1072243193
 4373 2ce4 6E861BF0 		.word	-266631570
 4374 2ce8 CDCCCC3D 		.word	1036831949
 4375 2cec 8FC2F53C 		.word	1022739087
 4376 2cf0 00000000 		.word	g_u
 4377 2cf4 00000000 		.word	0
 4378 2cf8 00000000 		.word	g_sensor
 4379 2cfc 00004040 		.word	1077936128
 4380 2d00 00000000 		.word	WO_Direct_Individual_Motor_Control
 4386              	.Lscope16:
 4387              		.align	2
 4389              		.global	lab1
 4391              	lab1:
 762:lab.c         **** 
 763:lab.c         **** void lab1(void) { //{{{1
 4393              	.LM295:
 4394              		@ Function supports interworking.
 4395              		@ args = 0, pretend = 0, frame = 0
 4396              		@ frame_needed = 1, uses_anonymous_args = 0
 4397 2d04 0DC0A0E1 		mov	ip, sp
 4398 2d08 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4399 2d0c 04B04CE2 		sub	fp, ip, #4
 764:lab.c         ****     DataOutputsPerSecond = 5;
 4401              	.LM296:
 4402 2d10 1C209FE5 		ldr	r2, .L111
 4403 2d14 0530A0E3 		mov	r3, #5
 4404 2d18 0030C2E5 		strb	r3, [r2, #0]
 765:lab.c         ****     msg_flag = (1<<FMSENSOR_ID) | (1<<FMROTOR_ID);
 4406              	.LM297:
 4407 2d1c 14209FE5 		ldr	r2, .L111+4
 4408 2d20 4830A0E3 		mov	r3, #72
 4409 2d24 003082E5 		str	r3, [r2, #0]
 766:lab.c         **** }
 4411              	.LM298:
 4412 2d28 0CD04BE2 		sub	sp, fp, #12
 4413 2d2c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4414 2d30 1EFF2FE1 		bx	lr
 4415              	.L112:
 4416              		.align	2
 4417              	.L111:
 4418 2d34 00000000 		.word	DataOutputsPerSecond
 4419 2d38 00000000 		.word	msg_flag
 4421              	.Lscope17:
 4422              		.bss
 4423              		.align	2
 4424              	timer.4280:
 4425 004c 00000000 		.space	4
 4427              		.text
 4428              		.align	2
 4430              		.global	motor_rpm_calibration
 4432              	motor_rpm_calibration:
 767:lab.c         **** 
 768:lab.c         **** 
 769:lab.c         **** void motor_rpm_calibration(void) { //{{{1
 4434              	.LM299:
 4435              		@ Function supports interworking.
 4436              		@ args = 0, pretend = 0, frame = 0
 4437              		@ frame_needed = 1, uses_anonymous_args = 0
 4438 2d3c 0DC0A0E1 		mov	ip, sp
 4439 2d40 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4440 2d44 04B04CE2 		sub	fp, ip, #4
 770:lab.c         ****     DataOutputsPerSecond = 5;
 4442              	.LM300:
 4443 2d48 B0239FE5 		ldr	r2, .L156
 4444 2d4c 0530A0E3 		mov	r3, #5
 4445 2d50 0030C2E5 		strb	r3, [r2, #0]
 771:lab.c         ****     msg_flag = 0;
 4447              	.LM301:
 4448 2d54 A8239FE5 		ldr	r2, .L156+4
 4449 2d58 0030A0E3 		mov	r3, #0
 4450 2d5c 003082E5 		str	r3, [r2, #0]
 772:lab.c         **** 
 773:lab.c         ****     static int timer=0;
 774:lab.c         **** 
 775:lab.c         ****     WO_SDK.ctrl_mode=0x00;    //0x00: direct individual motor control: individual commands for moto
 4452              	.LM302:
 4453 2d60 A0239FE5 		ldr	r2, .L156+8
 4454 2d64 0030A0E3 		mov	r3, #0
 4455 2d68 0030C2E5 		strb	r3, [r2, #0]
 776:lab.c         ****                             //0x01: direct motor control using standard output mapping: commands ar
 777:lab.c         ****                             //0x02: attitude and throttle control: commands are input for standard 
 778:lab.c         ****                             //0x03: GPS waypoint control
 779:lab.c         **** 
 780:lab.c         ****     WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 4457              	.LM303:
 4458 2d6c 94239FE5 		ldr	r2, .L156+8
 4459 2d70 0130A0E3 		mov	r3, #1
 4460 2d74 0130C2E5 		strb	r3, [r2, #1]
 781:lab.c         ****                             //1: enable control by HL processor
 782:lab.c         **** 
 783:lab.c         ****     WO_SDK.disable_motor_onoff_by_stick=0;
 4462              	.LM304:
 4463 2d78 88239FE5 		ldr	r2, .L156+8
 4464 2d7c 0030A0E3 		mov	r3, #0
 4465 2d80 0230C2E5 		strb	r3, [r2, #2]
 784:lab.c         **** 
 785:lab.c         ****     //scale throttle stick to [0..200] and map it to all motors
 786:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[0]=0;
 4467              	.LM305:
 4468 2d84 80239FE5 		ldr	r2, .L156+12
 4469 2d88 0030A0E3 		mov	r3, #0
 4470 2d8c 0030C2E5 		strb	r3, [r2, #0]
 787:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[1]=0;
 4472              	.LM306:
 4473 2d90 74239FE5 		ldr	r2, .L156+12
 4474 2d94 0030A0E3 		mov	r3, #0
 4475 2d98 0130C2E5 		strb	r3, [r2, #1]
 788:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[2]=0;
 4477              	.LM307:
 4478 2d9c 68239FE5 		ldr	r2, .L156+12
 4479 2da0 0030A0E3 		mov	r3, #0
 4480 2da4 0230C2E5 		strb	r3, [r2, #2]
 789:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[3]=1;
 4482              	.LM308:
 4483 2da8 5C239FE5 		ldr	r2, .L156+12
 4484 2dac 0130A0E3 		mov	r3, #1
 4485 2db0 0330C2E5 		strb	r3, [r2, #3]
 790:lab.c         **** 
 791:lab.c         ****     if(++timer<2000) WO_Direct_Individual_Motor_Control.motor[3]=10;
 4487              	.LM309:
 4488 2db4 54339FE5 		ldr	r3, .L156+16
 4489 2db8 003093E5 		ldr	r3, [r3, #0]
 4490 2dbc 012083E2 		add	r2, r3, #1
 4491 2dc0 48339FE5 		ldr	r3, .L156+16
 4492 2dc4 002083E5 		str	r2, [r3, #0]
 4493 2dc8 40339FE5 		ldr	r3, .L156+16
 4494 2dcc 002093E5 		ldr	r2, [r3, #0]
 4495 2dd0 1F3DA0E3 		mov	r3, #1984
 4496 2dd4 0F3083E2 		add	r3, r3, #15
 4497 2dd8 030052E1 		cmp	r2, r3
 4498 2ddc 030000CA 		bgt	.L114
 4499 2de0 24339FE5 		ldr	r3, .L156+12
 4500 2de4 0A20A0E3 		mov	r2, #10
 4501 2de8 0320C3E5 		strb	r2, [r3, #3]
 4502 2dec C00000EA 		b	.L155
 4503              	.L114:
 792:lab.c         ****     else if(timer<4000) WO_Direct_Individual_Motor_Control.motor[3]=20;
 4505              	.LM310:
 4506 2df0 18339FE5 		ldr	r3, .L156+16
 4507 2df4 002093E5 		ldr	r2, [r3, #0]
 4508 2df8 F93EA0E3 		mov	r3, #3984
 4509 2dfc 0F3083E2 		add	r3, r3, #15
 4510 2e00 030052E1 		cmp	r2, r3
 4511 2e04 030000CA 		bgt	.L117
 4512 2e08 FC329FE5 		ldr	r3, .L156+12
 4513 2e0c 1420A0E3 		mov	r2, #20
 4514 2e10 0320C3E5 		strb	r2, [r3, #3]
 4515 2e14 B60000EA 		b	.L155
 4516              	.L117:
 793:lab.c         ****     else if(timer<6000) WO_Direct_Individual_Motor_Control.motor[3]=30;
 4518              	.LM311:
 4519 2e18 F0329FE5 		ldr	r3, .L156+16
 4520 2e1c 002093E5 		ldr	r2, [r3, #0]
 4521 2e20 5D3DA0E3 		mov	r3, #5952
 4522 2e24 2F3083E2 		add	r3, r3, #47
 4523 2e28 030052E1 		cmp	r2, r3
 4524 2e2c 030000CA 		bgt	.L119
 4525 2e30 D4329FE5 		ldr	r3, .L156+12
 4526 2e34 1E20A0E3 		mov	r2, #30
 4527 2e38 0320C3E5 		strb	r2, [r3, #3]
 4528 2e3c AC0000EA 		b	.L155
 4529              	.L119:
 794:lab.c         ****     else if(timer<8000) WO_Direct_Individual_Motor_Control.motor[3]=40;
 4531              	.LM312:
 4532 2e40 C8329FE5 		ldr	r3, .L156+16
 4533 2e44 002093E5 		ldr	r2, [r3, #0]
 4534 2e48 1F3CA0E3 		mov	r3, #7936
 4535 2e4c 3F3083E2 		add	r3, r3, #63
 4536 2e50 030052E1 		cmp	r2, r3
 4537 2e54 030000CA 		bgt	.L121
 4538 2e58 AC329FE5 		ldr	r3, .L156+12
 4539 2e5c 2820A0E3 		mov	r2, #40
 4540 2e60 0320C3E5 		strb	r2, [r3, #3]
 4541 2e64 A20000EA 		b	.L155
 4542              	.L121:
 795:lab.c         ****     else if(timer<10000) WO_Direct_Individual_Motor_Control.motor[3]=50;
 4544              	.LM313:
 4545 2e68 A0329FE5 		ldr	r3, .L156+16
 4546 2e6c 002093E5 		ldr	r2, [r3, #0]
 4547 2e70 273CA0E3 		mov	r3, #9984
 4548 2e74 0F3083E2 		add	r3, r3, #15
 4549 2e78 030052E1 		cmp	r2, r3
 4550 2e7c 030000CA 		bgt	.L123
 4551 2e80 84329FE5 		ldr	r3, .L156+12
 4552 2e84 3220A0E3 		mov	r2, #50
 4553 2e88 0320C3E5 		strb	r2, [r3, #3]
 4554 2e8c 980000EA 		b	.L155
 4555              	.L123:
 796:lab.c         ****     else if(timer<12000) WO_Direct_Individual_Motor_Control.motor[3]=60;
 4557              	.LM314:
 4558 2e90 78329FE5 		ldr	r3, .L156+16
 4559 2e94 002093E5 		ldr	r2, [r3, #0]
 4560 2e98 BB3DA0E3 		mov	r3, #11968
 4561 2e9c 1F3083E2 		add	r3, r3, #31
 4562 2ea0 030052E1 		cmp	r2, r3
 4563 2ea4 030000CA 		bgt	.L125
 4564 2ea8 5C329FE5 		ldr	r3, .L156+12
 4565 2eac 3C20A0E3 		mov	r2, #60
 4566 2eb0 0320C3E5 		strb	r2, [r3, #3]
 4567 2eb4 8E0000EA 		b	.L155
 4568              	.L125:
 797:lab.c         ****     else if(timer<14000) WO_Direct_Individual_Motor_Control.motor[3]=70;
 4570              	.LM315:
 4571 2eb8 50329FE5 		ldr	r3, .L156+16
 4572 2ebc 002093E5 		ldr	r2, [r3, #0]
 4573 2ec0 DA3DA0E3 		mov	r3, #13952
 4574 2ec4 2F3083E2 		add	r3, r3, #47
 4575 2ec8 030052E1 		cmp	r2, r3
 4576 2ecc 030000CA 		bgt	.L127
 4577 2ed0 34329FE5 		ldr	r3, .L156+12
 4578 2ed4 4620A0E3 		mov	r2, #70
 4579 2ed8 0320C3E5 		strb	r2, [r3, #3]
 4580 2edc 840000EA 		b	.L155
 4581              	.L127:
 798:lab.c         ****     else if(timer<16000) WO_Direct_Individual_Motor_Control.motor[3]=80;
 4583              	.LM316:
 4584 2ee0 28329FE5 		ldr	r3, .L156+16
 4585 2ee4 002093E5 		ldr	r2, [r3, #0]
 4586 2ee8 F93DA0E3 		mov	r3, #15936
 4587 2eec 3F3083E2 		add	r3, r3, #63
 4588 2ef0 030052E1 		cmp	r2, r3
 4589 2ef4 030000CA 		bgt	.L129
 4590 2ef8 0C329FE5 		ldr	r3, .L156+12
 4591 2efc 5020A0E3 		mov	r2, #80
 4592 2f00 0320C3E5 		strb	r2, [r3, #3]
 4593 2f04 7A0000EA 		b	.L155
 4594              	.L129:
 799:lab.c         ****     else if(timer<18000) WO_Direct_Individual_Motor_Control.motor[3]=90;
 4596              	.LM317:
 4597 2f08 00329FE5 		ldr	r3, .L156+16
 4598 2f0c 002093E5 		ldr	r2, [r3, #0]
 4599 2f10 463CA0E3 		mov	r3, #17920
 4600 2f14 4F3083E2 		add	r3, r3, #79
 4601 2f18 030052E1 		cmp	r2, r3
 4602 2f1c 030000CA 		bgt	.L131
 4603 2f20 E4319FE5 		ldr	r3, .L156+12
 4604 2f24 5A20A0E3 		mov	r2, #90
 4605 2f28 0320C3E5 		strb	r2, [r3, #3]
 4606 2f2c 700000EA 		b	.L155
 4607              	.L131:
 800:lab.c         ****     else if(timer<20000) WO_Direct_Individual_Motor_Control.motor[3]=100;
 4609              	.LM318:
 4610 2f30 D8319FE5 		ldr	r3, .L156+16
 4611 2f34 002093E5 		ldr	r2, [r3, #0]
 4612 2f38 4E3CA0E3 		mov	r3, #19968
 4613 2f3c 1F3083E2 		add	r3, r3, #31
 4614 2f40 030052E1 		cmp	r2, r3
 4615 2f44 030000CA 		bgt	.L133
 4616 2f48 BC319FE5 		ldr	r3, .L156+12
 4617 2f4c 6420A0E3 		mov	r2, #100
 4618 2f50 0320C3E5 		strb	r2, [r3, #3]
 4619 2f54 660000EA 		b	.L155
 4620              	.L133:
 801:lab.c         ****     else if(timer<22000) WO_Direct_Individual_Motor_Control.motor[3]=110;
 4622              	.LM319:
 4623 2f58 B0319FE5 		ldr	r3, .L156+16
 4624 2f5c 002093E5 		ldr	r2, [r3, #0]
 4625 2f60 553CA0E3 		mov	r3, #21760
 4626 2f64 EF3083E2 		add	r3, r3, #239
 4627 2f68 030052E1 		cmp	r2, r3
 4628 2f6c 030000CA 		bgt	.L135
 4629 2f70 94319FE5 		ldr	r3, .L156+12
 4630 2f74 6E20A0E3 		mov	r2, #110
 4631 2f78 0320C3E5 		strb	r2, [r3, #3]
 4632 2f7c 5C0000EA 		b	.L155
 4633              	.L135:
 802:lab.c         ****     else if(timer<24000) WO_Direct_Individual_Motor_Control.motor[3]=120;
 4635              	.LM320:
 4636 2f80 88319FE5 		ldr	r3, .L156+16
 4637 2f84 002093E5 		ldr	r2, [r3, #0]
 4638 2f88 5D3CA0E3 		mov	r3, #23808
 4639 2f8c BF3083E2 		add	r3, r3, #191
 4640 2f90 030052E1 		cmp	r2, r3
 4641 2f94 030000CA 		bgt	.L137
 4642 2f98 6C319FE5 		ldr	r3, .L156+12
 4643 2f9c 7820A0E3 		mov	r2, #120
 4644 2fa0 0320C3E5 		strb	r2, [r3, #3]
 4645 2fa4 520000EA 		b	.L155
 4646              	.L137:
 803:lab.c         ****     else if(timer<26000) WO_Direct_Individual_Motor_Control.motor[3]=130;
 4648              	.LM321:
 4649 2fa8 60319FE5 		ldr	r3, .L156+16
 4650 2fac 002093E5 		ldr	r2, [r3, #0]
 4651 2fb0 653CA0E3 		mov	r3, #25856
 4652 2fb4 8F3083E2 		add	r3, r3, #143
 4653 2fb8 030052E1 		cmp	r2, r3
 4654 2fbc 030000CA 		bgt	.L139
 4655 2fc0 44319FE5 		ldr	r3, .L156+12
 4656 2fc4 7D20E0E3 		mvn	r2, #125
 4657 2fc8 0320C3E5 		strb	r2, [r3, #3]
 4658 2fcc 480000EA 		b	.L155
 4659              	.L139:
 804:lab.c         ****     else if(timer<28000) WO_Direct_Individual_Motor_Control.motor[3]=140;
 4661              	.LM322:
 4662 2fd0 38319FE5 		ldr	r3, .L156+16
 4663 2fd4 002093E5 		ldr	r2, [r3, #0]
 4664 2fd8 6D3CA0E3 		mov	r3, #27904
 4665 2fdc 5F3083E2 		add	r3, r3, #95
 4666 2fe0 030052E1 		cmp	r2, r3
 4667 2fe4 030000CA 		bgt	.L141
 4668 2fe8 1C319FE5 		ldr	r3, .L156+12
 4669 2fec 7320E0E3 		mvn	r2, #115
 4670 2ff0 0320C3E5 		strb	r2, [r3, #3]
 4671 2ff4 3E0000EA 		b	.L155
 4672              	.L141:
 805:lab.c         ****     else if(timer<30000) WO_Direct_Individual_Motor_Control.motor[3]=150;
 4674              	.LM323:
 4675 2ff8 10319FE5 		ldr	r3, .L156+16
 4676 2ffc 002093E5 		ldr	r2, [r3, #0]
 4677 3000 753CA0E3 		mov	r3, #29952
 4678 3004 2F3083E2 		add	r3, r3, #47
 4679 3008 030052E1 		cmp	r2, r3
 4680 300c 030000CA 		bgt	.L143
 4681 3010 F4309FE5 		ldr	r3, .L156+12
 4682 3014 6920E0E3 		mvn	r2, #105
 4683 3018 0320C3E5 		strb	r2, [r3, #3]
 4684 301c 340000EA 		b	.L155
 4685              	.L143:
 806:lab.c         ****     else if(timer<32000) WO_Direct_Individual_Motor_Control.motor[3]=160;
 4687              	.LM324:
 4688 3020 E8309FE5 		ldr	r3, .L156+16
 4689 3024 002093E5 		ldr	r2, [r3, #0]
 4690 3028 1F3BA0E3 		mov	r3, #31744
 4691 302c FF3083E2 		add	r3, r3, #255
 4692 3030 030052E1 		cmp	r2, r3
 4693 3034 030000CA 		bgt	.L145
 4694 3038 CC309FE5 		ldr	r3, .L156+12
 4695 303c 5F20E0E3 		mvn	r2, #95
 4696 3040 0320C3E5 		strb	r2, [r3, #3]
 4697 3044 2A0000EA 		b	.L155
 4698              	.L145:
 807:lab.c         ****     else if(timer<34000) WO_Direct_Individual_Motor_Control.motor[3]=170;
 4700              	.LM325:
 4701 3048 C0309FE5 		ldr	r3, .L156+16
 4702 304c 002093E5 		ldr	r2, [r3, #0]
 4703 3050 853CA0E3 		mov	r3, #34048
 4704 3054 313043E2 		sub	r3, r3, #49
 4705 3058 030052E1 		cmp	r2, r3
 4706 305c 030000CA 		bgt	.L147
 4707 3060 A4309FE5 		ldr	r3, .L156+12
 4708 3064 5520E0E3 		mvn	r2, #85
 4709 3068 0320C3E5 		strb	r2, [r3, #3]
 4710 306c 200000EA 		b	.L155
 4711              	.L147:
 808:lab.c         ****     else if(timer<36000) WO_Direct_Individual_Motor_Control.motor[3]=180;
 4713              	.LM326:
 4714 3070 98309FE5 		ldr	r3, .L156+16
 4715 3074 002093E5 		ldr	r2, [r3, #0]
 4716 3078 8D3CA0E3 		mov	r3, #36096
 4717 307c 613043E2 		sub	r3, r3, #97
 4718 3080 030052E1 		cmp	r2, r3
 4719 3084 030000CA 		bgt	.L149
 4720 3088 7C309FE5 		ldr	r3, .L156+12
 4721 308c 4B20E0E3 		mvn	r2, #75
 4722 3090 0320C3E5 		strb	r2, [r3, #3]
 4723 3094 160000EA 		b	.L155
 4724              	.L149:
 809:lab.c         ****     else if(timer<38000) WO_Direct_Individual_Motor_Control.motor[3]=190;
 4726              	.LM327:
 4727 3098 70309FE5 		ldr	r3, .L156+16
 4728 309c 002093E5 		ldr	r2, [r3, #0]
 4729 30a0 253BA0E3 		mov	r3, #37888
 4730 30a4 6F3083E2 		add	r3, r3, #111
 4731 30a8 030052E1 		cmp	r2, r3
 4732 30ac 030000CA 		bgt	.L151
 4733 30b0 54309FE5 		ldr	r3, .L156+12
 4734 30b4 4120E0E3 		mvn	r2, #65
 4735 30b8 0320C3E5 		strb	r2, [r3, #3]
 4736 30bc 0C0000EA 		b	.L155
 4737              	.L151:
 810:lab.c         ****     else if(timer<40000) WO_Direct_Individual_Motor_Control.motor[3]=200;
 4739              	.LM328:
 4740 30c0 48309FE5 		ldr	r3, .L156+16
 4741 30c4 002093E5 		ldr	r2, [r3, #0]
 4742 30c8 273BA0E3 		mov	r3, #39936
 4743 30cc 3F3083E2 		add	r3, r3, #63
 4744 30d0 030052E1 		cmp	r2, r3
 4745 30d4 030000CA 		bgt	.L153
 4746 30d8 2C309FE5 		ldr	r3, .L156+12
 4747 30dc 3720E0E3 		mvn	r2, #55
 4748 30e0 0320C3E5 		strb	r2, [r3, #3]
 4749 30e4 020000EA 		b	.L155
 4750              	.L153:
 811:lab.c         **** 
 812:lab.c         ****     else timer=0;
 4752              	.LM329:
 4753 30e8 20209FE5 		ldr	r2, .L156+16
 4754 30ec 0030A0E3 		mov	r3, #0
 4755 30f0 003082E5 		str	r3, [r2, #0]
 4756              	.L155:
 813:lab.c         **** 
 814:lab.c         **** 
 815:lab.c         **** }
 4758              	.LM330:
 4759 30f4 0CD04BE2 		sub	sp, fp, #12
 4760 30f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4761 30fc 1EFF2FE1 		bx	lr
 4762              	.L157:
 4763              		.align	2
 4764              	.L156:
 4765 3100 00000000 		.word	DataOutputsPerSecond
 4766 3104 00000000 		.word	msg_flag
 4767 3108 00000000 		.word	WO_SDK
 4768 310c 00000000 		.word	WO_Direct_Individual_Motor_Control
 4769 3110 4C000000 		.word	timer.4280
 4774              	.Lscope18:
 4775              		.align	2
 4777              		.global	do_communication
 4779              	do_communication:
 816:lab.c         **** 
 817:lab.c         **** 
 818:lab.c         **** 
 819:lab.c         **** void do_communication(void) { //{{{1
 4781              	.LM331:
 4782              		@ Function supports interworking.
 4783              		@ args = 0, pretend = 0, frame = 264
 4784              		@ frame_needed = 1, uses_anonymous_args = 0
 4785 3114 0DC0A0E1 		mov	ip, sp
 4786 3118 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 4787 311c 04B04CE2 		sub	fp, ip, #4
 4788 3120 42DF4DE2 		sub	sp, sp, #264
 820:lab.c         ****     // This Function Sends Messages to Control PC
 821:lab.c         ****     
 822:lab.c         ****     // if ((my_lab_count >= comm_start_count) && (max_output_count == 0 || output_count <= max_outp
 823:lab.c         ****     // {
 824:lab.c         **** 
 825:lab.c         ****         // Check timer to see if we want to send a message.
 826:lab.c         ****         if (output_timer++ == ControllerCyclesPerSecond / DataOutputsPerSecond) {
 4790              	.LM332:
 4791 3124 20339FE5 		ldr	r3, .L182
 4792 3128 004093E5 		ldr	r4, [r3, #0]
 4793 312c 1C339FE5 		ldr	r3, .L182+4
 4794 3130 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4795 3134 FA0FA0E3 		mov	r0, #1000
 4796 3138 0310A0E1 		mov	r1, r3
 4797 313c FEFFFFEB 		bl	__divsi3
 4798 3140 0030A0E1 		mov	r3, r0
 4799 3144 030054E1 		cmp	r4, r3
 4800 3148 0030A013 		movne	r3, #0
 4801 314c 0130A003 		moveq	r3, #1
 4802 3150 FF1003E2 		and	r1, r3, #255
 4803 3154 012084E2 		add	r2, r4, #1
 4804 3158 EC329FE5 		ldr	r3, .L182
 4805 315c 002083E5 		str	r2, [r3, #0]
 4806 3160 000051E3 		cmp	r1, #0
 4807 3164 B500000A 		beq	.L181
 4808              	.LBB2:
 827:lab.c         ****     
 828:lab.c         ****             //toggleLED0();
 829:lab.c         ****     
 830:lab.c         ****             // Create an object of class TFmMessage (This is a class, i.e. datatype, that we create
 831:lab.c         ****             TFmMessage msgObj;
 832:lab.c         ****     
 833:lab.c         ****             // msg_flag is a bit field. You can think of it as just an array of 1's and 0's.
 834:lab.c         ****             // The << operator is the bitshift operator. http://www.cs.umd.edu/class/sum2003/cmsc31
 835:lab.c         ****             // The & operator is the bitwise Boolean comparison. It compares two bit fields and
 836:lab.c         ****             // returns a bit field which is the AND of the input bits.
 837:lab.c         ****             // Finally, > 0 will convert the bit field to an integer and check for positivity.
 838:lab.c         **** 
 839:lab.c         ****             // Each variable (e.g. FMROTOR_ID) stores an integer. This is how we keep track of whic
 840:lab.c         ****             // messages to send for a given message flag.
 841:lab.c         ****             
 842:lab.c         ****             // SEND GROUPS OF MESSAGES IN CYCLES 
 843:lab.c         ****             int sendmsg = 0;
 4810              	.LM333:
 4811 3168 0030A0E3 		mov	r3, #0
 4812 316c 14300BE5 		str	r3, [fp, #-20]
 844:lab.c         **** #ifdef SENDMSGEVERYCYCLE
 845:lab.c         ****             sendmsg = 1;
 4814              	.LM334:
 4815 3170 0130A0E3 		mov	r3, #1
 4816 3174 14300BE5 		str	r3, [fp, #-20]
 846:lab.c         **** #endif
 847:lab.c         **** 
 848:lab.c         ****             if ((output_count % 2 == 0) || sendmsg) { // EVEN
 4818              	.LM335:
 4819 3178 D4329FE5 		ldr	r3, .L182+8
 4820 317c 003093E5 		ldr	r3, [r3, #0]
 4821 3180 013003E2 		and	r3, r3, #1
 4822 3184 000053E3 		cmp	r3, #0
 4823 3188 0200000A 		beq	.L161
 4824 318c 14301BE5 		ldr	r3, [fp, #-20]
 4825 3190 000053E3 		cmp	r3, #0
 4826 3194 4B00000A 		beq	.L163
 4827              	.L161:
 849:lab.c         ****                 if ((msg_flag & (1 << FMSTATUS_ID)) > 0) {
 4829              	.LM336:
 4830 3198 B8329FE5 		ldr	r3, .L182+12
 4831 319c 003093E5 		ldr	r3, [r3, #0]
 4832 31a0 023B03E2 		and	r3, r3, #2048
 4833 31a4 000053E3 		cmp	r3, #0
 4834 31a8 0D00000A 		beq	.L164
 850:lab.c         ****                     fmStatusObject_tomessage(&g_status, &msgObj);
 4836              	.LM337:
 4837 31ac 463F4BE2 		sub	r3, fp, #280
 4838 31b0 A4029FE5 		ldr	r0, .L182+16
 4839 31b4 0310A0E1 		mov	r1, r3
 4840 31b8 FEFFFFEB 		bl	fmStatusObject_tomessage
 851:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4842              	.LM338:
 4843 31bc 413FE0E3 		mvn	r3, #260
 4844 31c0 013043E2 		sub	r3, r3, #1
 4845 31c4 10204BE2 		sub	r2, fp, #16
 4846 31c8 B33092E1 		ldrh	r3, [r2, r3]
 4847 31cc 0320A0E1 		mov	r2, r3
 4848 31d0 463F4BE2 		sub	r3, fp, #280
 4849 31d4 043083E2 		add	r3, r3, #4
 4850 31d8 0300A0E1 		mov	r0, r3
 4851 31dc 0210A0E1 		mov	r1, r2
 4852 31e0 FEFFFFEB 		bl	UART_SendMsg
 4853              	.L164:
 852:lab.c         ****                 }
 853:lab.c         ****                 if ((msg_flag & (1 << FMSENSOR_ID)) > 0) {
 4855              	.LM339:
 4856 31e4 6C329FE5 		ldr	r3, .L182+12
 4857 31e8 003093E5 		ldr	r3, [r3, #0]
 4858 31ec 083003E2 		and	r3, r3, #8
 4859 31f0 000053E3 		cmp	r3, #0
 4860 31f4 0D00000A 		beq	.L166
 854:lab.c         ****                     fmSensorObject_tomessage(&g_sensor, &msgObj);
 4862              	.LM340:
 4863 31f8 463F4BE2 		sub	r3, fp, #280
 4864 31fc 5C029FE5 		ldr	r0, .L182+20
 4865 3200 0310A0E1 		mov	r1, r3
 4866 3204 FEFFFFEB 		bl	fmSensorObject_tomessage
 855:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4868              	.LM341:
 4869 3208 413FE0E3 		mvn	r3, #260
 4870 320c 013043E2 		sub	r3, r3, #1
 4871 3210 10204BE2 		sub	r2, fp, #16
 4872 3214 B33092E1 		ldrh	r3, [r2, r3]
 4873 3218 0320A0E1 		mov	r2, r3
 4874 321c 463F4BE2 		sub	r3, fp, #280
 4875 3220 043083E2 		add	r3, r3, #4
 4876 3224 0300A0E1 		mov	r0, r3
 4877 3228 0210A0E1 		mov	r1, r2
 4878 322c FEFFFFEB 		bl	UART_SendMsg
 4879              	.L166:
 856:lab.c         ****                 }
 857:lab.c         ****                 if ((msg_flag & (1 << FMGPSSENSOR_ID)) > 0) {
 4881              	.LM342:
 4882 3230 20329FE5 		ldr	r3, .L182+12
 4883 3234 003093E5 		ldr	r3, [r3, #0]
 4884 3238 203003E2 		and	r3, r3, #32
 4885 323c 000053E3 		cmp	r3, #0
 4886 3240 0D00000A 		beq	.L168
 858:lab.c         ****                     fmGPSSensorObject_tomessage(&g_gpssensor, &msgObj);
 4888              	.LM343:
 4889 3244 463F4BE2 		sub	r3, fp, #280
 4890 3248 14029FE5 		ldr	r0, .L182+24
 4891 324c 0310A0E1 		mov	r1, r3
 4892 3250 FEFFFFEB 		bl	fmGPSSensorObject_tomessage
 859:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4894              	.LM344:
 4895 3254 413FE0E3 		mvn	r3, #260
 4896 3258 013043E2 		sub	r3, r3, #1
 4897 325c 10204BE2 		sub	r2, fp, #16
 4898 3260 B33092E1 		ldrh	r3, [r2, r3]
 4899 3264 0320A0E1 		mov	r2, r3
 4900 3268 463F4BE2 		sub	r3, fp, #280
 4901 326c 043083E2 		add	r3, r3, #4
 4902 3270 0300A0E1 		mov	r0, r3
 4903 3274 0210A0E1 		mov	r1, r2
 4904 3278 FEFFFFEB 		bl	UART_SendMsg
 4905              	.L168:
 860:lab.c         ****                 }
 861:lab.c         ****                 if ((msg_flag & (1 << FMMOTORINPUT_ID)) > 0) {
 4907              	.LM345:
 4908 327c D4319FE5 		ldr	r3, .L182+12
 4909 3280 003093E5 		ldr	r3, [r3, #0]
 4910 3284 803003E2 		and	r3, r3, #128
 4911 3288 000053E3 		cmp	r3, #0
 4912 328c 0D00000A 		beq	.L163
 862:lab.c         ****                     fmMotorInputObject_tomessage(&g_motorinput, &msgObj);
 4914              	.LM346:
 4915 3290 463F4BE2 		sub	r3, fp, #280
 4916 3294 CC019FE5 		ldr	r0, .L182+28
 4917 3298 0310A0E1 		mov	r1, r3
 4918 329c FEFFFFEB 		bl	fmMotorInputObject_tomessage
 863:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4920              	.LM347:
 4921 32a0 413FE0E3 		mvn	r3, #260
 4922 32a4 013043E2 		sub	r3, r3, #1
 4923 32a8 10204BE2 		sub	r2, fp, #16
 4924 32ac B33092E1 		ldrh	r3, [r2, r3]
 4925 32b0 0320A0E1 		mov	r2, r3
 4926 32b4 463F4BE2 		sub	r3, fp, #280
 4927 32b8 043083E2 		add	r3, r3, #4
 4928 32bc 0300A0E1 		mov	r0, r3
 4929 32c0 0210A0E1 		mov	r1, r2
 4930 32c4 FEFFFFEB 		bl	UART_SendMsg
 4931              	.L163:
 864:lab.c         ****                 }
 865:lab.c         ****             }
 866:lab.c         **** 
 867:lab.c         ****             if ((output_count % 2 > 0) || sendmsg) { // ODD
 4933              	.LM348:
 4934 32c8 84319FE5 		ldr	r3, .L182+8
 4935 32cc 003093E5 		ldr	r3, [r3, #0]
 4936 32d0 013003E2 		and	r3, r3, #1
 4937 32d4 FF3003E2 		and	r3, r3, #255
 4938 32d8 000053E3 		cmp	r3, #0
 4939 32dc 0200001A 		bne	.L171
 4940 32e0 14301BE5 		ldr	r3, [fp, #-20]
 4941 32e4 000053E3 		cmp	r3, #0
 4942 32e8 4C00000A 		beq	.L173
 4943              	.L171:
 868:lab.c         ****                 if ((msg_flag & (1 << FMSTATE_ID)) > 0) {
 4945              	.LM349:
 4946 32ec 64319FE5 		ldr	r3, .L182+12
 4947 32f0 003093E5 		ldr	r3, [r3, #0]
 4948 32f4 023003E2 		and	r3, r3, #2
 4949 32f8 000053E3 		cmp	r3, #0
 4950 32fc 0D00000A 		beq	.L174
 869:lab.c         ****                     fmStateObject_tomessage(&g_state, &msgObj);
 4952              	.LM350:
 4953 3300 463F4BE2 		sub	r3, fp, #280
 4954 3304 60019FE5 		ldr	r0, .L182+32
 4955 3308 0310A0E1 		mov	r1, r3
 4956 330c FEFFFFEB 		bl	fmStateObject_tomessage
 870:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4958              	.LM351:
 4959 3310 413FE0E3 		mvn	r3, #260
 4960 3314 013043E2 		sub	r3, r3, #1
 4961 3318 10204BE2 		sub	r2, fp, #16
 4962 331c B33092E1 		ldrh	r3, [r2, r3]
 4963 3320 0320A0E1 		mov	r2, r3
 4964 3324 463F4BE2 		sub	r3, fp, #280
 4965 3328 043083E2 		add	r3, r3, #4
 4966 332c 0300A0E1 		mov	r0, r3
 4967 3330 0210A0E1 		mov	r1, r2
 4968 3334 FEFFFFEB 		bl	UART_SendMsg
 4969              	.L174:
 871:lab.c         ****                 }
 872:lab.c         ****                 if ((msg_flag & (1 << FMROTOR_ID)) > 0) {
 4971              	.LM352:
 4972 3338 18319FE5 		ldr	r3, .L182+12
 4973 333c 003093E5 		ldr	r3, [r3, #0]
 4974 3340 403003E2 		and	r3, r3, #64
 4975 3344 000053E3 		cmp	r3, #0
 4976 3348 0D00000A 		beq	.L176
 873:lab.c         ****                     fmRotorObject_tomessage(&g_rotor, &msgObj);
 4978              	.LM353:
 4979 334c 463F4BE2 		sub	r3, fp, #280
 4980 3350 18019FE5 		ldr	r0, .L182+36
 4981 3354 0310A0E1 		mov	r1, r3
 4982 3358 FEFFFFEB 		bl	fmRotorObject_tomessage
 874:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 4984              	.LM354:
 4985 335c 413FE0E3 		mvn	r3, #260
 4986 3360 013043E2 		sub	r3, r3, #1
 4987 3364 10204BE2 		sub	r2, fp, #16
 4988 3368 B33092E1 		ldrh	r3, [r2, r3]
 4989 336c 0320A0E1 		mov	r2, r3
 4990 3370 463F4BE2 		sub	r3, fp, #280
 4991 3374 043083E2 		add	r3, r3, #4
 4992 3378 0300A0E1 		mov	r0, r3
 4993 337c 0210A0E1 		mov	r1, r2
 4994 3380 FEFFFFEB 		bl	UART_SendMsg
 4995              	.L176:
 875:lab.c         ****                 }
 876:lab.c         ****                 if ((msg_flag & (1 << FMPLANNERINFO_ID)) > 0) {
 4997              	.LM355:
 4998 3384 CC309FE5 		ldr	r3, .L182+12
 4999 3388 003093E5 		ldr	r3, [r3, #0]
 5000 338c 023903E2 		and	r3, r3, #32768
 5001 3390 000053E3 		cmp	r3, #0
 5002 3394 0D00000A 		beq	.L178
 877:lab.c         ****                     fmPlannerInfo_tomessage(&g_pinfo, &msgObj);
 5004              	.LM356:
 5005 3398 463F4BE2 		sub	r3, fp, #280
 5006 339c D0009FE5 		ldr	r0, .L182+40
 5007 33a0 0310A0E1 		mov	r1, r3
 5008 33a4 FEFFFFEB 		bl	fmPlannerInfo_tomessage
 878:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 5010              	.LM357:
 5011 33a8 413FE0E3 		mvn	r3, #260
 5012 33ac 013043E2 		sub	r3, r3, #1
 5013 33b0 10204BE2 		sub	r2, fp, #16
 5014 33b4 B33092E1 		ldrh	r3, [r2, r3]
 5015 33b8 0320A0E1 		mov	r2, r3
 5016 33bc 463F4BE2 		sub	r3, fp, #280
 5017 33c0 043083E2 		add	r3, r3, #4
 5018 33c4 0300A0E1 		mov	r0, r3
 5019 33c8 0210A0E1 		mov	r1, r2
 5020 33cc FEFFFFEB 		bl	UART_SendMsg
 5021              	.L178:
 879:lab.c         ****                 }
 880:lab.c         ****                 // added by Vishwa Shah for testing
 881:lab.c         ****                 if ((msg_flag & (1 << FMINNERLOOP_ID)) > 0) {
 5023              	.LM358:
 5024 33d0 80309FE5 		ldr	r3, .L182+12
 5025 33d4 003093E5 		ldr	r3, [r3, #0]
 5026 33d8 013A03E2 		and	r3, r3, #4096
 5027 33dc 000053E3 		cmp	r3, #0
 5028 33e0 0E00000A 		beq	.L173
 882:lab.c         ****                     fmInnerloopObject_tomessage(&u_outer,&msgObj);
 5030              	.LM359:
 5031 33e4 8C309FE5 		ldr	r3, .L182+44
 5032 33e8 462F4BE2 		sub	r2, fp, #280
 5033 33ec 0300A0E1 		mov	r0, r3
 5034 33f0 0210A0E1 		mov	r1, r2
 5035 33f4 FEFFFFEB 		bl	fmInnerloopObject_tomessage
 883:lab.c         ****                     UART_SendMsg(msgObj.data, msgObj.iMsgSize);
 5037              	.LM360:
 5038 33f8 413FE0E3 		mvn	r3, #260
 5039 33fc 013043E2 		sub	r3, r3, #1
 5040 3400 10204BE2 		sub	r2, fp, #16
 5041 3404 B33092E1 		ldrh	r3, [r2, r3]
 5042 3408 0320A0E1 		mov	r2, r3
 5043 340c 463F4BE2 		sub	r3, fp, #280
 5044 3410 043083E2 		add	r3, r3, #4
 5045 3414 0300A0E1 		mov	r0, r3
 5046 3418 0210A0E1 		mov	r1, r2
 5047 341c FEFFFFEB 		bl	UART_SendMsg
 5048              	.L173:
 884:lab.c         ****                 }
 885:lab.c         ****             }
 886:lab.c         **** 
 887:lab.c         ****             output_timer = 0;
 5050              	.LM361:
 5051 3420 24209FE5 		ldr	r2, .L182
 5052 3424 0030A0E3 		mov	r3, #0
 5053 3428 003082E5 		str	r3, [r2, #0]
 888:lab.c         ****             output_count++;
 5055              	.LM362:
 5056 342c 20309FE5 		ldr	r3, .L182+8
 5057 3430 003093E5 		ldr	r3, [r3, #0]
 5058 3434 012083E2 		add	r2, r3, #1
 5059 3438 14309FE5 		ldr	r3, .L182+8
 5060 343c 002083E5 		str	r2, [r3, #0]
 5061              	.L181:
 5062              	.LBE2:
 889:lab.c         ****         }
 890:lab.c         ****     // }
 891:lab.c         **** }
 5064              	.LM363:
 5065 3440 10D04BE2 		sub	sp, fp, #16
 5066 3444 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 5067 3448 1EFF2FE1 		bx	lr
 5068              	.L183:
 5069              		.align	2
 5070              	.L182:
 5071 344c 00000000 		.word	output_timer
 5072 3450 00000000 		.word	DataOutputsPerSecond
 5073 3454 00000000 		.word	output_count
 5074 3458 00000000 		.word	msg_flag
 5075 345c 00000000 		.word	g_status
 5076 3460 00000000 		.word	g_sensor
 5077 3464 00000000 		.word	g_gpssensor
 5078 3468 00000000 		.word	g_motorinput
 5079 346c 00000000 		.word	g_state
 5080 3470 00000000 		.word	g_rotor
 5081 3474 00000000 		.word	g_pinfo
 5082 3478 00000000 		.word	u_outer
 5088              	.Lscope19:
 5089              		.align	2
 5093              		.global	motor_omega_to_cmd
 5095              	motor_omega_to_cmd:
 892:lab.c         **** 
 893:lab.c         **** //float motor_calib_inv(float omega_des){
 894:lab.c         **** //    return (1.47*omega_des-24.4);
 895:lab.c         **** //}
 896:lab.c         **** 
 897:lab.c         **** void motor_omega_to_cmd(float* omega, float* cmd) { //{{{1
 5097              	.LM364:
 5098              		@ Function supports interworking.
 5099              		@ args = 0, pretend = 0, frame = 12
 5100              		@ frame_needed = 1, uses_anonymous_args = 0
 5101 347c 0DC0A0E1 		mov	ip, sp
 5102 3480 30D82DE9 		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 5103 3484 04B04CE2 		sub	fp, ip, #4
 5104 3488 0CD04DE2 		sub	sp, sp, #12
 5105 348c 1C000BE5 		str	r0, [fp, #-28]
 5106 3490 20100BE5 		str	r1, [fp, #-32]
 898:lab.c         ****     int i;
 899:lab.c         ****     for (i = 0; i < 4; i++) {
 5108              	.LM365:
 5109 3494 0030A0E3 		mov	r3, #0
 5110 3498 18300BE5 		str	r3, [fp, #-24]
 5111 349c 240000EA 		b	.L185
 5112              	.L186:
 900:lab.c         ****         ///////// HUMMINGBIRD ////////////
 901:lab.c         ****         cmd[i] = 0.2352 * omega[i] - 24.6266;
 5114              	.LM366:
 5115 34a0 18301BE5 		ldr	r3, [fp, #-24]
 5116 34a4 0331A0E1 		mov	r3, r3, asl #2
 5117 34a8 0320A0E1 		mov	r2, r3
 5118 34ac 20301BE5 		ldr	r3, [fp, #-32]
 5119 34b0 035082E0 		add	r5, r2, r3
 5120 34b4 18301BE5 		ldr	r3, [fp, #-24]
 5121 34b8 0331A0E1 		mov	r3, r3, asl #2
 5122 34bc 0320A0E1 		mov	r2, r3
 5123 34c0 1C301BE5 		ldr	r3, [fp, #-28]
 5124 34c4 033082E0 		add	r3, r2, r3
 5125 34c8 003093E5 		ldr	r3, [r3, #0]	@ float
 5126 34cc 0300A0E1 		mov	r0, r3
 5127 34d0 FEFFFFEB 		bl	__extendsfdf2
 5128 34d4 0030A0E1 		mov	r3, r0
 5129 34d8 0140A0E1 		mov	r4, r1
 5130 34dc 0300A0E1 		mov	r0, r3
 5131 34e0 0410A0E1 		mov	r1, r4
 5132 34e4 60208FE2 		adr	r2, .L189
 5133 34e8 0C0092E8 		ldmia	r2, {r2-r3}
 5134 34ec FEFFFFEB 		bl	__muldf3
 5135 34f0 0030A0E1 		mov	r3, r0
 5136 34f4 0140A0E1 		mov	r4, r1
 5137 34f8 0300A0E1 		mov	r0, r3
 5138 34fc 0410A0E1 		mov	r1, r4
 5139 3500 4C208FE2 		adr	r2, .L189+8
 5140 3504 0C0092E8 		ldmia	r2, {r2-r3}
 5141 3508 FEFFFFEB 		bl	__subdf3
 5142 350c 0030A0E1 		mov	r3, r0
 5143 3510 0140A0E1 		mov	r4, r1
 5144 3514 0300A0E1 		mov	r0, r3
 5145 3518 0410A0E1 		mov	r1, r4
 5146 351c FEFFFFEB 		bl	__truncdfsf2
 5147 3520 0030A0E1 		mov	r3, r0
 5148 3524 003085E5 		str	r3, [r5, #0]	@ float
 899:lab.c         ****     for (i = 0; i < 4; i++) {
 5150              	.LM367:
 5151 3528 18301BE5 		ldr	r3, [fp, #-24]
 5152 352c 013083E2 		add	r3, r3, #1
 5153 3530 18300BE5 		str	r3, [fp, #-24]
 5154              	.L185:
 5155 3534 18301BE5 		ldr	r3, [fp, #-24]
 5156 3538 030053E3 		cmp	r3, #3
 5157 353c D7FFFFDA 		ble	.L186
 902:lab.c         ****         ///////// PELICAN ////////////////
 903:lab.c         ****         //cmd[i] = 0.2465 * omega[i] - 31.1405;
 904:lab.c         ****     }
 905:lab.c         **** }
 5159              	.LM368:
 5160 3540 14D04BE2 		sub	sp, fp, #20
 5161 3544 30689DE8 		ldmfd	sp, {r4, r5, fp, sp, lr}
 5162 3548 1EFF2FE1 		bx	lr
 5163              	.L190:
 5164              		.align	2
 5165              	.L189:
 5166 354c 081BCE3F 		.word	1070471944
 5167 3550 2575029A 		.word	-1711114971
 5168 3554 68A03840 		.word	1077452904
 5169 3558 71AC8BDB 		.word	-611603343
 5174              	.Lscope20:
 5175              		.align	2
 5179              		.global	u_to_rotorspeed
 5181              	u_to_rotorspeed:
 906:lab.c         **** 
 907:lab.c         **** void u_to_rotorspeed(float* u, float* omega_cmd) { //{{{1
 5183              	.LM369:
 5184              		@ Function supports interworking.
 5185              		@ args = 0, pretend = 0, frame = 24
 5186              		@ frame_needed = 1, uses_anonymous_args = 0
 5187 355c 0DC0A0E1 		mov	ip, sp
 5188 3560 70D82DE9 		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 5189 3564 04B04CE2 		sub	fp, ip, #4
 5190 3568 20D04DE2 		sub	sp, sp, #32
 5191 356c 2C000BE5 		str	r0, [fp, #-44]
 5192 3570 30100BE5 		str	r1, [fp, #-48]
 908:lab.c         ****     float twolkF = 1.0/(2.0*l*kF);
 5194              	.LM370:
 5195 3574 A0339FE5 		ldr	r3, .L200
 5196 3578 003093E5 		ldr	r3, [r3, #0]	@ float
 5197 357c 0300A0E1 		mov	r0, r3
 5198 3580 FEFFFFEB 		bl	__extendsfdf2
 5199 3584 0030A0E1 		mov	r3, r0
 5200 3588 0140A0E1 		mov	r4, r1
 5201 358c 0300A0E1 		mov	r0, r3
 5202 3590 0410A0E1 		mov	r1, r4
 5203 3594 0320A0E1 		mov	r2, r3
 5204 3598 0430A0E1 		mov	r3, r4
 5205 359c FEFFFFEB 		bl	__adddf3
 5206 35a0 0030A0E1 		mov	r3, r0
 5207 35a4 0140A0E1 		mov	r4, r1
 5208 35a8 0350A0E1 		mov	r5, r3
 5209 35ac 0460A0E1 		mov	r6, r4
 5210 35b0 68339FE5 		ldr	r3, .L200+4
 5211 35b4 003093E5 		ldr	r3, [r3, #0]	@ float
 5212 35b8 0300A0E1 		mov	r0, r3
 5213 35bc FEFFFFEB 		bl	__extendsfdf2
 5214 35c0 0030A0E1 		mov	r3, r0
 5215 35c4 0140A0E1 		mov	r4, r1
 5216 35c8 0500A0E1 		mov	r0, r5
 5217 35cc 0610A0E1 		mov	r1, r6
 5218 35d0 0320A0E1 		mov	r2, r3
 5219 35d4 0430A0E1 		mov	r3, r4
 5220 35d8 FEFFFFEB 		bl	__muldf3
 5221 35dc 0030A0E1 		mov	r3, r0
 5222 35e0 0140A0E1 		mov	r4, r1
 5223 35e4 FF05A0E3 		mov	r0, #1069547520
 5224 35e8 030680E2 		add	r0, r0, #3145728
 5225 35ec 0010A0E3 		mov	r1, #0
 5226 35f0 0320A0E1 		mov	r2, r3
 5227 35f4 0430A0E1 		mov	r3, r4
 5228 35f8 FEFFFFEB 		bl	__divdf3
 5229 35fc 0030A0E1 		mov	r3, r0
 5230 3600 0140A0E1 		mov	r4, r1
 5231 3604 0300A0E1 		mov	r0, r3
 5232 3608 0410A0E1 		mov	r1, r4
 5233 360c FEFFFFEB 		bl	__truncdfsf2
 5234 3610 0030A0E1 		mov	r3, r0
 5235 3614 28300BE5 		str	r3, [fp, #-40]	@ float
 909:lab.c         ****     float fourkF = 1.0/(4.0*kF);
 5237              	.LM371:
 5238 3618 00339FE5 		ldr	r3, .L200+4
 5239 361c 003093E5 		ldr	r3, [r3, #0]	@ float
 5240 3620 0300A0E1 		mov	r0, r3
 5241 3624 FEFFFFEB 		bl	__extendsfdf2
 5242 3628 0030A0E1 		mov	r3, r0
 5243 362c 0140A0E1 		mov	r4, r1
 5244 3630 0300A0E1 		mov	r0, r3
 5245 3634 0410A0E1 		mov	r1, r4
 5246 3638 0121A0E3 		mov	r2, #1073741824
 5247 363c 012682E2 		add	r2, r2, #1048576
 5248 3640 0030A0E3 		mov	r3, #0
 5249 3644 FEFFFFEB 		bl	__muldf3
 5250 3648 0030A0E1 		mov	r3, r0
 5251 364c 0140A0E1 		mov	r4, r1
 5252 3650 FF05A0E3 		mov	r0, #1069547520
 5253 3654 030680E2 		add	r0, r0, #3145728
 5254 3658 0010A0E3 		mov	r1, #0
 5255 365c 0320A0E1 		mov	r2, r3
 5256 3660 0430A0E1 		mov	r3, r4
 5257 3664 FEFFFFEB 		bl	__divdf3
 5258 3668 0030A0E1 		mov	r3, r0
 5259 366c 0140A0E1 		mov	r4, r1
 5260 3670 0300A0E1 		mov	r0, r3
 5261 3674 0410A0E1 		mov	r1, r4
 5262 3678 FEFFFFEB 		bl	__truncdfsf2
 5263 367c 0030A0E1 		mov	r3, r0
 5264 3680 24300BE5 		str	r3, [fp, #-36]	@ float
 910:lab.c         ****     float fourkM = 1.0/(4.0*kM);
 5266              	.LM372:
 5267 3684 98329FE5 		ldr	r3, .L200+8
 5268 3688 003093E5 		ldr	r3, [r3, #0]	@ float
 5269 368c 0300A0E1 		mov	r0, r3
 5270 3690 FEFFFFEB 		bl	__extendsfdf2
 5271 3694 0030A0E1 		mov	r3, r0
 5272 3698 0140A0E1 		mov	r4, r1
 5273 369c 0300A0E1 		mov	r0, r3
 5274 36a0 0410A0E1 		mov	r1, r4
 5275 36a4 0121A0E3 		mov	r2, #1073741824
 5276 36a8 012682E2 		add	r2, r2, #1048576
 5277 36ac 0030A0E3 		mov	r3, #0
 5278 36b0 FEFFFFEB 		bl	__muldf3
 5279 36b4 0030A0E1 		mov	r3, r0
 5280 36b8 0140A0E1 		mov	r4, r1
 5281 36bc FF05A0E3 		mov	r0, #1069547520
 5282 36c0 030680E2 		add	r0, r0, #3145728
 5283 36c4 0010A0E3 		mov	r1, #0
 5284 36c8 0320A0E1 		mov	r2, r3
 5285 36cc 0430A0E1 		mov	r3, r4
 5286 36d0 FEFFFFEB 		bl	__divdf3
 5287 36d4 0030A0E1 		mov	r3, r0
 5288 36d8 0140A0E1 		mov	r4, r1
 5289 36dc 0300A0E1 		mov	r0, r3
 5290 36e0 0410A0E1 		mov	r1, r4
 5291 36e4 FEFFFFEB 		bl	__truncdfsf2
 5292 36e8 0030A0E1 		mov	r3, r0
 5293 36ec 20300BE5 		str	r3, [fp, #-32]	@ float
 911:lab.c         ****     Winv[0] = 0;
 5295              	.LM373:
 5296 36f0 30229FE5 		ldr	r2, .L200+12
 5297 36f4 30329FE5 		ldr	r3, .L200+16	@ float
 5298 36f8 003082E5 		str	r3, [r2, #0]	@ float
 912:lab.c         ****     Winv[1] = twolkF;
 5300              	.LM374:
 5301 36fc 24229FE5 		ldr	r2, .L200+12
 5302 3700 28301BE5 		ldr	r3, [fp, #-40]	@ float
 5303 3704 043082E5 		str	r3, [r2, #4]	@ float
 913:lab.c         ****     Winv[2] = -fourkM;
 5305              	.LM375:
 5306 3708 20301BE5 		ldr	r3, [fp, #-32]
 5307 370c 022123E2 		eor	r2, r3, #-2147483648
 5308 3710 10329FE5 		ldr	r3, .L200+12
 5309 3714 082083E5 		str	r2, [r3, #8]	@ float
 914:lab.c         ****     Winv[3] = fourkF;
 5311              	.LM376:
 5312 3718 08229FE5 		ldr	r2, .L200+12
 5313 371c 24301BE5 		ldr	r3, [fp, #-36]	@ float
 5314 3720 0C3082E5 		str	r3, [r2, #12]	@ float
 915:lab.c         ****     Winv[1*4+0]= - twolkF;
 5316              	.LM377:
 5317 3724 28301BE5 		ldr	r3, [fp, #-40]
 5318 3728 022123E2 		eor	r2, r3, #-2147483648
 5319 372c F4319FE5 		ldr	r3, .L200+12
 5320 3730 102083E5 		str	r2, [r3, #16]	@ float
 916:lab.c         ****     Winv[1*4+1]= 0;
 5322              	.LM378:
 5323 3734 EC219FE5 		ldr	r2, .L200+12
 5324 3738 EC319FE5 		ldr	r3, .L200+16	@ float
 5325 373c 143082E5 		str	r3, [r2, #20]	@ float
 917:lab.c         ****     Winv[1*4+2]= fourkM;
 5327              	.LM379:
 5328 3740 E0219FE5 		ldr	r2, .L200+12
 5329 3744 20301BE5 		ldr	r3, [fp, #-32]	@ float
 5330 3748 183082E5 		str	r3, [r2, #24]	@ float
 918:lab.c         ****     Winv[1*4+3]= fourkF;
 5332              	.LM380:
 5333 374c D4219FE5 		ldr	r2, .L200+12
 5334 3750 24301BE5 		ldr	r3, [fp, #-36]	@ float
 5335 3754 1C3082E5 		str	r3, [r2, #28]	@ float
 919:lab.c         ****     Winv[2*4+0]= 0;
 5337              	.LM381:
 5338 3758 C8219FE5 		ldr	r2, .L200+12
 5339 375c C8319FE5 		ldr	r3, .L200+16	@ float
 5340 3760 203082E5 		str	r3, [r2, #32]	@ float
 920:lab.c         ****     Winv[2*4+1]= -twolkF;
 5342              	.LM382:
 5343 3764 28301BE5 		ldr	r3, [fp, #-40]
 5344 3768 022123E2 		eor	r2, r3, #-2147483648
 5345 376c B4319FE5 		ldr	r3, .L200+12
 5346 3770 242083E5 		str	r2, [r3, #36]	@ float
 921:lab.c         ****     Winv[2*4+2]= - fourkM;
 5348              	.LM383:
 5349 3774 20301BE5 		ldr	r3, [fp, #-32]
 5350 3778 022123E2 		eor	r2, r3, #-2147483648
 5351 377c A4319FE5 		ldr	r3, .L200+12
 5352 3780 282083E5 		str	r2, [r3, #40]	@ float
 922:lab.c         ****     Winv[2*4+3]= fourkF;
 5354              	.LM384:
 5355 3784 9C219FE5 		ldr	r2, .L200+12
 5356 3788 24301BE5 		ldr	r3, [fp, #-36]	@ float
 5357 378c 2C3082E5 		str	r3, [r2, #44]	@ float
 923:lab.c         ****     Winv[3*4+0]= twolkF;
 5359              	.LM385:
 5360 3790 90219FE5 		ldr	r2, .L200+12
 5361 3794 28301BE5 		ldr	r3, [fp, #-40]	@ float
 5362 3798 303082E5 		str	r3, [r2, #48]	@ float
 924:lab.c         ****     Winv[3*4+1]= 0;
 5364              	.LM386:
 5365 379c 84219FE5 		ldr	r2, .L200+12
 5366 37a0 84319FE5 		ldr	r3, .L200+16	@ float
 5367 37a4 343082E5 		str	r3, [r2, #52]	@ float
 925:lab.c         ****     Winv[3*4+2]= fourkM;
 5369              	.LM387:
 5370 37a8 78219FE5 		ldr	r2, .L200+12
 5371 37ac 20301BE5 		ldr	r3, [fp, #-32]	@ float
 5372 37b0 383082E5 		str	r3, [r2, #56]	@ float
 926:lab.c         ****     Winv[3*4+3]= fourkF;
 5374              	.LM388:
 5375 37b4 6C219FE5 		ldr	r2, .L200+12
 5376 37b8 24301BE5 		ldr	r3, [fp, #-36]	@ float
 5377 37bc 3C3082E5 		str	r3, [r2, #60]	@ float
 927:lab.c         **** 
 928:lab.c         ****     matrix_multiply(4,4,1,Winv,u,omega_cmd);
 5379              	.LM389:
 5380 37c0 2C301BE5 		ldr	r3, [fp, #-44]
 5381 37c4 00308DE5 		str	r3, [sp, #0]
 5382 37c8 30301BE5 		ldr	r3, [fp, #-48]
 5383 37cc 04308DE5 		str	r3, [sp, #4]
 5384 37d0 0400A0E3 		mov	r0, #4
 5385 37d4 0410A0E3 		mov	r1, #4
 5386 37d8 0120A0E3 		mov	r2, #1
 5387 37dc 44319FE5 		ldr	r3, .L200+12
 5388 37e0 FEFFFFEB 		bl	matrix_multiply
 929:lab.c         **** 
 930:lab.c         ****     int i;
 931:lab.c         ****     for (i=0; i<4; i++) {
 5390              	.LM390:
 5391 37e4 0030A0E3 		mov	r3, #0
 5392 37e8 1C300BE5 		str	r3, [fp, #-28]
 5393 37ec 440000EA 		b	.L192
 5394              	.L193:
 932:lab.c         ****         if (omega_cmd[i] < 0)
 5396              	.LM391:
 5397 37f0 1C301BE5 		ldr	r3, [fp, #-28]
 5398 37f4 0331A0E1 		mov	r3, r3, asl #2
 5399 37f8 0320A0E1 		mov	r2, r3
 5400 37fc 30301BE5 		ldr	r3, [fp, #-48]
 5401 3800 033082E0 		add	r3, r2, r3
 5402 3804 003093E5 		ldr	r3, [r3, #0]	@ float
 5403 3808 0300A0E1 		mov	r0, r3
 5404 380c 18119FE5 		ldr	r1, .L200+16	@ float
 5405 3810 FEFFFFEB 		bl	__ltsf2
 5406 3814 0030A0E1 		mov	r3, r0
 5407 3818 000053E3 		cmp	r3, #0
 5408 381c 000000BA 		blt	.L196
 5409 3820 1B0000EA 		b	.L194
 5410              	.L196:
 933:lab.c         ****             omega_cmd[i] = -sqrt(-omega_cmd[i]); //omega_hover - sqrt(-omega_cmd[i]);
 5412              	.LM392:
 5413 3824 1C301BE5 		ldr	r3, [fp, #-28]
 5414 3828 0331A0E1 		mov	r3, r3, asl #2
 5415 382c 0320A0E1 		mov	r2, r3
 5416 3830 30301BE5 		ldr	r3, [fp, #-48]
 5417 3834 035082E0 		add	r5, r2, r3
 5418 3838 1C301BE5 		ldr	r3, [fp, #-28]
 5419 383c 0331A0E1 		mov	r3, r3, asl #2
 5420 3840 0320A0E1 		mov	r2, r3
 5421 3844 30301BE5 		ldr	r3, [fp, #-48]
 5422 3848 033082E0 		add	r3, r2, r3
 5423 384c 003093E5 		ldr	r3, [r3, #0]	@ float
 5424 3850 023123E2 		eor	r3, r3, #-2147483648
 5425 3854 0300A0E1 		mov	r0, r3
 5426 3858 FEFFFFEB 		bl	__extendsfdf2
 5427 385c 0030A0E1 		mov	r3, r0
 5428 3860 0140A0E1 		mov	r4, r1
 5429 3864 0300A0E1 		mov	r0, r3
 5430 3868 0410A0E1 		mov	r1, r4
 5431 386c FEFFFFEB 		bl	sqrt
 5432 3870 0030A0E1 		mov	r3, r0
 5433 3874 0140A0E1 		mov	r4, r1
 5434 3878 0300A0E1 		mov	r0, r3
 5435 387c 0410A0E1 		mov	r1, r4
 5436 3880 FEFFFFEB 		bl	__truncdfsf2
 5437 3884 0030A0E1 		mov	r3, r0
 5438 3888 023123E2 		eor	r3, r3, #-2147483648
 5439 388c 003085E5 		str	r3, [r5, #0]	@ float
 5440 3890 180000EA 		b	.L197
 5441              	.L194:
 934:lab.c         ****         else
 935:lab.c         ****             omega_cmd[i] = sqrt(omega_cmd[i]); //omega_hover + sqrt(omega_cmd[i]);
 5443              	.LM393:
 5444 3894 1C301BE5 		ldr	r3, [fp, #-28]
 5445 3898 0331A0E1 		mov	r3, r3, asl #2
 5446 389c 0320A0E1 		mov	r2, r3
 5447 38a0 30301BE5 		ldr	r3, [fp, #-48]
 5448 38a4 035082E0 		add	r5, r2, r3
 5449 38a8 1C301BE5 		ldr	r3, [fp, #-28]
 5450 38ac 0331A0E1 		mov	r3, r3, asl #2
 5451 38b0 0320A0E1 		mov	r2, r3
 5452 38b4 30301BE5 		ldr	r3, [fp, #-48]
 5453 38b8 033082E0 		add	r3, r2, r3
 5454 38bc 003093E5 		ldr	r3, [r3, #0]	@ float
 5455 38c0 0300A0E1 		mov	r0, r3
 5456 38c4 FEFFFFEB 		bl	__extendsfdf2
 5457 38c8 0030A0E1 		mov	r3, r0
 5458 38cc 0140A0E1 		mov	r4, r1
 5459 38d0 0300A0E1 		mov	r0, r3
 5460 38d4 0410A0E1 		mov	r1, r4
 5461 38d8 FEFFFFEB 		bl	sqrt
 5462 38dc 0030A0E1 		mov	r3, r0
 5463 38e0 0140A0E1 		mov	r4, r1
 5464 38e4 0300A0E1 		mov	r0, r3
 5465 38e8 0410A0E1 		mov	r1, r4
 5466 38ec FEFFFFEB 		bl	__truncdfsf2
 5467 38f0 0030A0E1 		mov	r3, r0
 5468 38f4 003085E5 		str	r3, [r5, #0]	@ float
 5469              	.L197:
 931:lab.c         ****     for (i=0; i<4; i++) {
 5471              	.LM394:
 5472 38f8 1C301BE5 		ldr	r3, [fp, #-28]
 5473 38fc 013083E2 		add	r3, r3, #1
 5474 3900 1C300BE5 		str	r3, [fp, #-28]
 5475              	.L192:
 5476 3904 1C301BE5 		ldr	r3, [fp, #-28]
 5477 3908 030053E3 		cmp	r3, #3
 5478 390c B7FFFFDA 		ble	.L193
 936:lab.c         ****     }
 937:lab.c         **** 
 938:lab.c         **** }
 5480              	.LM395:
 5481 3910 18D04BE2 		sub	sp, fp, #24
 5482 3914 70689DE8 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 5483 3918 1EFF2FE1 		bx	lr
 5484              	.L201:
 5485              		.align	2
 5486              	.L200:
 5487 391c 00000000 		.word	l
 5488 3920 00000000 		.word	kF
 5489 3924 00000000 		.word	kM
 5490 3928 00000000 		.word	Winv
 5491 392c 00000000 		.word	0
 5499              	.Lscope21:
 5500              		.align	2
 5503              		.global	clip_motor_control
 5505              	clip_motor_control:
 939:lab.c         **** 
 940:lab.c         **** 
 941:lab.c         **** void clip_motor_control(float* cmd) { //{{{1
 5507              	.LM396:
 5508              		@ Function supports interworking.
 5509              		@ args = 0, pretend = 0, frame = 8
 5510              		@ frame_needed = 1, uses_anonymous_args = 0
 5511 3930 0DC0A0E1 		mov	ip, sp
 5512 3934 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 5513 3938 04B04CE2 		sub	fp, ip, #4
 5514 393c 08D04DE2 		sub	sp, sp, #8
 5515 3940 14000BE5 		str	r0, [fp, #-20]
 942:lab.c         ****     //make sure commands are never 0 so that motors will always keep spinning
 943:lab.c         ****     //also make sure that commands stay within range
 944:lab.c         ****     unsigned int i;
 945:lab.c         ****     for (i = 0; i<4; i++) {
 5517              	.LM397:
 5518 3944 0030A0E3 		mov	r3, #0
 5519 3948 10300BE5 		str	r3, [fp, #-16]
 5520 394c 2B0000EA 		b	.L203
 5521              	.L204:
 946:lab.c         ****         if (cmd[i] < 1)
 5523              	.LM398:
 5524 3950 10301BE5 		ldr	r3, [fp, #-16]
 5525 3954 0331A0E1 		mov	r3, r3, asl #2
 5526 3958 0320A0E1 		mov	r2, r3
 5527 395c 14301BE5 		ldr	r3, [fp, #-20]
 5528 3960 033082E0 		add	r3, r2, r3
 5529 3964 003093E5 		ldr	r3, [r3, #0]	@ float
 5530 3968 0300A0E1 		mov	r0, r3
 5531 396c A4109FE5 		ldr	r1, .L213	@ float
 5532 3970 FEFFFFEB 		bl	__ltsf2
 5533 3974 0030A0E1 		mov	r3, r0
 5534 3978 000053E3 		cmp	r3, #0
 5535 397c 000000BA 		blt	.L207
 5536 3980 070000EA 		b	.L205
 5537              	.L207:
 947:lab.c         ****             cmd[i] = 1;
 5539              	.LM399:
 5540 3984 10301BE5 		ldr	r3, [fp, #-16]
 5541 3988 0331A0E1 		mov	r3, r3, asl #2
 5542 398c 0320A0E1 		mov	r2, r3
 5543 3990 14301BE5 		ldr	r3, [fp, #-20]
 5544 3994 032082E0 		add	r2, r2, r3
 5545 3998 78309FE5 		ldr	r3, .L213	@ float
 5546 399c 003082E5 		str	r3, [r2, #0]	@ float
 5547 39a0 130000EA 		b	.L208
 5548              	.L205:
 948:lab.c         ****         else if (cmd[i] > 200)
 5550              	.LM400:
 5551 39a4 10301BE5 		ldr	r3, [fp, #-16]
 5552 39a8 0331A0E1 		mov	r3, r3, asl #2
 5553 39ac 0320A0E1 		mov	r2, r3
 5554 39b0 14301BE5 		ldr	r3, [fp, #-20]
 5555 39b4 033082E0 		add	r3, r2, r3
 5556 39b8 003093E5 		ldr	r3, [r3, #0]	@ float
 5557 39bc 0300A0E1 		mov	r0, r3
 5558 39c0 54109FE5 		ldr	r1, .L213+4	@ float
 5559 39c4 FEFFFFEB 		bl	__gtsf2
 5560 39c8 0030A0E1 		mov	r3, r0
 5561 39cc 000053E3 		cmp	r3, #0
 5562 39d0 000000CA 		bgt	.L210
 5563 39d4 060000EA 		b	.L208
 5564              	.L210:
 949:lab.c         ****             cmd[i] = 200;
 5566              	.LM401:
 5567 39d8 10301BE5 		ldr	r3, [fp, #-16]
 5568 39dc 0331A0E1 		mov	r3, r3, asl #2
 5569 39e0 0320A0E1 		mov	r2, r3
 5570 39e4 14301BE5 		ldr	r3, [fp, #-20]
 5571 39e8 032082E0 		add	r2, r2, r3
 5572 39ec 28309FE5 		ldr	r3, .L213+4	@ float
 5573 39f0 003082E5 		str	r3, [r2, #0]	@ float
 5574              	.L208:
 945:lab.c         ****     for (i = 0; i<4; i++) {
 5576              	.LM402:
 5577 39f4 10301BE5 		ldr	r3, [fp, #-16]
 5578 39f8 013083E2 		add	r3, r3, #1
 5579 39fc 10300BE5 		str	r3, [fp, #-16]
 5580              	.L203:
 5581 3a00 10301BE5 		ldr	r3, [fp, #-16]
 5582 3a04 030053E3 		cmp	r3, #3
 5583 3a08 D0FFFF9A 		bls	.L204
 950:lab.c         ****     }
 951:lab.c         **** //    for (i = 0; i < 4; i++) {
 952:lab.c         **** //        if (!WO_Direct_Individual_Motor_Control.motor[i])
 953:lab.c         **** //            WO_Direct_Individual_Motor_Control.motor[i] = 1;
 954:lab.c         **** //        else if (WO_Direct_Individual_Motor_Control.motor[i] > 200)
 955:lab.c         **** //            WO_Direct_Individual_Motor_Control.motor[i] = 200;
 956:lab.c         **** //    }
 957:lab.c         **** }
 5585              	.LM403:
 5586 3a0c 0CD04BE2 		sub	sp, fp, #12
 5587 3a10 00689DE8 		ldmfd	sp, {fp, sp, lr}
 5588 3a14 1EFF2FE1 		bx	lr
 5589              	.L214:
 5590              		.align	2
 5591              	.L213:
 5592 3a18 0000803F 		.word	1065353216
 5593 3a1c 00004843 		.word	1128792064
 5598              	.Lscope22:
 5599              		.global	__fixunssfsi
 5600              		.align	2
 5602              		.global	AE483_send_control
 5604              	AE483_send_control:
 958:lab.c         **** 
 959:lab.c         **** void AE483_send_control(void) { //{{{1
 5606              	.LM404:
 5607              		@ Function supports interworking.
 5608              		@ args = 0, pretend = 0, frame = 0
 5609              		@ frame_needed = 1, uses_anonymous_args = 0
 5610 3a20 0DC0A0E1 		mov	ip, sp
 5611 3a24 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 5612 3a28 04B04CE2 		sub	fp, ip, #4
 960:lab.c         **** 
 961:lab.c         ****     WO_SDK.ctrl_mode=0x00;    //0x00: direct individual motor control: individual commands for moto
 5614              	.LM405:
 5615 3a2c BC209FE5 		ldr	r2, .L217
 5616 3a30 0030A0E3 		mov	r3, #0
 5617 3a34 0030C2E5 		strb	r3, [r2, #0]
 962:lab.c         ****                             //0x01: direct motor control using standard output mapping: commands ar
 963:lab.c         ****                             //0x02: attitude and throttle control: commands are input for standard 
 964:lab.c         ****                             //0x03: GPS waypoint control
 965:lab.c         **** 
 966:lab.c         ****     WO_SDK.ctrl_enabled=1;  //0: disable control by HL processor
 5619              	.LM406:
 5620 3a38 B0209FE5 		ldr	r2, .L217
 5621 3a3c 0130A0E3 		mov	r3, #1
 5622 3a40 0130C2E5 		strb	r3, [r2, #1]
 967:lab.c         ****                             //1: enable control by HL processor
 968:lab.c         **** 
 969:lab.c         **** //    W[0]=1;
 970:lab.c         **** //    W[1]=0;
 971:lab.c         **** //    W[2]=1;
 972:lab.c         **** //    W[3]=-1;
 973:lab.c         **** //    W[1*4+0]=1;
 974:lab.c         **** //    W[1*4+1]=0;
 975:lab.c         **** //    W[1*4+2]=-1;
 976:lab.c         **** //    W[1*4+3]=-1;
 977:lab.c         **** //    W[2*4+0]=1;
 978:lab.c         **** //    W[2*4+1]=1;
 979:lab.c         **** //    W[2*4+2]=0;
 980:lab.c         **** //    W[2*4+3]=1;
 981:lab.c         **** //    W[3*4+0]=1;
 982:lab.c         **** //    W[3*4+1]=-1;
 983:lab.c         **** //    W[3*4+2]=0;
 984:lab.c         **** //    W[3*4+3]=1;
 985:lab.c         **** 
 986:lab.c         ****     //matrix_multiply(4,4,1,W,g_u,omega_des);
 987:lab.c         **** 
 988:lab.c         ****     u_to_rotorspeed(g_u, g_omega_cmd);
 5624              	.LM407:
 5625 3a44 A8009FE5 		ldr	r0, .L217+4
 5626 3a48 A8109FE5 		ldr	r1, .L217+8
 5627 3a4c FEFFFFEB 		bl	u_to_rotorspeed
 989:lab.c         ****     motor_omega_to_cmd(g_omega_cmd, g_cmd);
 5629              	.LM408:
 5630 3a50 A0009FE5 		ldr	r0, .L217+8
 5631 3a54 A0109FE5 		ldr	r1, .L217+12
 5632 3a58 FEFFFFEB 		bl	motor_omega_to_cmd
 990:lab.c         ****     clip_motor_control(g_cmd);
 5634              	.LM409:
 5635 3a5c 98009FE5 		ldr	r0, .L217+12
 5636 3a60 FEFFFFEB 		bl	clip_motor_control
 991:lab.c         **** 
 992:lab.c         ****     // ACTUAL MOTORS ARE NUMBERED DIFFERENTLY THAN IN LECTURE:
 993:lab.c         ****     // OUR WAY:  motor 0     front (+x)     motor 0   ASCTEC WAY
 994:lab.c         ****     //           motor 1     right (+y)     motor 3
 995:lab.c         ****     //           motor 2     rear (-x)      motor 1
 996:lab.c         ****     //           motor 3     left (-y)      motor 2
 997:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[0] = g_cmd[0]; //motor_calib_inv(omega_des[0]);
 5638              	.LM410:
 5639 3a64 90309FE5 		ldr	r3, .L217+12
 5640 3a68 003093E5 		ldr	r3, [r3, #0]	@ float
 5641 3a6c 0300A0E1 		mov	r0, r3
 5642 3a70 FEFFFFEB 		bl	__fixunssfsi
 5643 3a74 0030A0E1 		mov	r3, r0
 5644 3a78 FF3003E2 		and	r3, r3, #255
 5645 3a7c 7C209FE5 		ldr	r2, .L217+16
 5646 3a80 0030C2E5 		strb	r3, [r2, #0]
 998:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[3] = g_cmd[1]; //motor_calib_inv(omega_des[1]);
 5648              	.LM411:
 5649 3a84 70309FE5 		ldr	r3, .L217+12
 5650 3a88 043093E5 		ldr	r3, [r3, #4]	@ float
 5651 3a8c 0300A0E1 		mov	r0, r3
 5652 3a90 FEFFFFEB 		bl	__fixunssfsi
 5653 3a94 0030A0E1 		mov	r3, r0
 5654 3a98 FF3003E2 		and	r3, r3, #255
 5655 3a9c 5C209FE5 		ldr	r2, .L217+16
 5656 3aa0 0330C2E5 		strb	r3, [r2, #3]
 999:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[1] = g_cmd[2]; //motor_calib_inv(omega_des[2]);
 5658              	.LM412:
 5659 3aa4 50309FE5 		ldr	r3, .L217+12
 5660 3aa8 083093E5 		ldr	r3, [r3, #8]	@ float
 5661 3aac 0300A0E1 		mov	r0, r3
 5662 3ab0 FEFFFFEB 		bl	__fixunssfsi
 5663 3ab4 0030A0E1 		mov	r3, r0
 5664 3ab8 FF3003E2 		and	r3, r3, #255
 5665 3abc 3C209FE5 		ldr	r2, .L217+16
 5666 3ac0 0130C2E5 		strb	r3, [r2, #1]
1000:lab.c         ****     WO_Direct_Individual_Motor_Control.motor[2] = g_cmd[3]; //motor_calib_inv(omega_des[3]);
 5668              	.LM413:
 5669 3ac4 30309FE5 		ldr	r3, .L217+12
 5670 3ac8 0C3093E5 		ldr	r3, [r3, #12]	@ float
 5671 3acc 0300A0E1 		mov	r0, r3
 5672 3ad0 FEFFFFEB 		bl	__fixunssfsi
 5673 3ad4 0030A0E1 		mov	r3, r0
 5674 3ad8 FF3003E2 		and	r3, r3, #255
 5675 3adc 1C209FE5 		ldr	r2, .L217+16
 5676 3ae0 0230C2E5 		strb	r3, [r2, #2]
1001:lab.c         **** 
1002:lab.c         ****     //clip_motor_control();
1003:lab.c         **** }
 5678              	.LM414:
 5679 3ae4 0CD04BE2 		sub	sp, fp, #12
 5680 3ae8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 5681 3aec 1EFF2FE1 		bx	lr
 5682              	.L218:
 5683              		.align	2
 5684              	.L217:
 5685 3af0 00000000 		.word	WO_SDK
 5686 3af4 00000000 		.word	g_u
 5687 3af8 00000000 		.word	g_omega_cmd
 5688 3afc 00000000 		.word	g_cmd
 5689 3b00 00000000 		.word	WO_Direct_Individual_Motor_Control
 5691              	.Lscope23:
 5692              		.comm	GPS_timeout,4,4
 5693              		.comm	SYSTEM_initialized,1,1
 5694              		.comm	myBuf,512,1
 5695              		.comm	g_state,52,4
 5696              		.comm	g_sensor,68,4
 5697              		.comm	g_pinfo,12,4
 5698              		.comm	g_rawsensor,44,4
 5699              		.comm	g_gpssensor,44,4
 5700              		.comm	g_q,16,4
 5701              		.comm	g_angles,12,4
 5702              		.comm	g_rotor,20,4
 5703              		.comm	g_motorinput,20,4
 5704              		.comm	u_outer,28,4
 5705              		.comm	g_status,8,4
 5706              		.comm	ultrasound_z,4,4
 5707              		.comm	ultrasound_vz,4,4
 5708              		.comm	ultrasound_z_prev,4,4
 5709              		.comm	ultrasound_z_error_sum,4,4
 5710              		.comm	ultrasound_timer,4,4
 5711              		.comm	home_x,4,4
 5712              		.comm	home_y,4,4
 5713              		.comm	home_z,4,4
 5714              		.comm	TotalBytesReceived,4,4
 5715              		.comm	my_sdkloop_counter,4,4
 5716              		.comm	state,8,4
 5717              		.comm	nom,8,4
 5718              		.comm	g_u,16,4
 5719              		.comm	g_xerr,48,4
 5720              		.comm	g_omega_cmd,16,4
 5721              		.comm	g_cmd,16,4
 5722              		.comm	W,64,4
 5723              		.comm	R01,36,4
 5724              		.comm	R10,36,4
 5725              		.comm	R01_des,36,4
 5726              		.comm	R10_des,36,4
 5727              		.comm	tmpprod1,36,4
 5728              		.comm	tmpprod2,36,4
 5729              		.comm	e_R,12,4
 5730              		.comm	e_w,12,4
 5731              		.comm	Winv,64,4
 5804              	.Letext0:
 5805              		.ident	"GCC: (GNU) 4.1.1"
DEFINED SYMBOLS
                            *ABS*:00000000 lab.c
     /tmp/ccbozwye.s:230    .bss:00000000 output_timer
     /tmp/ccbozwye.s:227    .bss:00000000 $d
     /tmp/ccbozwye.s:237    .data:00000000 output_count
     /tmp/ccbozwye.s:234    .data:00000000 $d
     /tmp/ccbozwye.s:243    .data:00000004 timer_tic
     /tmp/ccbozwye.s:249    .data:00000008 data_freq_1
     /tmp/ccbozwye.s:255    .data:0000000c data_freq_2
     /tmp/ccbozwye.s:261    .data:00000010 data_freq_3
     /tmp/ccbozwye.s:267    .data:00000014 data_freq_4
     /tmp/ccbozwye.s:273    .data:00000018 data_freq_5
     /tmp/ccbozwye.s:280    .bss:00000004 max_output_count
     /tmp/ccbozwye.s:286    .bss:00000008 comm_start_count
     /tmp/ccbozwye.s:292    .bss:0000000c my_lab_count
     /tmp/ccbozwye.s:298    .bss:00000010 test_time_limit
     /tmp/ccbozwye.s:304    .data:0000001c DataOutputsPerSecond
     /tmp/ccbozwye.s:311    .bss:00000014 outer_loop_timer
     /tmp/ccbozwye.s:317    .bss:00000018 trigger_stop
     /tmp/ccbozwye.s:323    .data:0000001d OuterLoopFrequency
     /tmp/ccbozwye.s:330    .bss:0000001c msg_flag
     /tmp/ccbozwye.s:336    .bss:00000020 trigger_flag
     /tmp/ccbozwye.s:342    .bss:00000024 total_check_current
     /tmp/ccbozwye.s:348    .bss:00000028 total_check_previous
     /tmp/ccbozwye.s:355    .data:00000020 K
     /tmp/ccbozwye.s:362    .data:00000028 K3
     /tmp/ccbozwye.s:416    .bss:0000002c k_p
     /tmp/ccbozwye.s:422    .bss:00000030 k_d
     /tmp/ccbozwye.s:428    .bss:00000034 k_i
     /tmp/ccbozwye.s:434    .bss:00000038 e
     /tmp/ccbozwye.s:441    .data:000000e8 g_xnom
     /tmp/ccbozwye.s:458    .data:00000118 omega_hover
     /tmp/ccbozwye.s:464    .data:0000011c kF
     /tmp/ccbozwye.s:470    .data:00000120 kM
     /tmp/ccbozwye.s:476    .data:00000124 l
     /tmp/ccbozwye.s:479    .text:00000000 $a
     /tmp/ccbozwye.s:483    .text:00000000 lab
     /tmp/ccbozwye.s:744    .text:00000258 ExternalOuterLoop
     /tmp/ccbozwye.s:4779   .text:00003114 do_communication
     /tmp/ccbozwye.s:509    .text:00000020 SendMassData
     /tmp/ccbozwye.s:621    .text:0000011c $d
                            *COM*:00000044 g_sensor
     /tmp/ccbozwye.s:628    .text:0000012c $a
     /tmp/ccbozwye.s:632    .text:0000012c countData
     /tmp/ccbozwye.s:727    .text:00000238 $d
                            *COM*:00000008 g_status
                            *COM*:00000004 TotalBytesReceived
     /tmp/ccbozwye.s:740    .text:00000258 $a
     /tmp/ccbozwye.s:1845   .text:00000ec4 InnerLoop
     /tmp/ccbozwye.s:5604   .text:00003a20 AE483_send_control
     /tmp/ccbozwye.s:791    .text:000002c0 $d
                            *COM*:0000001c u_outer
                            *COM*:00000010 g_u
     /tmp/ccbozwye.s:797    .text:000002d0 $a
     /tmp/ccbozwye.s:801    .text:000002d0 ExternalOuterLoopRate
     /tmp/ccbozwye.s:2022   .text:000010b0 InnerLoopRate
     /tmp/ccbozwye.s:848    .text:00000338 $d
     /tmp/ccbozwye.s:854    .text:00000348 $a
     /tmp/ccbozwye.s:858    .text:00000348 ExternalOuterLoopAngleRate
     /tmp/ccbozwye.s:2200   .text:00001294 InnerLoopAngleRate
     /tmp/ccbozwye.s:916    .text:000003dc $d
     /tmp/ccbozwye.s:924    .bss:00000040 yaw_desired.3635
     /tmp/ccbozwye.s:928    .bss:00000044 pitch_desired.3634
     /tmp/ccbozwye.s:932    .bss:00000048 roll_desired.3633
     /tmp/ccbozwye.s:937    .text:000003ec $a
     /tmp/ccbozwye.s:941    .text:000003ec GPSHold
     /tmp/ccbozwye.s:1073   .text:000004fc OuterLoopGPSUltrasound
     /tmp/ccbozwye.s:1032   .text:000004d8 $d
     /tmp/ccbozwye.s:1063   .text:000004fc $a
     /tmp/ccbozwye.s:2878   .text:00001aac flatEarthl2x
     /tmp/ccbozwye.s:1758   .text:00000e2c $d
                            *COM*:00000034 g_state
     /tmp/ccbozwye.s:1781   .text:00000e7c $a
     /tmp/ccbozwye.s:1998   .text:00001094 $d
                            *COM*:00000014 g_motorinput
     /tmp/ccbozwye.s:2015   .text:000010b0 $a
     /tmp/ccbozwye.s:2172   .text:00001274 $d
     /tmp/ccbozwye.s:2190   .text:00001294 $a
     /tmp/ccbozwye.s:2381   .text:000014c4 $d
                            *COM*:0000000c e_R
                            *COM*:0000000c e_w
     /tmp/ccbozwye.s:2398   .text:000014dc $a
     /tmp/ccbozwye.s:2402   .text:000014dc outerloopGPS
     /tmp/ccbozwye.s:2672   .text:00001814 $d
     /tmp/ccbozwye.s:2697   .text:0000186c $a
     /tmp/ccbozwye.s:3086   .text:00001d88 $d
                            *COM*:0000000c g_pinfo
     /tmp/ccbozwye.s:3104   .text:00001da8 $a
     /tmp/ccbozwye.s:3108   .text:00001da8 constant_altitude_control
     /tmp/ccbozwye.s:3474   .text:00002260 $d
                            *COM*:00000004 ultrasound_z_error_sum
     /tmp/ccbozwye.s:3498   .text:000022bc $a
     /tmp/ccbozwye.s:3734   .text:000025a4 ultrasound_control
     /tmp/ccbozwye.s:4022   .text:0000291c $d
     /tmp/ccbozwye.s:4060   .text:00002970 $a
     /tmp/ccbozwye.s:4064   .text:00002970 lab3
     /tmp/ccbozwye.s:4239   .text:00002b78 $d
     /tmp/ccbozwye.s:4261   .text:00002ba8 $a
     /tmp/ccbozwye.s:4265   .text:00002ba8 lab2
     /tmp/ccbozwye.s:4372   .text:00002ce0 $d
     /tmp/ccbozwye.s:4387   .text:00002d04 $a
     /tmp/ccbozwye.s:4391   .text:00002d04 lab1
     /tmp/ccbozwye.s:4418   .text:00002d34 $d
     /tmp/ccbozwye.s:4424   .bss:0000004c timer.4280
     /tmp/ccbozwye.s:4428   .text:00002d3c $a
     /tmp/ccbozwye.s:4432   .text:00002d3c motor_rpm_calibration
     /tmp/ccbozwye.s:4765   .text:00003100 $d
     /tmp/ccbozwye.s:4775   .text:00003114 $a
     /tmp/ccbozwye.s:5071   .text:0000344c $d
                            *COM*:0000002c g_gpssensor
                            *COM*:00000014 g_rotor
     /tmp/ccbozwye.s:5089   .text:0000347c $a
     /tmp/ccbozwye.s:5095   .text:0000347c motor_omega_to_cmd
     /tmp/ccbozwye.s:5166   .text:0000354c $d
     /tmp/ccbozwye.s:5175   .text:0000355c $a
     /tmp/ccbozwye.s:5181   .text:0000355c u_to_rotorspeed
     /tmp/ccbozwye.s:5487   .text:0000391c $d
                            *COM*:00000040 Winv
     /tmp/ccbozwye.s:5500   .text:00003930 $a
     /tmp/ccbozwye.s:5505   .text:00003930 clip_motor_control
     /tmp/ccbozwye.s:5592   .text:00003a18 $d
     /tmp/ccbozwye.s:5600   .text:00003a20 $a
     /tmp/ccbozwye.s:5685   .text:00003af0 $d
                            *COM*:00000010 g_omega_cmd
                            *COM*:00000010 g_cmd
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:00000200 myBuf
                            *COM*:0000002c g_rawsensor
                            *COM*:00000010 g_q
                            *COM*:0000000c g_angles
                            *COM*:00000004 ultrasound_z
                            *COM*:00000004 ultrasound_vz
                            *COM*:00000004 ultrasound_z_prev
                            *COM*:00000004 ultrasound_timer
                            *COM*:00000004 home_x
                            *COM*:00000004 home_y
                            *COM*:00000004 home_z
                            *COM*:00000004 my_sdkloop_counter
                            *COM*:00000008 state
                            *COM*:00000008 nom
                            *COM*:00000030 g_xerr
                            *COM*:00000040 W
                            *COM*:00000024 R01
                            *COM*:00000024 R10
                            *COM*:00000024 R01_des
                            *COM*:00000024 R10_des
                            *COM*:00000024 tmpprod1
                            *COM*:00000024 tmpprod2

UNDEFINED SYMBOLS
__udivsi3
fmStatusObject_tomessage
UART_SendMsg
__divsi3
__subsf3
__extendsfdf2
__muldf3
__adddf3
__truncdfsf2
__lesf2
__mulsf3
__divsf3
__gtsf2
__addsf3
__ltsf2
__subdf3
sqrt
cos
sin
angle_diff
__divdf3
__floatsidf
RO_ALL_Data
__floatsisf
WO_Direct_Individual_Motor_Control
WO_SDK
fmSensorObject_tomessage
fmGPSSensorObject_tomessage
fmMotorInputObject_tomessage
fmStateObject_tomessage
fmRotorObject_tomessage
fmPlannerInfo_tomessage
fmInnerloopObject_tomessage
matrix_multiply
__fixunssfsi
