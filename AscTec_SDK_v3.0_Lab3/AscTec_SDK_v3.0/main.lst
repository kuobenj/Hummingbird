   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.global	int_cnt
  11              		.bss
  12              		.align	2
  15              	int_cnt:
  16 0000 00000000 		.space	4
  17              		.global	cnt
  18              		.align	2
  21              	cnt:
  22 0004 00000000 		.space	4
  23              		.global	mainloop_cnt
  24              		.align	2
  27              	mainloop_cnt:
  28 0008 00000000 		.space	4
  29              		.global	mainloop_trigger
  32              	mainloop_trigger:
  33 000c 00       		.space	1
  34              		.global	GPS_timeout
  35 000d 000000   		.align	2
  38              	GPS_timeout:
  39 0010 00000000 		.space	4
  40              		.global	trigger_cnt
  41              		.align	2
  44              	trigger_cnt:
  45 0014 00000000 		.space	4
  46              		.global	SYSTEM_initialized
  49              	SYSTEM_initialized:
  50 0018 00       		.space	1
  51              		.global	DataOutputsPerSecond
  52              		.data
  55              	DataOutputsPerSecond:
  56 0000 0A       		.byte	10
  57              		.global	fireflyLedEnabled
  58              		.bss
  61              	fireflyLedEnabled:
  62 0019 00       		.space	1
  63              		.global	PTU_cam_option_4_version
  64              		.data
  67              	PTU_cam_option_4_version:
  68 0001 02       		.byte	2
  69              		.global	mainloop_overflows
  70              		.bss
  71              		.align	1
  74              	mainloop_overflows:
  75 001a 0000     		.space	2
  76              		.text
  77              		.align	2
  78              		.global	timer0ISR
  80              	timer0ISR:
  81              	.LFB2:
  82              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** 
   3:main.c        **** AscTec SDK 3.0
   4:main.c        **** 
   5:main.c        **** Copyright (c) 2011, Ascending Technologies GmbH
   6:main.c        **** All rights reserved.
   7:main.c        **** 
   8:main.c        **** Redistribution and use in source and binary forms, with or without
   9:main.c        **** modification, are permitted provided that the following conditions are met:
  10:main.c        **** 
  11:main.c        ****  * Redistributions of source code must retain the above copyright notice,
  12:main.c        ****    this list of conditions and the following disclaimer.
  13:main.c        ****  * Redistributions in binary form must reproduce the above copyright
  14:main.c        ****    notice, this list of conditions and the following disclaimer in the
  15:main.c        ****    documentation and/or other materials provided with the distribution.
  16:main.c        **** 
  17:main.c        **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  18:main.c        **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19:main.c        **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  20:main.c        **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  21:main.c        **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  22:main.c        **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  23:main.c        **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  24:main.c        **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  25:main.c        **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  26:main.c        **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  27:main.c        **** DAMAGE.
  28:main.c        **** 
  29:main.c        ****  */
  30:main.c        **** 
  31:main.c        **** /**********************************************************
  32:main.c        ****                   Header files
  33:main.c        ****  **********************************************************/
  34:main.c        **** #include "LPC214x.h"
  35:main.c        **** #include "main.h"
  36:main.c        **** #include "system.h"
  37:main.c        **** #include "uart.h"
  38:main.c        **** #include "mymath.h"
  39:main.c        **** #include "hardware.h"
  40:main.c        **** #include "irq.h"
  41:main.c        **** #include "i2c.h"
  42:main.c        **** #include "i2c1.h"
  43:main.c        **** #include "gpsmath.h"
  44:main.c        **** #include "adc.h"
  45:main.c        **** #include "uart.h"
  46:main.c        **** #include "ssp.h"
  47:main.c        **** #include "LL_HL_comm.h"
  48:main.c        **** #include "sdk.h"
  49:main.c        **** #include "buzzer.h"
  50:main.c        **** #include "ublox.h"
  51:main.c        **** #include "pelican_ptu.h"
  52:main.c        **** #include "declination.h"
  53:main.c        **** #include "asctecCommIntfOnboard.h"
  54:main.c        **** #include "lpc_aci_eeprom.h"
  55:main.c        **** #include "lab.h"
  56:main.c        **** 
  57:main.c        **** #ifdef MATLAB
  58:main.c        **** #include "..\custom_mdl\onboard_matlab_ert_rtw\onboard_matlab.h"
  59:main.c        **** #endif
  60:main.c        **** 
  61:main.c        **** /* *********************************************************
  62:main.c        ****                Function declarations
  63:main.c        ****   ********************************************************* */
  64:main.c        **** 
  65:main.c        **** void Initialize(void);
  66:main.c        **** void feed(void);
  67:main.c        **** void beeper(unsigned char);
  68:main.c        **** void ACISDK(void);
  69:main.c        **** 
  70:main.c        **** /**********************************************************
  71:main.c        ****                   Global Variables
  72:main.c        ****  **********************************************************/
  73:main.c        **** struct HL_STATUS HL_Status;
  74:main.c        **** struct IMU_CALCDATA IMU_CalcData, IMU_CalcData_tmp;
  75:main.c        **** struct GPS_TIME GPS_Time;
  76:main.c        **** 
  77:main.c        **** volatile unsigned int int_cnt=0, cnt=0, mainloop_cnt=0;
  78:main.c        **** volatile unsigned char mainloop_trigger=0;
  79:main.c        **** volatile unsigned int GPS_timeout=0;
  80:main.c        **** volatile unsigned int trigger_cnt=0;
  81:main.c        **** volatile char SYSTEM_initialized=0;
  82:main.c        **** 
  83:main.c        **** unsigned int uart_cnt;
  84:main.c        **** unsigned char DataOutputsPerSecond=10;
  85:main.c        **** unsigned char fireflyLedEnabled=0;
  86:main.c        **** unsigned char PTU_cam_option_4_version=2;
  87:main.c        **** unsigned short mainloop_overflows=0;
  88:main.c        **** 
  89:main.c        **** // Dan Block Add
  90:main.c        **** // Still need to figure out how to send this back to user
  91:main.c        **** extern int GotMagnet;
  92:main.c        **** //these variables are in sdk.c
  93:main.c        **** extern int USMaxBot_range1;
  94:main.c        **** // End Dan Block Add
  95:main.c        **** 
  96:main.c        **** //Ben Kuo Add
  97:main.c        **** extern short Ben_thrust;
  98:main.c        **** extern short setpoint;
  99:main.c        **** extern float U_Kp_z;
 100:main.c        **** extern float U_Kd_z;
 101:main.c        **** extern short landing_flag;
 102:main.c        **** //End Ben Kuo Add
 103:main.c        **** 
 104:main.c        **** void timer0ISR(void) __irq
 105:main.c        **** {
  83              	 0
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		mov	ip, sp
  86              	.LCFI0:
  87 0000 0DC0A0E1 		stmfd	sp!, {fp, ip, lr, pc}
  88              	.LCFI1:
  89 0004 00D82DE9 		sub	fp, ip, #4
  90              	.LCFI2:
  91 0008 04B04CE2 		.loc 1 106 0
  92              		mov	r3, #-536870912
 106:main.c        **** rCyclesPerSecond)
  93              	3, #16384
  94 000c 0E32A0E3 		mov	r2, #1
  95 0010 013983E2 		str	r2, [r3, #0]
  96 0014 0120A0E3 		.loc 1 108 0
  97 0018 002083E5 		ldr	r3, .L7
 107:main.c        ****  {
 108:main.c        ****   	trigger_cnt=0;
  98              	r3, [r3, #0]
  99 001c B4309FE5 		add	r2, r3, #1
 100 0020 003093E5 		ldr	r3, .L7
 101 0024 012083E2 		str	r2, [r3, #0]
 102 0028 A8309FE5 		.loc 1 109 0
 103 002c 002083E5 		ldr	r3, .L7
 109:main.c        **** 	HL_Status.up_time++;
 104              	3, [r3, #0]
 105 0030 A0309FE5 		cmp	r3, #1000
 106 0034 003093E5 		bne	.L2
 107 0038 FA0F53E3 		.loc 1 111 0
 108 003c 1200001A 		ldr	r2, .L7
 110:main.c        ****  	HL_Status.cpu_load=mainloop_cnt;
 111:main.c        **** 
 109              	r3, #0
 110 0040 90209FE5 		str	r3, [r2, #0]
 111 0044 0030A0E3 		.loc 1 112 0
 112 0048 003082E5 		ldr	r3, .L7+4
 112:main.c        **** 	mainloop_cnt=0;
 113              	h	r3, [r3, #4]
 114 004c 88309FE5 		add	r3, r3, #1
 115 0050 B430D3E1 		mov	r3, r3, asl #16
 116 0054 013083E2 		mov	r2, r3, lsr #16
 117 0058 0338A0E1 		ldr	r3, .L7+4
 118 005c 2328A0E1 		strh	r2, [r3, #4]	@ movhi
 119 0060 74309FE5 		.loc 1 113 0
 120 0064 B420C3E1 		ldr	r3, .L7+8
 113:main.c        ****  }
 121              	 [r3, #0]
 122 0068 70309FE5 		mov	r3, r3, asl #16
 123 006c 003093E5 		mov	r2, r3, lsr #16
 124 0070 0338A0E1 		ldr	r3, .L7+4
 125 0074 2328A0E1 		strh	r2, [r3, #18]	@ movhi
 126 0078 5C309FE5 		.loc 1 115 0
 127 007c B221C3E1 		ldr	r2, .L7+8
 114:main.c        ****   if(mainloop_trigger<10) mainloop_trigger++;
 115:main.c        **** 
 128              	, #0
 129 0080 58209FE5 		str	r3, [r2, #0]
 130 0084 0030A0E3 	.L2:
 131 0088 003082E5 		.loc 1 118 0
 132              		ldr	r3, .L7+12
 116:main.c        **** IDISABLE;
 117:main.c        ****   VICVectAddr = 0;		// Acknowledge Interrupt
 118:main.c        **** }
 133              		r3, [r3, #0]
 134 008c 50309FE5 		and	r3, r3, #255
 135 0090 0030D3E5 		cmp	r3, #9
 136 0094 FF3003E2 		bhi	.L4
 137 0098 090053E3 		ldr	r3, .L7+12
 138 009c 0600008A 		ldrb	r3, [r3, #0]
 139 00a0 3C309FE5 		and	r3, r3, #255
 140 00a4 0030D3E5 		add	r3, r3, #1
 141 00a8 FF3003E2 		and	r3, r3, #255
 142 00ac 013083E2 		ldr	r2, .L7+12
 143 00b0 FF3003E2 		strb	r3, [r2, #0]
 144 00b4 28209FE5 	.L4:
 145 00b8 0030C2E5 		.loc 1 121 0
 146              		mov	r3, #0
 119:main.c        **** *********************************************************
 120:main.c        ****                        MAIN
 121:main.c        **** **********************************************************/
 147              	4048
 148 00bc 0030A0E3 		mov	r2, #0
 149 00c0 FD3E43E2 		str	r2, [r3, #0]
 150 00c4 0020A0E3 		.loc 1 122 0
 151 00c8 002083E5 		sub	sp, fp, #12
 122:main.c        **** 	main (void) {
 152              	d	sp, {fp, sp, lr}
 153 00cc 0CD04BE2 		bx	lr
 154 00d0 00689DE8 	.L8:
 155 00d4 1EFF2FE1 		.align	2
 156              	.L7:
 157              		.word	trigger_cnt
 158              		.word	HL_Status
 159 00d8 00000000 		.word	mainloop_cnt
 160 00dc 00000000 		.word	mainloop_trigger
 161 00e0 00000000 	.LFE2:
 163              		.bss
 164              		.align	2
 165              	vbat1.2181:
 166              		.space	4
 167              		.global	__udivsi3
 168 001c 00000000 		.text
 169              		.align	2
 170              		.global	main
 172              	main:
 173              	.LFB3:
 174              		.loc 1 127 0
 175              		@ Function supports interworking.
 123:main.c        ****   static int vbat1; //battery_voltage (lowpass-filtered)
 124:main.c        ****   unsigned int TimerT1, TimerT2;
 125:main.c        **** 
 126:main.c        ****   // Initialization Routine for Flight Code
 127:main.c        ****   SDK_Init();
 176              	, frame = 12
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178              		mov	ip, sp
 179              	.LCFI3:
 180 00e8 0DC0A0E1 		stmfd	sp!, {fp, ip, lr, pc}
 181              	.LCFI4:
 182 00ec 00D82DE9 		sub	fp, ip, #4
 183              	.LCFI5:
 184 00f0 04B04CE2 		sub	sp, sp, #12
 185              	.LCFI6:
 186 00f4 0CD04DE2 		.loc 1 133 0
 187              		bl	SDK_Init
 128:main.c        **** it();
 129:main.c        ****   buzzer(OFF);
 130:main.c        ****   LL_write_init();
 131:main.c        **** 
 132:main.c        ****   //initialize AscTec Firefly LED fin on I2C1 (not necessary on AscTec Hummingbird or Pelican)
 133:main.c        ****   I2C1Init();
 188              	0
 189 00f8 FEFFFFEB 		bl	init
 134:main.c        **** _setRGBLed(255,0,0);
 135:main.c        **** 
 190              	loc 1 136 0
 191 00fc FEFFFFEB 		mov	r0, #0
 136:main.c        **** ADC0triggerSampling(1<<VOLTAGE_1); //activate ADC sampling
 192              	l	buzzer
 193 0100 0000A0E3 		.loc 1 137 0
 194 0104 FEFFFFEB 		bl	LL_write_init
 137:main.c        ****   generateBuildInfo();
 195              	oc 1 140 0
 196 0108 FEFFFFEB 		bl	I2C1Init
 138:main.c        ****   HL_Status.up_time=0;
 139:main.c        **** 
 140:main.c        ****   LED(1,ON);
 197              	loc 1 141 0
 198 010c FEFFFFEB 		mov	r0, #255
 141:main.c        **** ACISDK();	//AscTec Communication Interface: publish variables, set callbacks, etc.
 199              	ov	r1, #0
 200 0110 FF00A0E3 		mov	r2, #0
 201 0114 0010A0E3 		bl	I2C1_setRGBLed
 202 0118 0020A0E3 		.loc 1 143 0
 203 011c FEFFFFEB 		mov	r0, #4
 142:main.c        ****   //update parameters stored by ACI:
 143:main.c        ****   //...
 204              	DC0triggerSampling
 205 0120 0400A0E3 		.loc 1 145 0
 206 0124 FEFFFFEB 		bl	generateBuildInfo
 144:main.c        ****  // Dan Block Change   Commented out
 145:main.c        ****   //PTU_init();	//initialize camera PanTiltUnit
 207              	oc 1 147 0
 208 0128 FEFFFFEB 		ldr	r3, .L27
 146:main.c        **** // End Dan Block Change
 147:main.c        **** #ifdef MATLAB
 209              	ov	r2, #0
 210 012c 14339FE5 		strh	r2, [r3, #4]	@ movhi
 211 0130 0020A0E3 		.loc 1 149 0
 212 0134 B420C3E1 		mov	r0, #1
 148:main.c        **** //ee_read((unsigned int*)&matlab_params); //read params from eeprom
 149:main.c        ****   onboard_matlab_initialize(); //initialize matlab code
 213              		r1, #1
 214 0138 0100A0E3 		bl	LED
 215 013c 0110A0E3 		.loc 1 151 0
 216 0140 FEFFFFEB 		bl	ACISDK
 150:main.c        **** ndif
 151:main.c        **** 
 217              	L26
 218 0144 FEFFFFEB 	.L10:
 219 0148 FFFFFFEA 	.L26:
 220              		.loc 1 166 0
 221              		ldr	r3, .L27+4
 152:main.c        **** while(1)
 153:main.c        ****   {
 154:main.c        ****       if(mainloop_trigger)
 155:main.c        ****       {
 156:main.c        ****       	TimerT1 =  T0TC;
 157:main.c        ****      	if(GPS_timeout<ControllerCyclesPerSecond) GPS_timeout++;
 158:main.c        **** 	  	else if(GPS_timeout==ControllerCyclesPerSecond)
 159:main.c        **** 	  	{
 160:main.c        ****   	 		GPS_timeout=ControllerCyclesPerSecond+1;
 161:main.c        **** 	  		GPS_Data.status=0;
 162:main.c        **** 	  		GPS_Data.numSV=0;
 163:main.c        **** 	  	}
 164:main.c        **** 
 165:main.c        ****         //battery monitoring
 166:main.c        ****         ADC0getSamplingResults(0xFF,adcChannelValues);
 222              		r3, [r3, #0]
 223 014c F8329FE5 		and	r3, r3, #255
 224 0150 0030D3E5 		cmp	r3, #0
 225 0154 FF3003E2 		beq	.L10
 226 0158 000053E3 		.loc 1 168 0
 227 015c FAFFFF0A 		mov	r3, #16384
 167:main.c        **** vbat1*14+(adcChannelValues[VOLTAGE_1]*9872/579))/15;	//voltage in mV
 168:main.c        **** 
 228              	3, r3, #-536870904
 229 0160 0139A0E3 		ldr	r3, [r3, #0]
 230 0164 8E3283E2 		str	r3, [fp, #-20]
 231 0168 003093E5 		.loc 1 169 0
 232 016c 14300BE5 		ldr	r3, .L27+8
 169:main.c        **** HL_Status.battery_voltage_1=vbat1;
 233              	r2, [r3, #0]
 234 0170 D8329FE5 		mov	r3, #996
 235 0174 002093E5 		add	r3, r3, #3
 236 0178 F93FA0E3 		cmp	r2, r3
 237 017c 033083E2 		bhi	.L13
 238 0180 030052E1 		ldr	r3, .L27+8
 239 0184 0500008A 		ldr	r3, [r3, #0]
 240 0188 C0329FE5 		add	r2, r3, #1
 241 018c 003093E5 		ldr	r3, .L27+8
 242 0190 012083E2 		str	r2, [r3, #0]
 243 0194 B4329FE5 		b	.L15
 244 0198 002083E5 	.L13:
 245 019c 0D0000EA 		.loc 1 170 0
 246              		ldr	r3, .L27+8
 170:main.c        ****        mainloop_cnt++;
 247              	#0]
 248 01a0 A8329FE5 		cmp	r3, #1000
 249 01a4 003093E5 		bne	.L15
 250 01a8 FA0F53E3 		.loc 1 172 0
 251 01ac 0900001A 		ldr	r2, .L27+8
 171:main.c        **** 	if(!(mainloop_cnt%10)) buzzer_handler(HL_Status.battery_voltage_1);
 172:main.c        **** 
 252              	r3, #1000
 253 01b0 98229FE5 		add	r3, r3, #1
 254 01b4 FA3FA0E3 		str	r3, [r2, #0]
 255 01b8 013083E2 		.loc 1 173 0
 256 01bc 003082E5 		ldr	r2, .L27+12
 173:main.c        ****    if(mainloop_trigger) mainloop_trigger--;
 257              	r3, #0
 258 01c0 8C229FE5 		str	r3, [r2, #40]
 259 01c4 0030A0E3 		.loc 1 174 0
 260 01c8 283082E5 		ldr	r2, .L27+12
 174:main.c        ****        mainloop();
 261              		r3, #0
 262 01cc 80229FE5 		str	r3, [r2, #36]
 263 01d0 0030A0E3 	.L15:
 264 01d4 243082E5 		.loc 1 178 0
 265              		mov	r0, #255
 175:main.c        ****        // CPU Usage calculation
 176:main.c        ****         TimerT2 = T0TC;
 177:main.c        ****         if (mainloop_trigger)
 178:main.c        ****         {
 266              	r1, .L27+16
 267 01d8 FF00A0E3 		bl	ADC0getSamplingResults
 268 01dc 74129FE5 		.loc 1 179 0
 269 01e0 FEFFFFEB 		ldr	r3, .L27+20
 179:main.c        ****     	HL_Status.cpu_load = 1000;
 270              		r2, [r3, #0]
 271 01e4 70329FE5 		mov	r3, r2
 272 01e8 002093E5 		mov	r3, r3, asl #3
 273 01ec 0230A0E1 		rsb	r3, r2, r3
 274 01f0 8331A0E1 		mov	r3, r3, asl #1
 275 01f4 033062E0 		mov	r0, r3
 276 01f8 8330A0E1 		ldr	r3, .L27+16
 277 01fc 0300A0E1 		ldr	r1, [r3, #8]
 278 0200 50329FE5 		mov	r2, r1
 279 0204 081093E5 		mov	r2, r2, asl #2
 280 0208 0120A0E1 		add	r2, r2, r1
 281 020c 0221A0E1 		mov	r2, r2, asl #1
 282 0210 012082E0 		add	r2, r2, r1
 283 0214 8220A0E1 		mov	r3, r2, asl #3
 284 0218 012082E0 		rsb	r3, r2, r3
 285 021c 8231A0E1 		mov	r3, r3, asl #3
 286 0220 033062E0 		add	r3, r3, r1
 287 0224 8331A0E1 		mov	r3, r3, asl #4
 288 0228 013083E0 		mov	r2, r3
 289 022c 0332A0E1 		mov	r3, #-536870901
 290 0230 0320A0E1 		add	r3, r3, #39845888
 291 0234 BE32A0E3 		add	r3, r3, #25344
 292 0238 263683E2 		umull	r1, r3, r2, r3
 293 023c 633C83E2 		mov	r3, r3, lsr #9
 294 0240 921383E0 		add	r2, r0, r3
 295 0244 A334A0E1 		ldr	r3, .L27+24
 296 0248 032080E0 		umull	r1, r3, r2, r3
 297 024c 0C329FE5 		mov	r3, r3, lsr #3
 298 0250 921383E0 		mov	r2, r3
 299 0254 A331A0E1 		ldr	r3, .L27+20
 300 0258 0320A0E1 		str	r2, [r3, #0]
 301 025c F8319FE5 		.loc 1 181 0
 302 0260 002083E5 		ldr	r3, .L27+20
 180:main.c        ****        	mainloop_overflows++;
 181:main.c        ****         }
 303              	l #16
 304 0264 F0319FE5 		mov	r2, r3, lsr #16
 305 0268 003093E5 		ldr	r3, .L27
 306 026c 0338A0E1 		strh	r2, [r3, #0]	@ movhi
 307 0270 2328A0E1 		.loc 1 182 0
 308 0274 CC319FE5 		ldr	r3, .L27+28
 309 0278 B020C3E1 		ldr	r3, [r3, #0]
 182:main.c        ****       else if (TimerT2 < TimerT1)
 310              	, r3, #1
 311 027c E0319FE5 		ldr	r3, .L27+28
 312 0280 003093E5 		str	r2, [r3, #0]
 313 0284 012083E2 		.loc 1 183 0
 314 0288 D4319FE5 		ldr	r3, .L27+28
 315 028c 002083E5 		ldr	r2, [r3, #0]
 183:main.c        ****        	HL_Status.cpu_load = (T0MR0 - TimerT1 + TimerT2)*1000/T0MR0; // load = "timer cycles" / "ti
 316              	3, .L27+32
 317 0290 CC319FE5 		umull	r1, r3, r2, r3
 318 0294 002093E5 		mov	r3, r3, lsr #3
 319 0298 C8319FE5 		str	r3, [fp, #-24]
 320 029c 921383E0 		ldr	r3, [fp, #-24]
 321 02a0 A331A0E1 		mov	r3, r3, asl #2
 322 02a4 18300BE5 		ldr	r1, [fp, #-24]
 323 02a8 18301BE5 		add	r3, r3, r1
 324 02ac 0331A0E1 		mov	r3, r3, asl #1
 325 02b0 18101BE5 		rsb	r2, r3, r2
 326 02b4 013083E0 		str	r2, [fp, #-24]
 327 02b8 8330A0E1 		ldr	r3, [fp, #-24]
 328 02bc 022063E0 		cmp	r3, #0
 329 02c0 18200BE5 		bne	.L17
 330 02c4 18301BE5 		ldr	r3, .L27
 331 02c8 000053E3 		ldrh	r3, [r3, #0]
 332 02cc 0500001A 		mov	r3, r3, asl #16
 333 02d0 70319FE5 		mov	r3, r3, asr #16
 334 02d4 B030D3E1 		mov	r0, r3
 335 02d8 0338A0E1 		bl	buzzer_handler
 336 02dc 4338A0E1 	.L17:
 337 02e0 0300A0E1 		.loc 1 185 0
 338 02e4 FEFFFFEB 		ldr	r3, .L27+4
 339              		ldrb	r3, [r3, #0]
 184:main.c        ****        else
 185:main.c        ****         	HL_Status.cpu_load = (TimerT2 - TimerT1)*1000/T0MR0; // load = "timer cycles" / "timer cyc
 340              	3, #0
 341 02e8 5C319FE5 		beq	.L19
 342 02ec 0030D3E5 		ldr	r3, .L27+4
 343 02f0 FF3003E2 		ldrb	r3, [r3, #0]
 344 02f4 000053E3 		and	r3, r3, #255
 345 02f8 0600000A 		sub	r3, r3, #1
 346 02fc 48319FE5 		and	r3, r3, #255
 347 0300 0030D3E5 		ldr	r2, .L27+4
 348 0304 FF3003E2 		strb	r3, [r2, #0]
 349 0308 013043E2 	.L19:
 350 030c FF3003E2 		.loc 1 186 0
 351 0310 34219FE5 		bl	mainloop
 352 0314 0030C2E5 		.loc 1 188 0
 353              		mov	r3, #16384
 186:main.c        ****     }
 354              	-536870904
 355 0318 FEFFFFEB 		ldr	r3, [r3, #0]
 187:main.c        ****   }
 188:main.c        ****   return 0;
 356              	tr	r3, [fp, #-16]
 357 031c 0139A0E3 		.loc 1 189 0
 358 0320 8E3283E2 		ldr	r3, .L27+4
 359 0324 003093E5 		ldrb	r3, [r3, #0]
 360 0328 10300BE5 		and	r3, r3, #255
 189:main.c        **** 
 361              	r3, #0
 362 032c 18319FE5 		beq	.L21
 363 0330 0030D3E5 		.loc 1 191 0
 364 0334 FF3003E2 		ldr	r2, .L27
 365 0338 000053E3 		mov	r3, #1000
 366 033c 0A00000A 		strh	r3, [r2, #18]	@ movhi
 190:main.c        **** 
 191:main.c        **** void mainloop(void) //mainloop is triggered at 1 kHz
 367              	1 192 0
 368 0340 00219FE5 		ldr	r3, .L27+36
 369 0344 FA3FA0E3 		ldrh	r3, [r3, #0]
 370 0348 B231C2E1 		add	r3, r3, #1
 192:main.c        **** 
 371              		r3, r3, asl #16
 372 034c 18319FE5 		mov	r2, r3, lsr #16
 373 0350 B030D3E1 		ldr	r3, .L27+36
 374 0354 013083E2 		strh	r2, [r3, #0]	@ movhi
 375 0358 0338A0E1 		b	.L10
 376 035c 2328A0E1 	.L21:
 377 0360 04319FE5 		.loc 1 194 0
 378 0364 B020C3E1 		ldr	r2, [fp, #-16]
 379 0368 77FFFFEA 		ldr	r3, [fp, #-20]
 380              		cmp	r2, r3
 193:main.c        ****     static unsigned char led_cnt=0, led_state=1;
 194:main.c        ****     static int Firefly_led_fin_cnt=0;
 381              		.loc 1 195 0
 382 036c 10201BE5 		mov	r3, #-536870912
 383 0370 14301BE5 		add	r3, r3, #16384
 384 0374 030052E1 		add	r3, r3, #24
 385 0378 1B00002A 		ldr	r2, [r3, #0]
 195:main.c        **** nsigned char t;
 386              	r3, [fp, #-20]
 387 037c 0E32A0E3 		rsb	r2, r3, r2
 388 0380 013983E2 		ldr	r3, [fp, #-16]
 389 0384 183083E2 		add	r2, r2, r3
 390 0388 002093E5 		mov	r3, r2
 391 038c 14301BE5 		mov	r3, r3, asl #5
 392 0390 022063E0 		rsb	r3, r2, r3
 393 0394 10301BE5 		mov	r3, r3, asl #2
 394 0398 032082E0 		add	r3, r3, r2
 395 039c 0230A0E1 		mov	r3, r3, asl #3
 396 03a0 8332A0E1 		mov	r2, r3
 397 03a4 033062E0 		mov	r3, #-536870912
 398 03a8 0331A0E1 		add	r3, r3, #16384
 399 03ac 023083E0 		add	r3, r3, #24
 400 03b0 8331A0E1 		ldr	r3, [r3, #0]
 401 03b4 0320A0E1 		mov	r0, r2
 402 03b8 0E32A0E3 		mov	r1, r3
 403 03bc 013983E2 		bl	__udivsi3
 404 03c0 183083E2 		mov	r3, r0
 405 03c4 003093E5 		mov	r3, r3, asl #16
 406 03c8 0200A0E1 		mov	r2, r3, lsr #16
 407 03cc 0310A0E1 		ldr	r3, .L27
 408 03d0 FEFFFFEB 		strh	r2, [r3, #18]	@ movhi
 409 03d4 0030A0E1 		b	.L10
 410 03d8 0338A0E1 	.L23:
 411 03dc 2328A0E1 		.loc 1 197 0
 412 03e0 60309FE5 		ldr	r2, [fp, #-16]
 413 03e4 B221C3E1 		ldr	r3, [fp, #-20]
 414 03e8 57FFFFEA 		rsb	r2, r3, r2
 415              		mov	r3, r2
 196:main.c        **** 	//blink red led if no GPS lock available
 197:main.c        **** 	led_cnt++;
 416              	2, r3
 417 03ec 10201BE5 		mov	r3, r3, asl #2
 418 03f0 14301BE5 		add	r3, r3, r2
 419 03f4 022063E0 		mov	r3, r3, asl #3
 420 03f8 0230A0E1 		mov	r2, r3
 421 03fc 8332A0E1 		mov	r3, #-536870912
 422 0400 033062E0 		add	r3, r3, #16384
 423 0404 0331A0E1 		add	r3, r3, #24
 424 0408 023083E0 		ldr	r3, [r3, #0]
 425 040c 8331A0E1 		mov	r0, r2
 426 0410 0320A0E1 		mov	r1, r3
 427 0414 0E32A0E3 		bl	__udivsi3
 428 0418 013983E2 		mov	r3, r0
 429 041c 183083E2 		mov	r3, r3, asl #16
 430 0420 003093E5 		mov	r2, r3, lsr #16
 431 0424 0200A0E1 		ldr	r3, .L27
 432 0428 0310A0E1 		strh	r2, [r3, #18]	@ movhi
 433 042c FEFFFFEB 		.loc 1 200 0
 434 0430 0030A0E1 		b	.L10
 435 0434 0338A0E1 	.L28:
 436 0438 2328A0E1 		.align	2
 437 043c 04309FE5 	.L27:
 438 0440 B221C3E1 		.word	HL_Status
 198:main.c        **** f((GPS_Data.status&0xFF)==0x03)
 199:main.c        **** 	{
 200:main.c        **** 		LED(0,OFF);
 439              	
 440 0444 40FFFFEA 		.word	GPS_timeout
 441              		.word	GPS_Data
 442              		.word	adcChannelValues
 443              		.word	vbat1.2181
 444 0448 00000000 		.word	-2004318071
 445 044c 00000000 		.word	mainloop_cnt
 446 0450 00000000 		.word	-858993459
 447 0454 00000000 		.word	mainloop_overflows
 448 0458 00000000 	.LFE3:
 450 0460 89888888 		.bss
 451 0464 00000000 		.align	2
 452 0468 CDCCCCCC 	Firefly_led_fin_cnt.2256:
 453 046c 00000000 		.space	4
 454              		.data
 457              	led_state.2255:
 458              		.byte	1
 459 0020 00000000 		.bss
 460              	led_cnt.2254:
 461              		.space	1
 462              		.text
 463              		.align	2
 464 0002 01       		.global	mainloop
 466              	mainloop:
 467 0024 00       	.LFB4:
 468 0025 000000   		.loc 1 206 0
 469              		@ Function supports interworking.
 470              		@ args = 0, pretend = 0, frame = 8
 471              		@ frame_needed = 1, uses_anonymous_args = 0
 472              		mov	ip, sp
 473              	.LCFI7:
 201:main.c        **** 	else
 202:main.c        **** 	{
 203:main.c        **** 	    if(led_cnt==150)
 204:main.c        **** 	    {
 205:main.c        **** 	      LED(0,ON);
 206:main.c        **** 	    }
 474              	8:
 475              		sub	fp, ip, #4
 476              	.LCFI9:
 477              		sub	sp, sp, #12
 478 0470 0DC0A0E1 	.LCFI10:
 479              		.loc 1 212 0
 480 0474 00D82DE9 		ldr	r3, .L62
 481              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 482 0478 04B04CE2 		add	r3, r3, #1
 483              		and	r3, r3, #255
 484 047c 0CD04DE2 		ldr	r2, .L62
 485              		strb	r3, [r2, #0]
 207:main.c        **** lse if(led_cnt==200)
 208:main.c        **** 	    {
 209:main.c        **** 	      led_cnt=0;
 210:main.c        **** 	      LED(0,OFF);
 211:main.c        **** 	    }
 212:main.c        **** 	}
 486              	0
 487 0480 B8339FE5 		ldr	r3, .L62+4
 488 0484 0030D3E5 		ldr	r3, [r3, #40]
 489 0488 013083E2 		and	r3, r3, #255
 490 048c FF3003E2 		cmp	r3, #3
 491 0490 A8239FE5 		bne	.L30
 492 0494 0030C2E5 		.loc 1 215 0
 213:main.c        **** fter first lock, determine magnetic inclination and declination
 493              	, #0
 494 0498 A4339FE5 		mov	r1, #0
 495 049c 283093E5 		bl	LED
 496 04a0 FF3003E2 		b	.L32
 497 04a4 030053E3 	.L30:
 498 04a8 0300001A 		.loc 1 219 0
 214:main.c        **** if (SYSTEM_initialized)
 215:main.c        **** 	{
 499              	3, .L62
 500 04ac 0000A0E3 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 501 04b0 0010A0E3 		cmp	r3, #150
 502 04b4 FEFFFFEB 		bne	.L33
 503 04b8 110000EA 		.loc 1 221 0
 504              		mov	r0, #0
 216:main.c        **** if ((!declinationAvailable) && (GPS_Data.horizontal_accuracy<10000) && ((GPS_Data.status&0x03)==0x0
 217:main.c        **** 		{
 218:main.c        **** 			int status;
 219:main.c        **** 			estimatedDeclination=getDeclination(GPS_Data.latitude,GPS_Data.longitude,GPS_Data.height/1000,20
 505              	1, #1
 506 04bc 7C339FE5 		bl	LED
 507 04c0 0030D3E5 		b	.L32
 508 04c4 960053E3 	.L33:
 509 04c8 0300001A 		.loc 1 223 0
 220:main.c        **** f (estimatedDeclination<-32000) estimatedDeclination=-32000;
 221:main.c        **** 			if (estimatedDeclination>32000) estimatedDeclination=32000;
 510              	r3, .L62
 511 04cc 0000A0E3 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 512 04d0 0110A0E3 		cmp	r3, #200
 513 04d4 FEFFFFEB 		bne	.L32
 514 04d8 090000EA 		.loc 1 225 0
 515              		ldr	r3, .L62
 222:main.c        **** 	declinationAvailable=1;
 223:main.c        **** 		}
 516              	2, #0
 517 04dc 5C339FE5 		strb	r2, [r3, #0]
 518 04e0 0030D3E5 		.loc 1 226 0
 519 04e4 C80053E3 		mov	r0, #0
 520 04e8 0500001A 		mov	r1, #0
 224:main.c        **** 
 225:main.c        **** 
 521              	ED
 522 04ec 4C339FE5 	.L32:
 523 04f0 0020A0E3 		.loc 1 232 0
 524 04f4 0020C3E5 		ldr	r3, .L62+8
 226:main.c        **** //toggle green LED and update SDK input struct when GPS data packet is received
 525              	b	r3, [r3, #0]
 526 04f8 0000A0E3 		and	r3, r3, #255
 527 04fc 0010A0E3 		cmp	r3, #0
 528 0500 FEFFFFEB 		beq	.L36
 529              		.loc 1 234 0
 227:main.c        ****    if (gpsLEDTrigger)
 228:main.c        ****     {
 229:main.c        **** 		if(led_state)
 230:main.c        **** 		{
 231:main.c        **** 			led_state=0;
 232:main.c        **** 			LED(1,OFF);
 530              	r3, .L62+12
 531 0504 3C339FE5 		ldrb	r3, [r3, #0]
 532 0508 0030D3E5 		and	r3, r3, #255
 533 050c FF3003E2 		cmp	r3, #0
 534 0510 000053E3 		bne	.L36
 535 0514 3500000A 		ldr	r3, .L62+4
 233:main.c        **** else
 234:main.c        **** 		{
 536              	2, [r3, #24]
 537 0518 2C339FE5 		mov	r3, #9984
 538 051c 0030D3E5 		add	r3, r3, #15
 539 0520 FF3003E2 		cmp	r2, r3
 540 0524 000053E3 		bhi	.L36
 541 0528 3000001A 		ldr	r3, .L62+4
 542 052c 10339FE5 		ldr	r3, [r3, #40]
 543 0530 182093E5 		and	r3, r3, #3
 544 0534 273CA0E3 		cmp	r3, #3
 545 0538 0F3083E2 		bne	.L36
 546 053c 030052E1 	.LBB2:
 547 0540 2A00008A 		.loc 1 237 0
 548 0544 F8329FE5 		ldr	r3, .L62+4
 549 0548 283093E5 		ldr	r0, [r3, #0]
 550 054c 033003E2 		ldr	r3, .L62+4
 551 0550 030053E3 		ldr	ip, [r3, #4]
 552 0554 2500001A 		ldr	r3, .L62+4
 553              		ldr	r1, [r3, #8]
 235:main.c        **** 	LED(1,ON);
 236:main.c        **** 			led_state=1;
 237:main.c        **** 		}
 554              	smull	r2, r3, r1, r3
 555 0558 E4329FE5 		mov	r2, r3, asr #6
 556 055c 000093E5 		mov	r3, r1, asr #31
 557 0560 DC329FE5 		rsb	r2, r3, r2
 558 0564 04C093E5 		sub	r3, fp, #20
 559 0568 D4329FE5 		str	r3, [sp, #0]
 560 056c 081093E5 		mov	r1, ip
 561 0570 D8329FE5 		mov	r3, #2000
 562 0574 9123C3E0 		add	r3, r3, #12
 563 0578 4323A0E1 		bl	getDeclination
 564 057c C13FA0E1 		mov	r2, r0
 565 0580 022063E0 		ldr	r3, .L62+20
 566 0584 14304BE2 		str	r2, [r3, #0]
 567 0588 00308DE5 		.loc 1 238 0
 568 058c 0C10A0E1 		ldr	r3, .L62+20
 569 0590 7D3EA0E3 		ldr	r3, [r3, #0]
 570 0594 0C3083E2 		cmn	r3, #32000
 571 0598 FEFFFFEB 		bge	.L41
 572 059c 0020A0E1 		ldr	r2, .L62+20
 573 05a0 AC329FE5 		mov	r3, #-2097152000
 574 05a4 002083E5 		mov	r3, r3, asr #16
 238:main.c        **** RO_ALL_Data.GPS_height=GPS_Data.height;
 575              	1:
 576 05a8 A4329FE5 		.loc 1 239 0
 577 05ac 003093E5 		ldr	r3, .L62+20
 578 05b0 7D0C73E3 		ldr	r3, [r3, #0]
 579 05b4 030000AA 		cmp	r3, #32000
 580 05b8 94229FE5 		ble	.L43
 581 05bc 8334A0E3 		ldr	r2, .L62+20
 582 05c0 4338A0E1 		mov	r3, #32000
 583 05c4 003082E5 		str	r3, [r2, #0]
 584              	.L43:
 239:main.c        **** 	RO_ALL_Data.GPS_latitude=GPS_Data.latitude;
 585              	0 0
 586 05c8 84329FE5 		ldr	r3, .L62+12
 587 05cc 003093E5 		mov	r2, #1
 588 05d0 7D0C53E3 		strb	r2, [r3, #0]
 589 05d4 020000DA 	.L36:
 590 05d8 74229FE5 	.LBE2:
 591 05dc 7D3CA0E3 		.loc 1 245 0
 592 05e0 003082E5 		ldr	r3, .L62+24
 593              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 240:main.c        **** 	RO_ALL_Data.GPS_longitude=GPS_Data.longitude;
 594              	#0
 595 05e4 60329FE5 		beq	.L45
 596 05e8 0120A0E3 		.loc 1 247 0
 597 05ec 0020C3E5 		ldr	r3, .L62+28
 598              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 599              		cmp	r3, #0
 241:main.c        **** 	RO_ALL_Data.GPS_speed_x=GPS_Data.speed_x;
 242:main.c        **** 		RO_ALL_Data.GPS_speed_y=GPS_Data.speed_y;
 243:main.c        **** 		RO_ALL_Data.GPS_status=GPS_Data.status;
 244:main.c        **** 		RO_ALL_Data.GPS_sat_num=GPS_Data.numSV;
 245:main.c        **** 		RO_ALL_Data.GPS_week=GPS_Time.week;
 600              	L47
 601 05f0 60329FE5 		.loc 1 249 0
 602 05f4 0030D3E5 		ldr	r3, .L62+28
 603 05f8 000053E3 		mov	r2, #0
 604 05fc 4700000A 		strb	r2, [r3, #0]
 246:main.c        **** ALL_Data.GPS_time_of_week=GPS_Time.time_of_week;
 247:main.c        **** 		RO_ALL_Data.GPS_heading=GPS_Data.heading;
 605              	 1 250 0
 606 0600 54329FE5 		mov	r0, #1
 607 0604 0030D3E5 		mov	r1, #0
 608 0608 000053E3 		bl	LED
 609 060c 0600000A 		b	.L49
 248:main.c        **** RO_ALL_Data.GPS_position_accuracy=GPS_Data.horizontal_accuracy;
 249:main.c        **** 		RO_ALL_Data.GPS_speed_accuracy=GPS_Data.speed_accuracy;
 610              	
 611 0610 44329FE5 		.loc 1 254 0
 612 0614 0020A0E3 		mov	r0, #1
 613 0618 0020C3E5 		mov	r1, #1
 250:main.c        **** RO_ALL_Data.GPS_height_accuracy=GPS_Data.vertical_accuracy;
 614              		LED
 615 061c 0100A0E3 		.loc 1 255 0
 616 0620 0010A0E3 		ldr	r3, .L62+28
 617 0624 FEFFFFEB 		mov	r2, #1
 618 0628 050000EA 		strb	r2, [r3, #0]
 619              	.L49:
 251:main.c        **** 		gpsLEDTrigger=0;
 252:main.c        ****     }
 253:main.c        **** 
 254:main.c        **** 	//re-trigger UART-transmission if it was paused by modem CTS pin
 620              	1 258 0
 621 062c 0100A0E3 		ldr	r3, .L62+4
 622 0630 0110A0E3 		ldr	r2, [r3, #8]
 623 0634 FEFFFFEB 		ldr	r3, .L62+32
 255:main.c        **** trigger_transmission)
 624              		r2, [r3, #88]
 625 0638 1C329FE5 		.loc 1 259 0
 626 063c 0120A0E3 		ldr	r3, .L62+4
 627 0640 0020C3E5 		ldr	r2, [r3, #0]
 628              		ldr	r3, .L62+32
 256:main.c        **** {
 257:main.c        **** 		if(!(IOPIN0&(1<<CTS_RADIO)))
 258:main.c        **** 	  	{
 629              	r2, [r3, #80]
 630 0644 F8319FE5 		.loc 1 260 0
 631 0648 082093E5 		ldr	r3, .L62+4
 632 064c 0C329FE5 		ldr	r2, [r3, #4]
 633 0650 582083E5 		ldr	r3, .L62+32
 259:main.c        **** 		trigger_transmission=0;
 634              	r2, [r3, #84]
 635 0654 E8319FE5 		.loc 1 261 0
 636 0658 002093E5 		ldr	r3, .L62+4
 637 065c FC319FE5 		ldr	r2, [r3, #12]
 638 0660 502083E5 		ldr	r3, .L62+32
 260:main.c        **** 	    if(ringbuffer(RBREAD, &t, 1))
 639              	r2, [r3, #92]
 640 0664 D8319FE5 		.loc 1 262 0
 641 0668 042093E5 		ldr	r3, .L62+4
 642 066c EC319FE5 		ldr	r2, [r3, #16]
 643 0670 542083E5 		ldr	r3, .L62+32
 261:main.c        **** 	    {
 644              	r2, [r3, #96]
 645 0674 C8319FE5 		.loc 1 263 0
 646 0678 0C2093E5 		ldr	r3, .L62+4
 647 067c DC319FE5 		ldr	r2, [r3, #40]
 648 0680 5C2083E5 		ldr	r3, .L62+32
 262:main.c        **** 	      transmission_running=1;
 649              	r2, [r3, #120]
 650 0684 B8319FE5 		.loc 1 264 0
 651 0688 102093E5 		ldr	r3, .L62+4
 652 068c CC319FE5 		ldr	r2, [r3, #36]
 653 0690 602083E5 		ldr	r3, .L62+32
 263:main.c        **** 	      UARTWriteChar(t);
 654              	r2, [r3, #116]
 655 0694 A8319FE5 		.loc 1 265 0
 656 0698 282093E5 		ldr	r3, .L62+36
 657 069c BC319FE5 		ldrh	r2, [r3, #4]
 658 06a0 782083E5 		ldr	r3, .L62+32
 264:main.c        **** 	    }
 659              		r2, [r3, #128]	@ movhi
 660 06a4 98319FE5 		.loc 1 266 0
 661 06a8 242093E5 		ldr	r3, .L62+36
 662 06ac AC319FE5 		ldr	r2, [r3, #0]
 663 06b0 742083E5 		ldr	r3, .L62+32
 265:main.c        ****   	}
 664              	r2, [r3, #124]
 665 06b4 A8319FE5 		.loc 1 267 0
 666 06b8 B420D3E1 		ldr	r3, .L62+4
 667 06bc 9C319FE5 		ldr	r2, [r3, #20]
 668 06c0 B028C3E1 		ldr	r3, .L62+32
 266:main.c        **** }
 669              	r2, [r3, #100]
 670 06c4 98319FE5 		.loc 1 268 0
 671 06c8 002093E5 		ldr	r3, .L62+4
 672 06cc 8C319FE5 		ldr	r2, [r3, #24]
 673 06d0 7C2083E5 		ldr	r3, .L62+32
 267:main.c        **** #ifdef MATLAB
 674              	r2, [r3, #104]
 675 06d4 68319FE5 		.loc 1 269 0
 676 06d8 142093E5 		ldr	r3, .L62+4
 677 06dc 7C319FE5 		ldr	r2, [r3, #32]
 678 06e0 642083E5 		ldr	r3, .L62+32
 268:main.c        **** //re-trigger UART-transmission if it was paused by modem CTS pin
 679              	r2, [r3, #112]
 680 06e4 58319FE5 		.loc 1 270 0
 681 06e8 182093E5 		ldr	r3, .L62+4
 682 06ec 6C319FE5 		ldr	r2, [r3, #28]
 683 06f0 682083E5 		ldr	r3, .L62+32
 269:main.c        **** if(trigger_transmission)
 684              	r2, [r3, #108]
 685 06f4 48319FE5 		.loc 1 272 0
 686 06f8 202093E5 		ldr	r2, .L62+24
 687 06fc 5C319FE5 		mov	r3, #0
 688 0700 702083E5 		strb	r3, [r2, #0]
 270:main.c        **** {
 689              	
 690 0704 38319FE5 		.loc 1 276 0
 691 0708 1C2093E5 		ldr	r3, .L62+40
 692 070c 4C319FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 693 0710 6C2083E5 		cmp	r3, #0
 271:main.c        **** 	if(!(IOPIN0&(1<<CTS_RADIO)))
 272:main.c        **** 	  	{
 694              		.L50
 695 0714 3C219FE5 		.loc 1 278 0
 696 0718 0030A0E3 		mov	r3, #-536870912
 697 071c 0030C2E5 		add	r3, r3, #163840
 698              		ldr	r3, [r3, #0]
 273:main.c        ****  		trigger_transmission=0;
 274:main.c        **** 		    if(UART_Matlab_fifo(RBREAD, &t, 1))
 275:main.c        **** 		    {
 276:main.c        **** 		      transmission_running=1;
 699              	r3, r3, #4194304
 700 0720 40319FE5 		cmp	r3, #0
 701 0724 0030D3E5 		bne	.L50
 702 0728 000053E3 		.loc 1 280 0
 703 072c 1600000A 		ldr	r2, .L62+40
 277:main.c        ****     UARTWriteChar(t);
 278:main.c        **** 		    }
 704              	r3, #0
 705 0730 0E32A0E3 		strb	r3, [r2, #0]
 706 0734 0A3983E2 		.loc 1 281 0
 707 0738 003093E5 		sub	r3, fp, #13
 708 073c 013503E2 		mov	r0, #0
 709 0740 000053E3 		mov	r1, r3
 710 0744 1000001A 		mov	r2, #1
 279:main.c        ****  	}
 280:main.c        **** 	}
 711              	gbuffer
 712 0748 18219FE5 		mov	r3, r0
 713 074c 0030A0E3 		cmp	r3, #0
 714 0750 0030C2E5 		beq	.L50
 281:main.c        **** ndif
 715              	c 1 283 0
 716 0754 0D304BE2 		ldr	r2, .L62+44
 717 0758 0000A0E3 		mov	r3, #1
 718 075c 0310A0E1 		strb	r3, [r2, #0]
 719 0760 0120A0E3 		.loc 1 284 0
 720 0764 FEFFFFEB 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 721 0768 0030A0E1 		mov	r0, r3
 722 076c 000053E3 		bl	UARTWriteChar
 723 0770 0500000A 	.L50:
 282:main.c        **** 	//send data packet as an example how to use HL_serial_0 (please refer to uart.c for details)
 283:main.c        **** /*
 724              	17 0
 725 0774 F0209FE5 		bl	uBloxReceiveEngine
 726 0778 0130A0E3 		.loc 1 320 0
 727 077c 0030C2E5 		bl	SDK_mainloop
 284:main.c        ****   if(uart_cnt++==ControllerCyclesPerSecond/DataOutputsPerSecond)
 728              	c 1 323 0
 729 0780 0D305BE5 		bl	HL2LL_write_cycle
 730 0784 0300A0E1 		.loc 1 331 0
 731 0788 FEFFFFEB 		bl	aciSyncVar
 732              		.loc 1 332 0
 285:main.c        ****    {
 286:main.c        ****     	uart_cnt=0;
 287:main.c        ****       	if((sizeof(RO_ALL_Data))<ringbuffer(RBFREE, 0, 0))
 288:main.c        ****        	{
 289:main.c        ****        		UART_SendPacket(&RO_ALL_Data, sizeof(RO_ALL_Data), PD_RO_ALL_DATA);
 290:main.c        ****        	}
 291:main.c        ****     }
 292:main.c        **** */
 293:main.c        ****     //handle gps data reception
 294:main.c        ****     uBloxReceiveEngine();
 295:main.c        **** 
 296:main.c        **** 	//run SDK mainloop. Please put all your data handling / controller code in sdk.c
 297:main.c        **** 	SDK_mainloop();
 298:main.c        **** 
 299:main.c        ****     //write data to transmit buffer for immediate transfer to LL processor
 300:main.c        ****     HL2LL_write_cycle();
 301:main.c        **** 
 302:main.c        ****     // Dan Block Change  Commented out PTU
 303:main.c        ****     //control pan-tilt-unit ("cam option 4" @ AscTec Pelican and AscTec Firefly)
 304:main.c        ****     //PTU_update();
 305:main.c        ****     // End Dan Block Change
 306:main.c        **** 
 307:main.c        ****     //synchronize all variables, commands and parameters with ACI
 308:main.c        ****     aciSyncVar();
 309:main.c        ****     aciSyncCmd();
 310:main.c        ****     aciSyncPar();
 311:main.c        **** 
 312:main.c        ****     //run ACI engine
 313:main.c        ****     aciEngine();
 314:main.c        **** 
 315:main.c        ****     //send buildinfo
 316:main.c        ****     if ((SYSTEM_initialized) && (!transmitBuildInfoTrigger))
 317:main.c        **** 		transmitBuildInfoTrigger=1;
 733              	ciSyncCmd
 734 078c FEFFFFEB 		.loc 1 333 0
 318:main.c        **** _initialized&&fireflyLedEnabled)
 319:main.c        ****     {
 320:main.c        ****     	if(++Firefly_led_fin_cnt==10)
 735              	l	aciSyncPar
 736 0790 FEFFFFEB 		.loc 1 336 0
 321:main.c        ****  	{
 322:main.c        ****     		Firefly_led_fin_cnt=0;
 323:main.c        ****     		fireFlyLedHandler();
 737              	l	aciEngine
 738 0794 FEFFFFEB 		.loc 1 339 0
 324:main.c        ****  	}
 325:main.c        ****     }
 326:main.c        **** 
 327:main.c        **** }
 328:main.c        **** 
 329:main.c        **** 
 330:main.c        **** void ACISDK(void)
 331:main.c        **** {
 739              	dr	r3, .L62+8
 740 0798 FEFFFFEB 		ldrb	r3, [r3, #0]
 332:main.c        **** (1000);
 741              	nd	r3, r3, #255
 742 079c FEFFFFEB 		cmp	r3, #0
 333:main.c        **** lpc_aci_init();
 743              	eq	.L54
 744 07a0 FEFFFFEB 		ldr	r3, .L62+48
 334:main.c        **** ifndef MATLAB
 335:main.c        **** 	aciSetStartTxCallback(UARTWriteChar);
 336:main.c        **** 	// Variables
 745              	drb	r3, [r3, #0]
 746 07a4 FEFFFFEB 		and	r3, r3, #255
 337:main.c        ****  aciPublishVariable(&(u.u1), VARTYPE_SINGLE, 0x1001, "Torque about x", "Data derived from controlle
 338:main.c        **** 	// aciPublishVariable(&(u.u2), VARTYPE_SINGLE, 0x1002, "Torque about y", "Data derived from contro
 339:main.c        **** 	// aciPublishVariable(&(u.u3), VARTYPE_SINGLE, 0x1003, "Torque about z", "Data derived from contro
 747              	mp	r3, #0
 748 07a8 98309FE5 		bne	.L54
 749 07ac 0030D3E5 		.loc 1 340 0
 750 07b0 FF3003E2 		ldr	r3, .L62+48
 751 07b4 000053E3 		mov	r2, #1
 752 07b8 0700000A 		strb	r2, [r3, #0]
 753 07bc AC309FE5 	.L54:
 754 07c0 0030D3E5 		.loc 1 343 0
 755 07c4 FF3003E2 		ldr	r3, .L62+8
 756 07c8 000053E3 		ldrb	r3, [r3, #0]
 757 07cc 0200001A 		and	r3, r3, #255
 340:main.c        ****  aciPublishVariable(&(u.u4), VARTYPE_SINGLE, 0x1004, "Thrust", "Data derived from controller", "N")
 758              	
 759 07d0 98309FE5 		beq	.L61
 760 07d4 0120A0E3 		ldr	r3, .L62+52
 761 07d8 0020C3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 762              		cmp	r3, #0
 341:main.c        **** aciPublishVariable(&RO_ALL_Data.angle_pitch, VARTYPE_INT32, 0x0300, "angle_pitch", "Pitch angle der
 342:main.c        **** 	aciPublishVariable(&RO_ALL_Data.angle_roll, VARTYPE_INT32, 0x0301, "angle_roll", "Roll angle deriv
 343:main.c        **** 	aciPublishVariable(&RO_ALL_Data.angle_yaw, VARTYPE_INT32, 0x0302, "angle_yaw", "Yaw angle derived 
 763              		.L61
 764 07dc 64309FE5 		.loc 1 345 0
 765 07e0 0030D3E5 		ldr	r3, .L62+56
 766 07e4 FF3003E2 		ldr	r3, [r3, #0]
 767 07e8 000053E3 		add	r2, r3, #1
 768 07ec 1000000A 		ldr	r3, .L62+56
 769 07f0 7C309FE5 		str	r2, [r3, #0]
 770 07f4 0030D3E5 		ldr	r3, .L62+56
 771 07f8 000053E3 		ldr	r3, [r3, #0]
 772 07fc 0C00000A 		cmp	r3, #10
 344:main.c        **** // Commands
 345:main.c        **** 	// aciPublishCommand(&(real_mocap.dX), VARTYPE_SINGLE , 0x0512, "Mocap X", "X Position from MOCAP"
 773              		.loc 1 347 0
 774 0800 70309FE5 		ldr	r2, .L62+56
 775 0804 003093E5 		mov	r3, #0
 776 0808 012083E2 		str	r3, [r2, #0]
 777 080c 64309FE5 		.loc 1 348 0
 778 0810 002083E5 		bl	fireFlyLedHandler
 779 0814 5C309FE5 	.L61:
 780 0818 003093E5 		.loc 1 352 0
 781 081c 0A0053E3 		sub	sp, fp, #12
 782 0820 0300001A 		ldmfd	sp, {fp, sp, lr}
 346:main.c        **** / aciPublishCommand(&(real_mocap.dY), VARTYPE_SINGLE , 0x0513, "Mocap Y", "X Position from MOCAP", 
 347:main.c        **** 	// aciPublishCommand(&(real_mocap.dZ), VARTYPE_SINGLE , 0x0514, "Mocap Z", "Z Position from MOCAP"
 783              	3:
 784 0824 4C209FE5 		.align	2
 785 0828 0030A0E3 	.L62:
 786 082c 003082E5 		.word	led_cnt.2254
 348:main.c        **** 	// aciPublishCommand(&(real_mocap.dThetax), VARTYPE_SINGLE , 0x0515, "Mocap Roll", "Roll Euler ang
 787              	rd	GPS_Data
 788 0830 FEFFFFEB 		.word	SYSTEM_initialized
 789              		.word	declinationAvailable
 349:main.c        **** // aciPublishCommand(&(real_mocap.dThetay), VARTYPE_SINGLE , 0x0516, "Mocap Pitch", "Pitch Euler an
 350:main.c        **** 	// aciPublishCommand(&(real_mocap.dThetaz), VARTYPE_SINGLE , 0x0517, "Mocap Yaw", "Yaw Euler angle
 351:main.c        **** 
 352:main.c        **** 	// Parameters
 790              	ord	274877907
 791 0834 0CD04BE2 		.word	estimatedDeclination
 792 0838 00689DE8 		.word	gpsLEDTrigger
 793 083c 1EFF2FE1 		.word	led_state.2255
 794              		.word	RO_ALL_Data
 795              		.word	GPS_Time
 796              		.word	trigger_transmission
 797 0840 24000000 		.word	transmission_running
 798 0844 00000000 		.word	transmitBuildInfoTrigger
 799 0848 00000000 		.word	fireflyLedEnabled
 800 084c 00000000 		.word	Firefly_led_fin_cnt.2256
 801 0850 D34D6210 	.LFE4:
 803 0858 00000000 		.section	.rodata
 804 085c 02000000 		.align	2
 807 0868 00000000 	cpCharUnit0x060B.2387:
 808 086c 00000000 		.ascii	"UL\000"
 809 0870 00000000 		.align	2
 812              	cpCharDesc0x060B.2386:
 813              		.ascii	"initiate landing sequence\000"
 814              		.align	2
 817              	cpCharName0x060B.2385:
 818              		.ascii	"Landingflag\000"
 819 0000 554C00   		.align	2
 822              	cpCharUnit0x060A.2384:
 823              		.ascii	"UL\000"
 824 0004 696E6974 		.align	2
 824      69617465 
 824      206C616E 
 824      64696E67 
 824      20736571 
 827              	cpCharDesc0x060A.2383:
 828              		.ascii	"For Tuning the Gain for Hovering\000"
 829 0020 4C616E64 		.align	2
 829      696E6766 
 829      6C616700 
 832              	cpCharName0x060A.2382:
 833              		.ascii	"D Thrust Gain\000"
 834 002c 554C00   		.align	2
 837              	cpCharUnit0x0609.2380:
 838              		.ascii	"UL\000"
 839 0030 466F7220 		.align	2
 839      54756E69 
 839      6E672074 
 839      68652047 
 839      61696E20 
 842              	cpCharDesc0x0609.2379:
 843              		.ascii	"For Tuning the Gain for Hovering\000"
 844 0054 44205468 		.align	2
 844      72757374 
 844      20476169 
 844      6E00
 847              	cpCharName0x0609.2378:
 848              		.ascii	"P Thrust Gain\000"
 849 0064 554C00   		.align	2
 852              	cvCharUnit0x060E.2377:
 853              		.ascii	"inches\000"
 854 0068 466F7220 		.align	2
 854      54756E69 
 854      6E672074 
 854      68652047 
 854      61696E20 
 857              	cvCharDesc0x060E.2376:
 858              		.ascii	"setpoint\000"
 859 008c 50205468 		.align	2
 859      72757374 
 859      20476169 
 859      6E00
 862              	cvCharName0x060E.2375:
 863              		.ascii	"setpoint\000"
 864 009c 696E6368 		.align	2
 864      657300
 867              	cvCharUnit0x060D.2374:
 868              		.ascii	"UL\000"
 869 00a4 73657470 		.align	2
 869      6F696E74 
 869      00
 872              	cvCharDesc0x060D.2373:
 873              		.ascii	"Data Channel 6\000"
 874 00b0 73657470 		.align	2
 874      6F696E74 
 874      00
 877              	cvCharName0x060D.2372:
 878              		.ascii	"Data7\000"
 879 00bc 554C00   		.align	2
 882              	cvCharUnit0x060C.2371:
 883              		.ascii	"UL\000"
 884 00c0 44617461 		.align	2
 884      20436861 
 884      6E6E656C 
 884      203600
 887              	cvCharDesc0x060C.2370:
 888              		.ascii	"Data Channel 6\000"
 889 00d0 44617461 		.align	2
 889      3700
 892              	cvCharName0x060C.2369:
 893              		.ascii	"Data6\000"
 894 00d8 554C00   		.align	2
 897              	cvCharUnit0x0305.2368:
 898              		.ascii	"mm\000"
 899 00dc 44617461 		.align	2
 899      20436861 
 899      6E6E656C 
 899      203600
 902              	cvCharDesc0x0305.2367:
 903              		.ascii	"DataFusionHeight\000"
 904 00ec 44617461 		.align	2
 904      3600
 907              	cvCharName0x0305.2366:
 908              		.ascii	"DataFusionHeight\000"
 909 00f4 6D6D00   		.align	2
 912              	cvCharUnit0x0518.2365:
 913              		.ascii	"not sure yet\000"
 914 00f8 44617461 		.align	2
 914      46757369 
 914      6F6E4865 
 914      69676874 
 914      00
 917              	cvCharDesc0x0518.2364:
 918              		.ascii	"Thrust output\000"
 919 010c 44617461 		.align	2
 919      46757369 
 919      6F6E4865 
 919      69676874 
 919      00
 922              	cvCharName0x0518.2363:
 923              		.ascii	"Ben_thrust\000"
 924 0120 6E6F7420 		.align	2
 924      73757265 
 924      20796574 
 924      00
 927              	cvCharUnit0x0608.2362:
 928              		.ascii	"inches\000"
 929 0130 54687275 		.align	2
 929      7374206F 
 929      75747075 
 929      7400
 932              	cvCharDesc0x0608.2361:
 933              		.ascii	"Range Sensor\000"
 934 0140 42656E5F 		.align	2
 934      74687275 
 934      737400
 937              	cvCharName0x0608.2360:
 938              		.ascii	"range_read\000"
 939 014c 696E6368 		.align	2
 939      657300
 942              	cvCharUnit0x0302.2359:
 943              		.ascii	"degree*1000\000"
 944 0154 52616E67 		.align	2
 944      65205365 
 944      6E736F72 
 944      00
 947              	cvCharDesc0x0302.2358:
 948              		.ascii	"Yaw angle derived by data fusion\000"
 949 0164 72616E67 		.align	2
 949      655F7265 
 949      616400
 952              	cvCharName0x0302.2357:
 953              		.ascii	"angle_yaw\000"
 954 0170 64656772 		.align	2
 954      65652A31 
 954      30303000 
 957              	cvCharUnit0x0301.2356:
 958              		.ascii	"degree*1000\000"
 959 017c 59617720 		.align	2
 959      616E676C 
 959      65206465 
 959      72697665 
 959      64206279 
 962              	cvCharDesc0x0301.2355:
 963              		.ascii	"Roll angle derived by data fusion\000"
 964 01a0 616E676C 		.align	2
 964      655F7961 
 964      7700
 967              	cvCharName0x0301.2354:
 968              		.ascii	"angle_roll\000"
 969 01ac 64656772 		.align	2
 969      65652A31 
 969      30303000 
 972              	cvCharUnit0x0300.2352:
 973              		.ascii	"degree*1000\000"
 974 01b8 526F6C6C 		.align	2
 974      20616E67 
 974      6C652064 
 974      65726976 
 974      65642062 
 977              	cvCharDesc0x0300.2351:
 978              		.ascii	"Pitch angle derived by by data fusion\000"
 979 01dc 616E676C 		.align	2
 979      655F726F 
 979      6C6C00
 982              	cvCharName0x0300.2350:
 983              		.ascii	"angle_pitch\000"
 984 01e8 64656772 		.text
 984      65652A31 
 984      30303000 
 985              		.align	2
 986              		.global	ACISDK
 988              	ACISDK:
 989 01f4 50697463 	.LFB5:
 989      6820616E 
 989      676C6520 
 989      64657269 
 989      76656420 
 990 021a 0000     		.loc 1 356 0
 991              		@ Function supports interworking.
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 021c 616E676C 		mov	ip, sp
 994      655F7069 
 994      74636800 
 995              	.LCFI11:
 996              		stmfd	sp!, {fp, ip, lr, pc}
 997              	.LCFI12:
 998              		sub	fp, ip, #4
 999              	.LCFI13:
 1000              		sub	sp, sp, #8
 353:main.c        **** Start Added Ben Kuo
 354:main.c        **** 	//USMaxBot_range1 is the ultra sonic
 355:main.c        **** 	aciPublishVariable(&USMaxBot_range1, VARTYPE_INT32, 0x0608, "range_read", "Range Sensor", "inches"
 356:main.c        **** 	aciPublishVariable(&Ben_thrust, VARTYPE_INT32, 0x0518, "Ben_thrust", "Thrust output", "not sure ye
 1001              	loc 1 358 0
 1002              		bl	lpc_aci_init
 1003              		.loc 1 360 0
 1004              		ldr	r0, .L66
 1005 087c 0DC0A0E1 		bl	aciSetStartTxCallback
 1006              		.loc 1 366 0
 1007 0880 00D82DE9 		ldr	r3, .L66+4
 1008              		str	r3, [sp, #0]
 1009 0884 04B04CE2 		ldr	r3, .L66+8
 1010              		str	r3, [sp, #4]
 1011 0888 08D04DE2 		ldr	r0, .L66+12
 1012              		mov	r1, #16
 357:main.c        **** PublishVariable(&RO_ALL_Data.fusion_dheight, VARTYPE_INT32, 0x0305, "DataFusionHeight", "DataFusion
 1013              	8
 1014 088c FA0FA0E3 		ldr	r3, .L66+16
 1015 0890 FEFFFFEB 		bl	aciPublishVariableInt
 358:main.c        **** aciPublishVariable(&RO_RC_Data.channel[6], VARTYPE_INT32, 0x060C, "Data6", "Data Channel 6", "UL");
 1016              	oc 1 367 0
 1017 0894 FEFFFFEB 		ldr	r3, .L66+20
 359:main.c        **** aciPublishVariable(&RO_RC_Data.channel[7], VARTYPE_INT32, 0x060D, "Data7", "Data Channel 6", "UL");
 360:main.c        **** 	aciPublishVariable(&setpoint, VARTYPE_INT16, 0x060E, "setpoint", "setpoint", "inches");
 1018              	tr	r3, [sp, #0]
 1019 0898 F4019FE5 		ldr	r3, .L66+24
 1020 089c FEFFFFEB 		str	r3, [sp, #4]
 361:main.c        **** /aciPublishCommand(&(Ben_thrust), VARTYPE_UINT16 , 0x0518, "Thrust_send", "Thrust Command we send",
 362:main.c        **** 	// aciPublishCommand(&U_Kp_z, VARTYPE_SINGLE , 0x0518, "P Thrust Gain", "For Tuning the Gain for H
 363:main.c        **** 	// aciPublishCommand(&U_Kd_z, VARTYPE_SINGLE , 0x0519, "D Thrust Gain", "For Tuning the Gain for H
 364:main.c        **** 	aciPublishParameter(&U_Kp_z, VARTYPE_SINGLE, 0x0609, "P Thrust Gain", "For Tuning the Gain for Hov
 365:main.c        **** 	aciPublishParameter(&U_Kd_z, VARTYPE_SINGLE, 0x060A, "D Thrust Gain", "For Tuning the Gain for Hov
 366:main.c        **** 	aciPublishParameter(&landing_flag, VARTYPE_UINT16, 0x060B, "Landingflag", "initiate landing sequen
 1021              	r	r0, .L66+28
 1022 08a0 F0319FE5 		mov	r1, #16
 1023 08a4 00308DE5 		mov	r2, #768
 1024 08a8 EC319FE5 		add	r2, r2, #1
 1025 08ac 04308DE5 		ldr	r3, .L66+32
 1026 08b0 E8019FE5 		bl	aciPublishVariableInt
 1027 08b4 1010A0E3 		.loc 1 368 0
 1028 08b8 032CA0E3 		ldr	r3, .L66+36
 1029 08bc E0319FE5 		str	r3, [sp, #0]
 1030 08c0 FEFFFFEB 		ldr	r3, .L66+40
 367:main.c        **** d Added Ben Kuo
 1031              	sp, #4]
 1032 08c4 DC319FE5 		ldr	r0, .L66+44
 1033 08c8 00308DE5 		mov	r1, #16
 1034 08cc D8319FE5 		mov	r2, #768
 1035 08d0 04308DE5 		add	r2, r2, #2
 1036 08d4 D4019FE5 		ldr	r3, .L66+48
 1037 08d8 1010A0E3 		bl	aciPublishVariableInt
 1038 08dc 032CA0E3 		.loc 1 383 0
 1039 08e0 012082E2 		ldr	r3, .L66+52
 1040 08e4 C8319FE5 		str	r3, [sp, #0]
 1041 08e8 FEFFFFEB 		ldr	r3, .L66+56
 368:main.c        **** // Commands
 1042              	p, #4]
 1043 08ec C4319FE5 		ldr	r0, .L66+60
 1044 08f0 00308DE5 		mov	r1, #16
 1045 08f4 C0319FE5 		mov	r2, #1536
 1046 08f8 04308DE5 		add	r2, r2, #8
 1047 08fc BC019FE5 		ldr	r3, .L66+64
 1048 0900 1010A0E3 		bl	aciPublishVariableInt
 1049 0904 032CA0E3 		.loc 1 384 0
 1050 0908 022082E2 		ldr	r3, .L66+68
 1051 090c B0319FE5 		str	r3, [sp, #0]
 1052 0910 FEFFFFEB 		ldr	r3, .L66+72
 369:main.c        **** else
 370:main.c        **** 	// Matlab parameters
 371:main.c        **** 
 372:main.c        **** 	aciPublishParameter(&matlab_params.p01,VARTYPE_STRUCT_WITH_SIZE(60),0x0F00,"Matlab Parameter Set 1
 373:main.c        **** 	aciPublishParameter(&matlab_params.p16,VARTYPE_STRUCT_WITH_SIZE(60),0x0F01,"Matlab Parameter Set 2
 374:main.c        **** 	aciPublishParameter(&matlab_params.p30,VARTYPE_STRUCT_WITH_SIZE(48),0x0F02,"Matlab Parameter Set 3
 375:main.c        **** #endif
 376:main.c        **** 
 377:main.c        **** 	//get initial values from flash for all parameters
 378:main.c        **** 	lpc_aci_ReadParafromFlash();
 379:main.c        **** 
 380:main.c        **** }
 381:main.c        **** 
 382:main.c        **** 
 383:main.c        **** /* UNUSED VARIABLES
 1053              	p, #4]
 1054 0914 AC319FE5 		ldr	r0, .L66+76
 1055 0918 00308DE5 		mov	r1, #16
 1056 091c A8319FE5 		mov	r2, #1296
 1057 0920 04308DE5 		add	r2, r2, #8
 1058 0924 A4019FE5 		ldr	r3, .L66+80
 1059 0928 1010A0E3 		bl	aciPublishVariableInt
 1060 092c 062CA0E3 		.loc 1 385 0
 1061 0930 082082E2 		ldr	r3, .L66+84
 1062 0934 98319FE5 		str	r3, [sp, #0]
 1063 0938 FEFFFFEB 		ldr	r3, .L66+88
 384:main.c        **** able(&RO_ALL_Data.UAV_status, VARTYPE_INT16, 0x0001, "UAV_status", "UAV status information","See in
 1064              	p, #4]
 1065 093c 94319FE5 		ldr	r0, .L66+92
 1066 0940 00308DE5 		mov	r1, #16
 1067 0944 90319FE5 		mov	r2, #772
 1068 0948 04308DE5 		add	r2, r2, #1
 1069 094c 8C019FE5 		ldr	r3, .L66+96
 1070 0950 1010A0E3 		bl	aciPublishVariableInt
 1071 0954 512EA0E3 		.loc 1 386 0
 1072 0958 082082E2 		ldr	r2, .L66+100
 1073 095c 80319FE5 		ldr	r3, .L66+104
 1074 0960 FEFFFFEB 		str	r3, [sp, #0]
 385:main.c        **** aciPublishVariable(&RO_ALL_Data.flight_time, VARTYPE_INT16, 0x0002, "flight_time", "Total flight ti
 1075              	66+108
 1076 0964 7C319FE5 		str	r3, [sp, #4]
 1077 0968 00308DE5 		mov	r0, r2
 1078 096c 78319FE5 		mov	r1, #16
 1079 0970 04308DE5 		mov	r2, #1536
 1080 0974 74019FE5 		add	r2, r2, #12
 1081 0978 1010A0E3 		ldr	r3, .L66+112
 1082 097c C12FA0E3 		bl	aciPublishVariableInt
 1083 0980 012082E2 		.loc 1 387 0
 1084 0984 68319FE5 		ldr	r2, .L66+116
 1085 0988 FEFFFFEB 		ldr	r3, .L66+120
 386:main.c        **** aciPublishVariable(&RO_ALL_Data.battery_voltage, VARTYPE_INT16, 0x0003, "battery_voltage", "Battery
 1086              	p, #0]
 1087 098c 64219FE5 		ldr	r3, .L66+124
 1088 0990 64319FE5 		str	r3, [sp, #4]
 1089 0994 00308DE5 		mov	r0, r2
 1090 0998 60319FE5 		mov	r1, #16
 1091 099c 04308DE5 		mov	r2, #1536
 1092 09a0 0200A0E1 		add	r2, r2, #13
 1093 09a4 1010A0E3 		ldr	r3, .L66+128
 1094 09a8 062CA0E3 		bl	aciPublishVariableInt
 1095 09ac 0C2082E2 		.loc 1 388 0
 1096 09b0 4C319FE5 		ldr	r3, .L66+132
 1097 09b4 FEFFFFEB 		str	r3, [sp, #0]
 387:main.c        **** aciPublishVariable(&RO_ALL_Data.HL_cpu_load, VARTYPE_INT16, 0x0004, "HL_cpu_load", "High-level CPU 
 1098              	6+136
 1099 09b8 48219FE5 		str	r3, [sp, #4]
 1100 09bc 48319FE5 		ldr	r0, .L66+140
 1101 09c0 00308DE5 		mov	r1, #8
 1102 09c4 44319FE5 		mov	r2, #1536
 1103 09c8 04308DE5 		add	r2, r2, #14
 1104 09cc 0200A0E1 		ldr	r3, .L66+144
 1105 09d0 1010A0E3 		bl	aciPublishVariableInt
 1106 09d4 062CA0E3 		.loc 1 392 0
 1107 09d8 0D2082E2 		ldr	r3, .L66+148
 1108 09dc 30319FE5 		str	r3, [sp, #0]
 1109 09e0 FEFFFFEB 		ldr	r3, .L66+152
 388:main.c        **** aciPublishVariable(&RO_ALL_Data.HL_up_time, VARTYPE_INT16, 0x0005, "HL_up_time", "AHigh-level up-ti
 1110              	, #4]
 1111 09e4 2C319FE5 		ldr	r0, .L66+156
 1112 09e8 00308DE5 		mov	r1, #18
 1113 09ec 28319FE5 		mov	r2, #1536
 1114 09f0 04308DE5 		add	r2, r2, #9
 1115 09f4 24019FE5 		ldr	r3, .L66+160
 1116 09f8 0810A0E3 		bl	aciPublishParameterInt
 1117 09fc 062CA0E3 		.loc 1 393 0
 1118 0a00 0E2082E2 		ldr	r3, .L66+164
 1119 0a04 18319FE5 		str	r3, [sp, #0]
 1120 0a08 FEFFFFEB 		ldr	r3, .L66+168
 389:main.c        **** aciPublishVariable(&RO_ALL_Data.angvel_pitch, VARTYPE_INT32, 0x0200, "angvel_pitch", "Pitch angle v
 390:main.c        **** 	aciPublishVariable(&RO_ALL_Data.angvel_roll, VARTYPE_INT32, 0x0201, "angvel_roll", "Roll angle vel
 391:main.c        **** 	aciPublishVariable(&RO_ALL_Data.angvel_yaw, VARTYPE_INT32, 0x0202, "angvel_yaw", "Yaw angle veloci
 392:main.c        **** 	aciPublishVariable(&RO_ALL_Data.acc_x, VARTYPE_INT16, 0x0203, "acc_x", "Acc-sensor output in x, bo
 1121              	p, #4]
 1122 0a0c 14319FE5 		ldr	r0, .L66+172
 1123 0a10 00308DE5 		mov	r1, #18
 1124 0a14 10319FE5 		mov	r2, #1536
 1125 0a18 04308DE5 		add	r2, r2, #10
 1126 0a1c 0C019FE5 		ldr	r3, .L66+176
 1127 0a20 1210A0E3 		bl	aciPublishParameterInt
 1128 0a24 062CA0E3 		.loc 1 394 0
 1129 0a28 092082E2 		ldr	r3, .L66+180
 1130 0a2c 00319FE5 		str	r3, [sp, #0]
 1131 0a30 FEFFFFEB 		ldr	r3, .L66+184
 393:main.c        **** PublishVariable(&RO_ALL_Data.acc_y, VARTYPE_INT16, 0x0204, "acc_y", "Acc-sensor output in y, body f
 1132              	p, #4]
 1133 0a34 FC309FE5 		ldr	r0, .L66+188
 1134 0a38 00308DE5 		mov	r1, #9
 1135 0a3c F8309FE5 		mov	r2, #1536
 1136 0a40 04308DE5 		add	r2, r2, #11
 1137 0a44 F4009FE5 		ldr	r3, .L66+192
 1138 0a48 1210A0E3 		bl	aciPublishParameterInt
 1139 0a4c 062CA0E3 		.loc 1 406 0
 1140 0a50 0A2082E2 		bl	lpc_aci_ReadParafromFlash
 1141 0a54 E8309FE5 		.loc 1 408 0
 1142 0a58 FEFFFFEB 		sub	sp, fp, #12
 394:main.c        **** aciPublishVariable(&RO_ALL_Data.acc_z, VARTYPE_INT16, 0x0205, "acc_z", "Acc-sensor output in z, bod
 1143              	{fp, sp, lr}
 1144 0a5c E4309FE5 		bx	lr
 1145 0a60 00308DE5 	.L67:
 1146 0a64 E0309FE5 		.align	2
 1147 0a68 04308DE5 	.L66:
 1148 0a6c DC009FE5 		.word	UARTWriteChar
 1149 0a70 0910A0E3 		.word	cvCharDesc0x0300.2351
 1150 0a74 062CA0E3 		.word	cvCharUnit0x0300.2352
 1151 0a78 0B2082E2 		.word	RO_ALL_Data+28
 1152 0a7c D0309FE5 		.word	cvCharName0x0300.2350
 1153 0a80 FEFFFFEB 		.word	cvCharDesc0x0301.2355
 395:main.c        **** aciPublishVariable(&RO_ALL_Data.motor_rpm[0], VARTYPE_UINT8, 0x0100, "motor_rpm[0]", "Quadcopter: f
 396:main.c        **** 	aciPublishVariable(&RO_ALL_Data.motor_rpm[1], VARTYPE_UINT8, 0x0101, "motor_rpm[1]", "Quadcopter: 
 397:main.c        **** 	aciPublishVariable(&RO_ALL_Data.motor_rpm[2], VARTYPE_UINT8, 0x0102, "motor_rpm[2]", "Quadcopter: 
 398:main.c        **** 	aciPublishVariable(&RO_ALL_Data.motor_rpm[3], VARTYPE_UINT8, 0x0103, "motor_rpm[3]", "Quadcopter: 
 399:main.c        **** 	aciPublishVariable(&RO_ALL_Data.motor_rpm[4], VARTYPE_UINT8, 0x0104, "motor_rpm[4]", "Quadcopter: 
 400:main.c        **** 	aciPublishVariable(&RO_ALL_Data.motor_rpm[5], VARTYPE_UINT8, 0x0105, "motor_rpm[5]", "Quadcopter: 
 401:main.c        **** 
 402:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_latitude, VARTYPE_INT32, 0x0106, "GPS_latitude", "Latitude fro
 403:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_longitude, VARTYPE_INT32, 0x0107, "GPS_longitude", "Longitude 
 404:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_height, VARTYPE_INT32, 0x0108, "GPS_height", "Height from the 
 405:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_speed_x, VARTYPE_INT32, 0x0109, "GPS_speed_x", "Speed in East/
 406:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_speed_y, VARTYPE_INT32, 0x010A, "GPS_speed_y", "Speed in North
 1154              	arUnit0x0301.2356
 1155 0a84 FEFFFFEB 		.word	RO_ALL_Data+32
 407:main.c        **** ariable(&RO_ALL_Data.GPS_heading, VARTYPE_INT32, 0x010B, "GPS_heading", "Heading from the Compass",
 408:main.c        **** 	aciPublishVariable(&RO_ALL_Data.GPS_position_accuracy, VARTYPE_UINT32, 0x010C, "GPS_position_accur
 1156              	word	cvCharName0x0301.2354
 1157 0a88 0CD04BE2 		.word	cvCharDesc0x0302.2358
 1158 0a8c 00689DE8 		.word	cvCharUnit0x0302.2359
 1159 0a90 1EFF2FE1 		.word	RO_ALL_Data+36
 1160              		.word	cvCharName0x0302.2357
 1161              		.word	cvCharDesc0x0608.2361
 1162              		.word	cvCharUnit0x0608.2362
 1163 0a94 00000000 		.word	USMaxBot_range1
 1164 0a98 F4010000 		.word	cvCharName0x0608.2360
 1165 0a9c E8010000 		.word	cvCharDesc0x0518.2364
 1166 0aa0 1C000000 		.word	cvCharUnit0x0518.2365
 1167 0aa4 1C020000 		.word	Ben_thrust
 1168 0aa8 B8010000 		.word	cvCharName0x0518.2363
 1169 0aac AC010000 		.word	cvCharDesc0x0305.2367
 1170 0ab0 20000000 		.word	cvCharUnit0x0305.2368
 1171 0ab4 DC010000 		.word	RO_ALL_Data+136
 1172 0ab8 7C010000 		.word	cvCharName0x0305.2366
 1173 0abc 70010000 		.word	RO_RC_Data+12
 1174 0ac0 24000000 		.word	cvCharDesc0x060C.2370
 1175 0ac4 A0010000 		.word	cvCharUnit0x060C.2371
 1176 0ac8 54010000 		.word	cvCharName0x060C.2369
 1177 0acc 4C010000 		.word	RO_RC_Data+14
 1178 0ad0 00000000 		.word	cvCharDesc0x060D.2373
 1179 0ad4 64010000 		.word	cvCharUnit0x060D.2374
 1180 0ad8 30010000 		.word	cvCharName0x060D.2372
 1181 0adc 20010000 		.word	cvCharDesc0x060E.2376
 1182 0ae0 00000000 		.word	cvCharUnit0x060E.2377
 1183 0ae4 40010000 		.word	setpoint
 1184 0ae8 F8000000 		.word	cvCharName0x060E.2375
 1185 0aec F4000000 		.word	cpCharDesc0x0609.2379
 1186 0af0 88000000 		.word	cpCharUnit0x0609.2380
 1187 0af4 0C010000 		.word	U_Kp_z
 1188 0af8 0C000000 		.word	cpCharName0x0609.2378
 1189 0afc DC000000 		.word	cpCharDesc0x060A.2383
 1190 0b00 D8000000 		.word	cpCharUnit0x060A.2384
 1191 0b04 EC000000 		.word	U_Kd_z
 1192 0b08 0E000000 		.word	cpCharName0x060A.2382
 1193 0b0c C0000000 		.word	cpCharDesc0x060B.2386
 1194 0b10 BC000000 		.word	cpCharUnit0x060B.2387
 1195 0b14 D0000000 		.word	landing_flag
 1196 0b18 A4000000 		.word	cpCharName0x060B.2385
 1197 0b1c 9C000000 	.LFE5:
 1199 0b24 B0000000 		.comm	IMU_CalcData,92,4
 1200 0b28 68000000 		.comm	IMU_CalcData_tmp,92,4
 1201 0b2c 64000000 		.comm	HL_Status,24,4
 1202 0b30 00000000 		.comm	GPS_Time,8,4
 1203 0b34 8C000000 		.comm	SSP_trans_cnt,4,4
 1204 0b38 30000000 		.comm	takeoff2,4,4
 1205 0b3c 2C000000 		.comm	initialize,4,4
 1206 0b40 00000000 		.comm	velocityEstHolder,4,4
 1207 0b44 54000000 		.comm	VelEstX,4,4
 1208 0b48 04000000 		.comm	VelEstY,4,4
 1209 0b4c 00000000 		.comm	VelEstZ,4,4
 1210 0b50 00000000 		.comm	previousXMeas,4,4
 1211 0b54 20000000 		.comm	previousYMeas,4,4
 1212              		.comm	previousZMeas,4,4
 1213              		.comm	errorcum,12,4
 1214              		.comm	IntegralHolder,4,4
 1215              		.comm	uart_cnt,4,4
 1216              		.section	.debug_frame,"",%progbits
 1217              	.Lframe0:
 1218              		.4byte	.LECIE0-.LSCIE0
 1219              	.LSCIE0:
 1220              		.4byte	0xffffffff
 1221              		.byte	0x1
 1222              		.ascii	"\000"
 1223              		.uleb128 0x1
 1224              		.sleb128 -4
 1225              		.byte	0xe
 1226              		.byte	0xc
 1227              		.uleb128 0xd
 1228              		.uleb128 0x0
 1229              		.align	2
 1230              	.LECIE0:
 1358              		.byte	0x7b
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:15     .bss:00000000 int_cnt
                             .bss:00000000 $d
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:21     .bss:00000004 cnt
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:27     .bss:00000008 mainloop_cnt
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:32     .bss:0000000c mainloop_trigger
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:38     .bss:00000010 GPS_timeout
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:44     .bss:00000014 trigger_cnt
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:49     .bss:00000018 SYSTEM_initialized
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:55     .data:00000000 DataOutputsPerSecond
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:61     .bss:00000019 fireflyLedEnabled
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:52     .bss:00000019 $d
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:67     .data:00000001 PTU_cam_option_4_version
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:74     .bss:0000001a mainloop_overflows
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:64     .bss:0000001a $d
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:80     .text:00000000 timer0ISR
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:87     .text:00000000 $a
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:159    .text:000000d8 $d
                            *COM*:00000018 HL_Status
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:167    .bss:0000001c vbat1.2181
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:174    .text:000000e8 main
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:180    .text:000000e8 $a
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:999    .text:0000087c ACISDK
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:472    .text:00000470 mainloop
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:444    .text:00000448 $d
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:458    .bss:00000020 Firefly_led_fin_cnt.2256
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:463    .data:00000002 led_state.2255
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:460    .bss:00000024 $d
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:466    .bss:00000024 led_cnt.2254
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:478    .text:00000470 $a
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:797    .text:00000840 $d
                            *COM*:00000008 GPS_Time
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:818    .rodata:00000000 cpCharUnit0x060B.2387
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:823    .rodata:00000004 cpCharDesc0x060B.2386
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:828    .rodata:00000020 cpCharName0x060B.2385
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:833    .rodata:0000002c cpCharUnit0x060A.2384
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:838    .rodata:00000030 cpCharDesc0x060A.2383
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:843    .rodata:00000054 cpCharName0x060A.2382
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:848    .rodata:00000064 cpCharUnit0x0609.2380
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:853    .rodata:00000068 cpCharDesc0x0609.2379
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:858    .rodata:0000008c cpCharName0x0609.2378
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:863    .rodata:0000009c cvCharUnit0x060E.2377
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:868    .rodata:000000a4 cvCharDesc0x060E.2376
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:873    .rodata:000000b0 cvCharName0x060E.2375
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:878    .rodata:000000bc cvCharUnit0x060D.2374
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:883    .rodata:000000c0 cvCharDesc0x060D.2373
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:888    .rodata:000000d0 cvCharName0x060D.2372
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:893    .rodata:000000d8 cvCharUnit0x060C.2371
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:898    .rodata:000000dc cvCharDesc0x060C.2370
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:903    .rodata:000000ec cvCharName0x060C.2369
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:908    .rodata:000000f4 cvCharUnit0x0305.2368
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:913    .rodata:000000f8 cvCharDesc0x0305.2367
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:918    .rodata:0000010c cvCharName0x0305.2366
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:923    .rodata:00000120 cvCharUnit0x0518.2365
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:928    .rodata:00000130 cvCharDesc0x0518.2364
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:933    .rodata:00000140 cvCharName0x0518.2363
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:938    .rodata:0000014c cvCharUnit0x0608.2362
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:943    .rodata:00000154 cvCharDesc0x0608.2361
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:948    .rodata:00000164 cvCharName0x0608.2360
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:953    .rodata:00000170 cvCharUnit0x0302.2359
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:958    .rodata:0000017c cvCharDesc0x0302.2358
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:963    .rodata:000001a0 cvCharName0x0302.2357
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:968    .rodata:000001ac cvCharUnit0x0301.2356
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:973    .rodata:000001b8 cvCharDesc0x0301.2355
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:978    .rodata:000001dc cvCharName0x0301.2354
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:983    .rodata:000001e8 cvCharUnit0x0300.2352
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:988    .rodata:000001f4 cvCharDesc0x0300.2351
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:993    .rodata:0000021c cvCharName0x0300.2350
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:1005   .text:0000087c $a
C:\Users\bkuo\AppData\Local\Temp/ccyKbaaa.s:1163   .text:00000a94 $d
                            *COM*:0000005c IMU_CalcData
                            *COM*:0000005c IMU_CalcData_tmp
                            *COM*:00000004 SSP_trans_cnt
                            *COM*:00000004 takeoff2
                            *COM*:00000004 initialize
                            *COM*:00000004 velocityEstHolder
                            *COM*:00000004 VelEstX
                            *COM*:00000004 VelEstY
                            *COM*:00000004 VelEstZ
                            *COM*:00000004 previousXMeas
                            *COM*:00000004 previousYMeas
                            *COM*:00000004 previousZMeas
                            *COM*:0000000c errorcum
                            *COM*:00000004 IntegralHolder
                            *COM*:00000004 uart_cnt

UNDEFINED SYMBOLS
__udivsi3
SDK_Init
init
buzzer
LL_write_init
I2C1Init
I2C1_setRGBLed
ADC0triggerSampling
generateBuildInfo
LED
ADC0getSamplingResults
buzzer_handler
GPS_Data
adcChannelValues
getDeclination
ringbuffer
UARTWriteChar
uBloxReceiveEngine
SDK_mainloop
HL2LL_write_cycle
aciSyncVar
aciSyncCmd
aciSyncPar
aciEngine
fireFlyLedHandler
declinationAvailable
estimatedDeclination
gpsLEDTrigger
RO_ALL_Data
trigger_transmission
transmission_running
transmitBuildInfoTrigger
aciInit
lpc_aci_init
aciSetStartTxCallback
aciPublishVariableInt
aciPublishParameterInt
lpc_aci_ReadParafromFlash
USMaxBot_range1
Ben_thrust
RO_RC_Data
setpoint
U_Kp_z
U_Kd_z
landing_flag
