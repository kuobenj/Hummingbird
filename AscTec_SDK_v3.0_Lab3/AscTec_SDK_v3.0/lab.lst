   1              		.file	"lab.c"
   9              	.Ltext0:
  10              		.global	mass
  11              		.data
  12              		.align	2
  15              	mass:
  16 0000 0000C03F 		.word	1069547520
  17              		.global	kF
  18              		.align	2
  21              	kF:
  22 0004 10CE8637 		.word	931581456
  23              		.global	kM
  24              		.align	2
  27              	kM:
  28 0008 4D59AE34 		.word	883841357
  29              		.global	l
  30              		.align	2
  33              	l:
  34 000c F6285C3E 		.word	1046227190
  35              		.global	MAXPHI2
  36              		.align	2
  39              	MAXPHI2:
  40 0010 7B5E1449 		.word	1226071675
  41              		.global	MINPHI2
  42              		.align	2
  45              	MINPHI2:
  46 0014 747A4646 		.word	1179023988
  47              		.global	g
  48              		.align	2
  51              	g:
  52 0018 0AE81C41 		.word	1092413450
  53              		.text
  54              		.align	2
  55              		.global	lab
  57              	lab:
  58              	.LFB2:
  59              		.file 1 "lab.c"
   1:lab.c         **** /*
   2:lab.c         ****  * lab.c
   3:lab.c         ****  *
   4:lab.c         ****  *  Created on: Jan 26, 2015
   5:lab.c         ****  *      Author: hanley6
   6:lab.c         ****  */
   7:lab.c         **** 
   8:lab.c         **** /*----------------------------------------------------------------------*/
   9:lab.c         **** /*------------------------------ Preamble ------------------------------*/
  10:lab.c         **** /*----------------------------------------------------------------------*/
  11:lab.c         **** 
  12:lab.c         **** /*--------------- Includes ---------------*/
  13:lab.c         **** #include "lab.h"
  14:lab.c         **** #include "math.h"
  15:lab.c         **** /*------------- End Includes -------------*/
  16:lab.c         **** 
  17:lab.c         **** /*---------- Function Prototypes ---------*/
  18:lab.c         **** void lab2(void);
  19:lab.c         **** void lab3(void);
  20:lab.c         **** void Command(void);
  21:lab.c         **** void VelocityEst(void); 
  22:lab.c         **** /*-------- End Function Prototypes -------*/
  23:lab.c         **** 
  24:lab.c         **** /*--------------- Globals ----------------*/
  25:lab.c         **** struct imuSensor imusensor;
  26:lab.c         **** struct U u;
  27:lab.c         **** struct realMOCAP real_mocap;
  28:lab.c         **** struct MOCAP mocap;
  29:lab.c         **** 
  30:lab.c         **** /////////// HUMMINGBIRD PARAMETERS /////////////
  31:lab.c         **** float mass = 1.5;  	// TO BE ENTERED!			
  32:lab.c         **** float kF = 1.607e-5; 	// TO BE ENTERED!		
  33:lab.c         **** float kM = 3.2475e-7; 	// TO BE ENTERED!		
  34:lab.c         **** float l = 0.215;    	// TO BE ENTERED!		
  35:lab.c         **** float MAXPHI2 = powf(779.5638,2.0);	// TO BE ENTERED!
  36:lab.c         **** float MINPHI2 = powf(112.705875,2.0);	// TO BE ENTERED!
  37:lab.c         **** ////////////////////////////////////////////
  38:lab.c         **** 
  39:lab.c         **** // Other Declarations
  40:lab.c         **** float Winv[4*4];
  41:lab.c         **** float cnt_u[4];
  42:lab.c         **** float omega_cmd2[4];
  43:lab.c         **** float omega_cmd[4];
  44:lab.c         **** float cmd[4];
  45:lab.c         **** float roll_desired;
  46:lab.c         **** float pitch_desired;
  47:lab.c         **** float yaw_desired;
  48:lab.c         **** float x_nom[4];
  49:lab.c         **** float g = 9.80665;	// Standard Gravity m/s^2
  50:lab.c         **** float z[3];		// Sensor measurement for Kalman Filter
  51:lab.c         **** /*------------- End Globals --------------*/
  52:lab.c         **** 
  53:lab.c         **** /*----------------------------------------------------------------------*/
  54:lab.c         **** /*---------------------------- End Preamble ----------------------------*/
  55:lab.c         **** /*----------------------------------------------------------------------*/
  56:lab.c         **** 
  57:lab.c         **** 
  58:lab.c         **** /*----------------------------------------------------------------------*/
  59:lab.c         **** /*------------------ Main Loop (called at 1 kHz) -----------------------*/
  60:lab.c         **** /*----------------------------------------------------------------------*/
  61:lab.c         **** void lab(void)
  62:lab.c         **** {
  60              	, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		mov	ip, sp
  63              	.LCFI0:
  64 0000 0DC0A0E1 		stmfd	sp!, {fp, ip, lr, pc}
  65              	.LCFI1:
  66 0004 00D82DE9 		sub	fp, ip, #4
  67              	.LCFI2:
  68 0008 04B04CE2 		.loc 1 64 0
  69              		ldr	r2, .L3
  63:lab.c         **** 	// Desired Position
  64:lab.c         **** 	x_nom[0] = 0.0;		// x/North (m)
  70              	L3+4	@ float
  71 000c 40209FE5 		str	r3, [r2, #0]	@ float
  72 0010 40309FE5 		.loc 1 65 0
  73 0014 003082E5 		ldr	r2, .L3
  65:lab.c         **** 	x_nom[1] = 0.0;		// y/East (m)
  74              		r3, .L3+4	@ float
  75 0018 34209FE5 		str	r3, [r2, #4]	@ float
  76 001c 34309FE5 		.loc 1 66 0
  77 0020 043082E5 		ldr	r2, .L3
  66:lab.c         **** 	x_nom[2] = -1.0;	// z/Down (m)
  78              		r3, .L3+8	@ float
  79 0024 28209FE5 		str	r3, [r2, #8]	@ float
  80 0028 2C309FE5 		.loc 1 67 0
  81 002c 083082E5 		ldr	r2, .L3
  67:lab.c         **** 	x_nom[3] = 0.0;		// yaw (rad)
  82              		r3, .L3+4	@ float
  83 0030 1C209FE5 		str	r3, [r2, #12]	@ float
  84 0034 1C309FE5 		.loc 1 70 0
  85 0038 0C3082E5 		bl	VelocityEst
  68:lab.c         **** 
  69:lab.c         **** 	// Velocity Estimation	
  70:lab.c         **** 	VelocityEst();
  86              	c 1 73 0
  87 003c FEFFFFEB 		bl	lab3
  71:lab.c         **** 
  72:lab.c         **** 	// Lab 3
  73:lab.c         **** 	lab3();
  88              	loc 1 79 0
  89 0040 FEFFFFEB 		bl	Command
  74:lab.c         **** 
  75:lab.c         **** 	// Lab 2
  76:lab.c         **** 	//lab2();
  77:lab.c         **** 
  78:lab.c         **** 	// Convert Controller Outputs to Motor Inputs
  79:lab.c         **** 	Command();
  90              	loc 1 81 0
  91 0044 FEFFFFEB 		sub	sp, fp, #12
  80:lab.c         **** 	
  81:lab.c         **** }
  92              	dmfd	sp, {fp, sp, lr}
  93 0048 0CD04BE2 		bx	lr
  94 004c 00689DE8 	.L4:
  95 0050 1EFF2FE1 		.align	2
  96              	.L3:
  97              		.word	x_nom
  98              		.word	0
  99 0054 00000000 		.word	-1082130432
 100 0058 00000000 	.LFE2:
 102              		.global	__nesf2
 103              		.global	__subsf3
 104              		.global	__extendsfdf2
 105              		.global	__divdf3
 106              		.global	__truncdfsf2
 107              		.global	__mulsf3
 108              		.global	__subdf3
 109              		.global	__muldf3
 110              		.global	__adddf3
 111              		.align	2
 112              		.global	VelocityEst
 114              	VelocityEst:
 115              	.LFB3:
 116              		.loc 1 90 0
 117              		@ Function supports interworking.
  82:lab.c         **** /*----------------------------------------------------------------------*/
  83:lab.c         **** /*---------------- End Main Loop (called at 1 kHz) ---------------------*/
  84:lab.c         **** /*----------------------------------------------------------------------*/
  85:lab.c         **** 
  86:lab.c         **** /*----------------------------------------------------------------------*/
  87:lab.c         **** /*------------------------------ Helpers -------------------------------*/
  88:lab.c         **** /*----------------------------------------------------------------------*/
  89:lab.c         **** /*---------- Velocity Estimator ----------*/
  90:lab.c         **** void VelocityEst() {
 118              	frame = 4
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		mov	ip, sp
 121              	.LCFI3:
 122 0060 0DC0A0E1 		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 123              	.LCFI4:
 124 0064 F0D92DE9 		sub	fp, ip, #4
 125              	.LCFI5:
 126 0068 04B04CE2 		sub	sp, sp, #4
 127              	.LCFI6:
 128 006c 04D04DE2 		.loc 1 93 0
 129              		ldr	r3, .L16
  91:lab.c         **** 
  92:lab.c         **** 	// Velocity Estimation
  93:lab.c         **** 	if (initialize == 0)
 130              	, #0]
 131 0070 90309FE5 		cmp	r3, #0
 132 0074 003093E5 		bne	.L6
 133 0078 000053E3 		.loc 1 96 0
 134 007c 2F00001A 		ldr	r3, .L16+36
  94:lab.c         **** 	{
  95:lab.c         **** 		// Initialization
  96:lab.c         **** 		mocap.dX = real_mocap.dX;
 135              	r2, [r3, #8]	@ float
 136 0080 A4309FE5 		ldr	r3, .L16+40
 137 0084 082093E5 		str	r2, [r3, #8]	@ float
 138 0088 A0309FE5 		.loc 1 97 0
 139 008c 082083E5 		ldr	r3, .L16+36
  97:lab.c         **** 		mocap.dY = real_mocap.dY;
 140              	r2, [r3, #12]	@ float
 141 0090 94309FE5 		ldr	r3, .L16+40
 142 0094 0C2093E5 		str	r2, [r3, #12]	@ float
 143 0098 90309FE5 		.loc 1 98 0
 144 009c 0C2083E5 		ldr	r3, .L16+36
  98:lab.c         **** 		mocap.dZ = real_mocap.dZ;
 145              	r2, [r3, #16]	@ float
 146 00a0 84309FE5 		ldr	r3, .L16+40
 147 00a4 102093E5 		str	r2, [r3, #16]	@ float
 148 00a8 80309FE5 		.loc 1 99 0
 149 00ac 102083E5 		ldr	r2, .L16+40
  99:lab.c         **** 		mocap.dVx = 0.0;
 150              	r3, .L16+4	@ float
 151 00b0 78209FE5 		str	r3, [r2, #20]	@ float
 152 00b4 50309FE5 		.loc 1 100 0
 153 00b8 143082E5 		ldr	r2, .L16+40
 100:lab.c         **** 		mocap.dVy = 0.0;
 154              		r3, .L16+4	@ float
 155 00bc 6C209FE5 		str	r3, [r2, #24]	@ float
 156 00c0 44309FE5 		.loc 1 101 0
 157 00c4 183082E5 		ldr	r2, .L16+40
 101:lab.c         **** 		mocap.dVz = 0.0;
 158              		r3, .L16+4	@ float
 159 00c8 60209FE5 		str	r3, [r2, #28]	@ float
 160 00cc 38309FE5 		.loc 1 104 0
 161 00d0 1C3082E5 		ldr	r3, .L16+36
 102:lab.c         **** 
 103:lab.c         **** 		// End Initialization if first packet from MoCap received
 104:lab.c         **** 		if (real_mocap.dX != 0.0)
 162              		r3, [r3, #8]	@ float
 163 00d4 50309FE5 		mov	r0, r3
 164 00d8 083093E5 		ldr	r1, .L16+4	@ float
 165 00dc 0300A0E1 		bl	__nesf2
 166 00e0 24109FE5 		mov	r3, r0
 167 00e4 FEFFFFEB 		cmp	r3, #0
 168 00e8 0030A0E1 		bne	.L10
 169 00ec 000053E3 		b	.L15
 170 00f0 0000001A 	.L10:
 171 00f4 1C0100EA 		.loc 1 106 0
 172              		ldr	r2, .L16
 105:lab.c         **** 		{		
 106:lab.c         **** 			initialize = 1;
 173              	
 174 00f8 08209FE5 		str	r3, [r2, #0]
 175 00fc 0130A0E3 		b	.L15
 176 0100 003082E5 	.L17:
 177 0104 180100EA 		.align	2
 178              	.L16:
 179              		.word	initialize
 180              		.word	0
 181 0108 00000000 		.word	1045220557
 182 010c 00000000 		.word	previousXMeas
 183 0110 CDCC4C3E 		.word	previousYMeas
 184 0114 00000000 		.word	previousZMeas
 185 0118 00000000 		.word	VelEstX
 186 011c 00000000 		.word	VelEstY
 187 0120 00000000 		.word	VelEstZ
 188 0124 00000000 		.word	real_mocap
 189 0128 00000000 		.word	mocap
 190 012c 00000000 		.word	velocityEstHolder
 191 0130 00000000 		.word	1065646817
 192 0134 00000000 		.word	1202590843
 193 0138 E17A843F 	.L6:
 194 013c 7B14AE47 		.loc 1 112 0
 195              		ldr	r3, .L16+44
 107:lab.c         **** 		}
 108:lab.c         **** 	}
 109:lab.c         **** 	else 
 110:lab.c         **** 	{
 111:lab.c         **** 		// Update velocity estimate at 100 Hz
 112:lab.c         **** 		if (velocityEstHolder == 0)
 196              		r3, #0
 197 0140 14301FE5 		bne	.L12
 198 0144 003093E5 	.LBB2:
 199 0148 000053E3 		.loc 1 116 0
 200 014c FA00001A 		ldr	r3, .L16+8	@ float
 201              		str	r3, [fp, #-36]	@ float
 113:lab.c         **** 		{			
 114:lab.c         **** 			/*----- Low Pass Filtering -----*/
 115:lab.c         **** 			// Low Pass Filter Gain
 116:lab.c         **** 			float alpha = 0.2;
 202              	1 119 0
 203 0150 48301FE5 		ldr	r3, .L16+36
 204 0154 24300BE5 		ldr	r2, [r3, #8]	@ float
 117:lab.c         **** 
 118:lab.c         **** 			// Finite Difference Velocity Estimation
 119:lab.c         **** 			VelEstX = (real_mocap.dX - previousXMeas)/0.01;
 205              	r	r3, .L16+12
 206 0158 34301FE5 		ldr	r3, [r3, #0]	@ float
 207 015c 082093E5 		mov	r0, r2
 208 0160 54301FE5 		mov	r1, r3
 209 0164 003093E5 		bl	__subsf3
 210 0168 0200A0E1 		mov	r3, r0
 211 016c 0310A0E1 		mov	r0, r3
 212 0170 FEFFFFEB 		bl	__extendsfdf2
 213 0174 0030A0E1 		mov	r3, r0
 214 0178 0300A0E1 		mov	r4, r1
 215 017c FEFFFFEB 		mov	r0, r3
 216 0180 0030A0E1 		mov	r1, r4
 217 0184 0140A0E1 		adr	r2, .L16+48
 218 0188 0300A0E1 		ldmia	r2, {r2-r3}
 219 018c 0410A0E1 		bl	__divdf3
 220 0190 60204FE2 		mov	r3, r0
 221 0194 0C0092E8 		mov	r4, r1
 222 0198 FEFFFFEB 		mov	r0, r3
 223 019c 0030A0E1 		mov	r1, r4
 224 01a0 0140A0E1 		bl	__truncdfsf2
 225 01a4 0300A0E1 		mov	r2, r0
 226 01a8 0410A0E1 		ldr	r3, .L16+24
 227 01ac FEFFFFEB 		str	r2, [r3, #0]	@ float
 228 01b0 0020A0E1 		.loc 1 120 0
 229 01b4 9C301FE5 		ldr	r3, .L16+36
 230 01b8 002083E5 		ldr	r2, [r3, #12]	@ float
 120:lab.c         **** 			VelEstY = (real_mocap.dY - previousYMeas)/0.01;
 231              	[r3, #0]	@ float
 232 01bc 98301FE5 		mov	r0, r2
 233 01c0 0C2093E5 		mov	r1, r3
 234 01c4 B4301FE5 		bl	__subsf3
 235 01c8 003093E5 		mov	r3, r0
 236 01cc 0200A0E1 		mov	r0, r3
 237 01d0 0310A0E1 		bl	__extendsfdf2
 238 01d4 FEFFFFEB 		mov	r3, r0
 239 01d8 0030A0E1 		mov	r4, r1
 240 01dc 0300A0E1 		mov	r0, r3
 241 01e0 FEFFFFEB 		mov	r1, r4
 242 01e4 0030A0E1 		adr	r2, .L16+48
 243 01e8 0140A0E1 		ldmia	r2, {r2-r3}
 244 01ec 0300A0E1 		bl	__divdf3
 245 01f0 0410A0E1 		mov	r3, r0
 246 01f4 C4204FE2 		mov	r4, r1
 247 01f8 0C0092E8 		mov	r0, r3
 248 01fc FEFFFFEB 		mov	r1, r4
 249 0200 0030A0E1 		bl	__truncdfsf2
 250 0204 0140A0E1 		mov	r2, r0
 251 0208 0300A0E1 		ldr	r3, .L16+28
 252 020c 0410A0E1 		str	r2, [r3, #0]	@ float
 253 0210 FEFFFFEB 		.loc 1 121 0
 254 0214 0020A0E1 		ldr	r3, .L16+36
 255 0218 FC301FE5 		ldr	r2, [r3, #16]	@ float
 256 021c 002083E5 		ldr	r3, .L16+20
 121:lab.c         **** 			VelEstZ = (real_mocap.dZ - previousZMeas)/0.01;
 257              		mov	r0, r2
 258 0220 FC301FE5 		mov	r1, r3
 259 0224 102093E5 		bl	__subsf3
 260 0228 14311FE5 		mov	r3, r0
 261 022c 003093E5 		mov	r0, r3
 262 0230 0200A0E1 		bl	__extendsfdf2
 263 0234 0310A0E1 		mov	r3, r0
 264 0238 FEFFFFEB 		mov	r4, r1
 265 023c 0030A0E1 		mov	r0, r3
 266 0240 0300A0E1 		mov	r1, r4
 267 0244 FEFFFFEB 		adr	r2, .L16+48
 268 0248 0030A0E1 		ldmia	r2, {r2-r3}
 269 024c 0140A0E1 		bl	__divdf3
 270 0250 0300A0E1 		mov	r3, r0
 271 0254 0410A0E1 		mov	r4, r1
 272 0258 4A2F4FE2 		mov	r0, r3
 273 025c 0C0092E8 		mov	r1, r4
 274 0260 FEFFFFEB 		bl	__truncdfsf2
 275 0264 0030A0E1 		mov	r2, r0
 276 0268 0140A0E1 		ldr	r3, .L16+32
 277 026c 0300A0E1 		str	r2, [r3, #0]	@ float
 278 0270 0410A0E1 		.loc 1 124 0
 279 0274 FEFFFFEB 		ldr	r3, .L16+36
 280 0278 0020A0E1 		ldr	r2, [r3, #8]	@ float
 281 027c 5C311FE5 		ldr	r3, .L16+12
 282 0280 002083E5 		str	r2, [r3, #0]	@ float
 122:lab.c         **** 
 123:lab.c         **** 			// Save Current MoCap Measurement as Previous Measurement
 124:lab.c         **** 			previousXMeas = real_mocap.dX;
 283              	6+36
 284 0284 60311FE5 		ldr	r2, [r3, #12]	@ float
 285 0288 082093E5 		ldr	r3, .L16+16
 286 028c 80311FE5 		str	r2, [r3, #0]	@ float
 287 0290 002083E5 		.loc 1 126 0
 125:lab.c         **** 			previousYMeas = real_mocap.dY;			
 288              	r3, .L16+36
 289 0294 70311FE5 		ldr	r2, [r3, #16]	@ float
 290 0298 0C2093E5 		ldr	r3, .L16+20
 291 029c 8C311FE5 		str	r2, [r3, #0]	@ float
 292 02a0 002083E5 		.loc 1 129 0
 126:lab.c         **** 			previousZMeas = real_mocap.dZ;
 293              	r3, .L16+24
 294 02a4 80311FE5 		ldr	r3, [r3, #0]	@ float
 295 02a8 102093E5 		mov	r0, r3
 296 02ac 98311FE5 		ldr	r1, [fp, #-36]	@ float
 297 02b0 002083E5 		bl	__mulsf3
 127:lab.c         **** 
 128:lab.c         **** 			// Low Pass Filter
 129:lab.c         **** 			mocap.dVx = alpha*VelEstX+(1.0-alpha)*mocap.dVx;
 298              	r3, r0
 299 02b4 9C311FE5 		mov	r0, r3
 300 02b8 003093E5 		bl	__extendsfdf2
 301 02bc 0300A0E1 		mov	r7, r0
 302 02c0 24101BE5 		mov	r8, r1
 303 02c4 FEFFFFEB 		ldr	r0, [fp, #-36]	@ float
 304 02c8 0030A0E1 		bl	__extendsfdf2
 305 02cc 0300A0E1 		mov	r3, r0
 306 02d0 FEFFFFEB 		mov	r4, r1
 307 02d4 0070A0E1 		mov	r0, #1069547520
 308 02d8 0180A0E1 		add	r0, r0, #3145728
 309 02dc 24001BE5 		mov	r1, #0
 310 02e0 FEFFFFEB 		mov	r2, r3
 311 02e4 0030A0E1 		mov	r3, r4
 312 02e8 0140A0E1 		bl	__subdf3
 313 02ec FF05A0E3 		mov	r3, r0
 314 02f0 030680E2 		mov	r4, r1
 315 02f4 0010A0E3 		mov	r5, r3
 316 02f8 0320A0E1 		mov	r6, r4
 317 02fc 0430A0E1 		ldr	r3, .L16+40
 318 0300 FEFFFFEB 		ldr	r3, [r3, #20]	@ float
 319 0304 0030A0E1 		mov	r0, r3
 320 0308 0140A0E1 		bl	__extendsfdf2
 321 030c 0350A0E1 		mov	r3, r0
 322 0310 0460A0E1 		mov	r4, r1
 323 0314 EC311FE5 		mov	r0, r5
 324 0318 143093E5 		mov	r1, r6
 325 031c 0300A0E1 		mov	r2, r3
 326 0320 FEFFFFEB 		mov	r3, r4
 327 0324 0030A0E1 		bl	__muldf3
 328 0328 0140A0E1 		mov	r3, r0
 329 032c 0500A0E1 		mov	r4, r1
 330 0330 0610A0E1 		mov	r0, r7
 331 0334 0320A0E1 		mov	r1, r8
 332 0338 0430A0E1 		mov	r2, r3
 333 033c FEFFFFEB 		mov	r3, r4
 334 0340 0030A0E1 		bl	__adddf3
 335 0344 0140A0E1 		mov	r3, r0
 336 0348 0700A0E1 		mov	r4, r1
 337 034c 0810A0E1 		mov	r0, r3
 338 0350 0320A0E1 		mov	r1, r4
 339 0354 0430A0E1 		bl	__truncdfsf2
 340 0358 FEFFFFEB 		mov	r2, r0
 341 035c 0030A0E1 		ldr	r3, .L16+40
 342 0360 0140A0E1 		str	r2, [r3, #20]	@ float
 343 0364 0300A0E1 		.loc 1 130 0
 344 0368 0410A0E1 		ldr	r3, .L16+28
 345 036c FEFFFFEB 		ldr	r3, [r3, #0]	@ float
 346 0370 0020A0E1 		mov	r0, r3
 347 0374 4C321FE5 		ldr	r1, [fp, #-36]	@ float
 348 0378 142083E5 		bl	__mulsf3
 130:lab.c         **** 			mocap.dVy = alpha*VelEstY+(1.0-alpha)*mocap.dVy;
 349              	r0
 350 037c 60321FE5 		mov	r8, r1
 351 0380 003093E5 		ldr	r0, [fp, #-36]	@ float
 352 0384 0300A0E1 		bl	__extendsfdf2
 353 0388 24101BE5 		mov	r3, r0
 354 038c FEFFFFEB 		mov	r4, r1
 355 0390 0030A0E1 		mov	r0, #1069547520
 356 0394 0300A0E1 		add	r0, r0, #3145728
 357 0398 FEFFFFEB 		mov	r1, #0
 358 039c 0070A0E1 		mov	r2, r3
 359 03a0 0180A0E1 		mov	r3, r4
 360 03a4 24001BE5 		bl	__subdf3
 361 03a8 FEFFFFEB 		mov	r3, r0
 362 03ac 0030A0E1 		mov	r4, r1
 363 03b0 0140A0E1 		mov	r5, r3
 364 03b4 FF05A0E3 		mov	r6, r4
 365 03b8 030680E2 		ldr	r3, .L16+40
 366 03bc 0010A0E3 		ldr	r3, [r3, #24]	@ float
 367 03c0 0320A0E1 		mov	r0, r3
 368 03c4 0430A0E1 		bl	__extendsfdf2
 369 03c8 FEFFFFEB 		mov	r3, r0
 370 03cc 0030A0E1 		mov	r4, r1
 371 03d0 0140A0E1 		mov	r0, r5
 372 03d4 0350A0E1 		mov	r1, r6
 373 03d8 0460A0E1 		mov	r2, r3
 374 03dc B4321FE5 		mov	r3, r4
 375 03e0 183093E5 		bl	__muldf3
 376 03e4 0300A0E1 		mov	r3, r0
 377 03e8 FEFFFFEB 		mov	r4, r1
 378 03ec 0030A0E1 		mov	r0, r7
 379 03f0 0140A0E1 		mov	r1, r8
 380 03f4 0500A0E1 		mov	r2, r3
 381 03f8 0610A0E1 		mov	r3, r4
 382 03fc 0320A0E1 		bl	__adddf3
 383 0400 0430A0E1 		mov	r3, r0
 384 0404 FEFFFFEB 		mov	r4, r1
 385 0408 0030A0E1 		mov	r0, r3
 386 040c 0140A0E1 		mov	r1, r4
 387 0410 0700A0E1 		bl	__truncdfsf2
 388 0414 0810A0E1 		mov	r2, r0
 389 0418 0320A0E1 		ldr	r3, .L16+40
 390 041c 0430A0E1 		str	r2, [r3, #24]	@ float
 391 0420 FEFFFFEB 		.loc 1 131 0
 392 0424 0030A0E1 		ldr	r3, .L16+32
 393 0428 0140A0E1 		ldr	r3, [r3, #0]	@ float
 394 042c 0300A0E1 		mov	r0, r3
 395 0430 0410A0E1 		ldr	r1, [fp, #-36]	@ float
 396 0434 FEFFFFEB 		bl	__mulsf3
 397 0438 0020A0E1 		mov	r3, r0
 398 043c 14331FE5 		mov	r0, r3
 399 0440 182083E5 		bl	__extendsfdf2
 131:lab.c         **** 			mocap.dVz = alpha*VelEstZ+(1.0-alpha)*mocap.dVz;
 400              	
 401 0444 24331FE5 		bl	__extendsfdf2
 402 0448 003093E5 		mov	r3, r0
 403 044c 0300A0E1 		mov	r4, r1
 404 0450 24101BE5 		mov	r0, #1069547520
 405 0454 FEFFFFEB 		add	r0, r0, #3145728
 406 0458 0030A0E1 		mov	r1, #0
 407 045c 0300A0E1 		mov	r2, r3
 408 0460 FEFFFFEB 		mov	r3, r4
 409 0464 0070A0E1 		bl	__subdf3
 410 0468 0180A0E1 		mov	r3, r0
 411 046c 24001BE5 		mov	r4, r1
 412 0470 FEFFFFEB 		mov	r5, r3
 413 0474 0030A0E1 		mov	r6, r4
 414 0478 0140A0E1 		ldr	r3, .L16+40
 415 047c FF05A0E3 		ldr	r3, [r3, #28]	@ float
 416 0480 030680E2 		mov	r0, r3
 417 0484 0010A0E3 		bl	__extendsfdf2
 418 0488 0320A0E1 		mov	r3, r0
 419 048c 0430A0E1 		mov	r4, r1
 420 0490 FEFFFFEB 		mov	r0, r5
 421 0494 0030A0E1 		mov	r1, r6
 422 0498 0140A0E1 		mov	r2, r3
 423 049c 0350A0E1 		mov	r3, r4
 424 04a0 0460A0E1 		bl	__muldf3
 425 04a4 7C331FE5 		mov	r3, r0
 426 04a8 1C3093E5 		mov	r4, r1
 427 04ac 0300A0E1 		mov	r0, r7
 428 04b0 FEFFFFEB 		mov	r1, r8
 429 04b4 0030A0E1 		mov	r2, r3
 430 04b8 0140A0E1 		mov	r3, r4
 431 04bc 0500A0E1 		bl	__adddf3
 432 04c0 0610A0E1 		mov	r3, r0
 433 04c4 0320A0E1 		mov	r4, r1
 434 04c8 0430A0E1 		mov	r0, r3
 435 04cc FEFFFFEB 		mov	r1, r4
 436 04d0 0030A0E1 		bl	__truncdfsf2
 437 04d4 0140A0E1 		mov	r2, r0
 438 04d8 0700A0E1 		ldr	r3, .L16+40
 439 04dc 0810A0E1 		str	r2, [r3, #28]	@ float
 440 04e0 0320A0E1 		.loc 1 134 0
 441 04e4 0430A0E1 		ldr	r3, .L16+36
 442 04e8 FEFFFFEB 		ldr	r2, [r3, #8]	@ float
 443 04ec 0030A0E1 		ldr	r3, .L16+40
 444 04f0 0140A0E1 		str	r2, [r3, #8]	@ float
 445 04f4 0300A0E1 		.loc 1 135 0
 446 04f8 0410A0E1 		ldr	r3, .L16+36
 447 04fc FEFFFFEB 		ldr	r2, [r3, #12]	@ float
 448 0500 0020A0E1 		ldr	r3, .L16+40
 449 0504 DC331FE5 		str	r2, [r3, #12]	@ float
 450 0508 1C2083E5 		.loc 1 136 0
 132:lab.c         **** 
 133:lab.c         **** 			// Set Position
 134:lab.c         **** 			mocap.dX = real_mocap.dX;
 451              	3, .L16+40
 452 050c E8331FE5 		str	r2, [r3, #16]	@ float
 453 0510 082093E5 	.L12:
 454 0514 EC331FE5 	.LBE2:
 455 0518 082083E5 		.loc 1 142 0
 135:lab.c         **** 			mocap.dY = real_mocap.dY;
 456              	r3, .L16+44
 457 051c F8331FE5 		ldr	r3, [r3, #0]
 458 0520 0C2093E5 		add	r2, r3, #1
 459 0524 FC331FE5 		ldr	r3, .L16+44
 460 0528 0C2083E5 		str	r2, [r3, #0]
 136:lab.c         **** 			mocap.dZ = real_mocap.dZ;
 461              	 1 143 0
 462 052c 08341FE5 		ldr	r3, .L16+44
 463 0530 102093E5 		ldr	r3, [r3, #0]
 464 0534 0C341FE5 		cmp	r3, #10
 465 0538 102083E5 		bne	.L15
 466              		.loc 1 145 0
 467              		ldr	r2, .L16+44
 137:lab.c         **** 			
 138:lab.c         **** 			/*--- End Low Pass Filtering ---*/
 139:lab.c         **** 		}
 140:lab.c         **** 		
 141:lab.c         **** 		// Handling to update velocity estimate at 100 Hz
 142:lab.c         **** 		velocityEstHolder++;
 468              	, #0
 469 053c 10341FE5 		str	r3, [r2, #0]
 470 0540 003093E5 	.L15:
 471 0544 012083E2 		.loc 1 148 0
 472 0548 1C341FE5 		sub	sp, fp, #32
 473 054c 002083E5 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, lr}
 143:lab.c         **** 		if (velocityEstHolder == 10)
 474              	
 475 0550 24341FE5 	.LFE3:
 477 0558 0A0053E3 		.global	__addsf3
 478 055c 0200001A 		.global	__gtsf2
 144:lab.c         **** 		{
 145:lab.c         **** 			velocityEstHolder = 0;
 479              	obal	__ltsf2
 480 0560 34241FE5 		.align	2
 481 0564 0030A0E3 		.global	lab3
 483              	lab3:
 146:lab.c         **** 		}
 147:lab.c         **** 	}
 148:lab.c         **** }
 484              	:
 485 056c 20D04BE2 		.loc 1 154 0
 486 0570 F0699DE8 		@ Function supports interworking.
 487 0574 1EFF2FE1 		@ args = 0, pretend = 0, frame = 68
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		mov	ip, sp
 490              	.LCFI7:
 491              		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 492              	.LCFI8:
 493              		sub	fp, ip, #4
 494              	.LCFI9:
 495              		sub	sp, sp, #68
 496              	.LCFI10:
 497              		.loc 1 157 0
 149:lab.c         **** /*-------- End Velocity Estimator --------*/
 150:lab.c         **** 
 151:lab.c         **** 
 152:lab.c         **** /*-------------- Controller --------------*/
 153:lab.c         **** /*-------------- Lab 3 --------------*/
 154:lab.c         **** void lab3() {
 498              	8
 499              		ldr	r3, [r3, #0]
 500              		cmp	r3, #1
 501              		bne	.L19
 502 0578 0DC0A0E1 		.loc 1 158 0
 503              		ldr	r3, .L43+12
 504 057c F0D92DE9 		ldr	r3, [r3, #0]
 505              		cmp	r3, #0
 506 0580 04B04CE2 		bne	.L21
 507              		.loc 1 159 0
 508 0584 44D04DE2 		ldr	r3, .L43+48
 509              		ldr	r2, [r3, #0]	@ float
 155:lab.c         **** 	
 156:lab.c         **** 	// Error Update (for integral control)	
 157:lab.c         **** 	if (takeoff2 == 1) {
 510              	3+52
 511 0588 54349FE5 		ldr	r3, [r3, #8]	@ float
 512 058c 003093E5 		mov	r0, r2
 513 0590 010053E3 		mov	r1, r3
 514 0594 8700001A 		bl	__subsf3
 158:lab.c         **** 		if (IntegralHolder == 0) {
 515              	r3, r0
 516 0598 48349FE5 		mov	r0, r3
 517 059c 003093E5 		bl	__extendsfdf2
 518 05a0 000053E3 		mov	r3, r0
 519 05a4 7700001A 		mov	r4, r1
 159:lab.c         **** 			errorcum[0] = (x_nom[0]-mocap.dX)*0.02 + errorcum[0];
 520              	r0, r3
 521 05a8 5C349FE5 		mov	r1, r4
 522 05ac 002093E5 		adr	r2, .L43
 523 05b0 58349FE5 		ldmia	r2, {r2-r3}
 524 05b4 083093E5 		bl	__muldf3
 525 05b8 0200A0E1 		mov	r3, r0
 526 05bc 0310A0E1 		mov	r4, r1
 527 05c0 FEFFFFEB 		mov	r5, r3
 528 05c4 0030A0E1 		mov	r6, r4
 529 05c8 0300A0E1 		ldr	r3, .L43+112
 530 05cc FEFFFFEB 		ldr	r3, [r3, #0]	@ float
 531 05d0 0030A0E1 		mov	r0, r3
 532 05d4 0140A0E1 		bl	__extendsfdf2
 533 05d8 0300A0E1 		mov	r3, r0
 534 05dc 0410A0E1 		mov	r4, r1
 535 05e0 FD2F8FE2 		mov	r0, r5
 536 05e4 0C0092E8 		mov	r1, r6
 537 05e8 FEFFFFEB 		mov	r2, r3
 538 05ec 0030A0E1 		mov	r3, r4
 539 05f0 0140A0E1 		bl	__adddf3
 540 05f4 0350A0E1 		mov	r3, r0
 541 05f8 0460A0E1 		mov	r4, r1
 542 05fc 48349FE5 		mov	r0, r3
 543 0600 003093E5 		mov	r1, r4
 544 0604 0300A0E1 		bl	__truncdfsf2
 545 0608 FEFFFFEB 		mov	r2, r0
 546 060c 0030A0E1 		ldr	r3, .L43+112
 547 0610 0140A0E1 		str	r2, [r3, #0]	@ float
 548 0614 0500A0E1 		.loc 1 160 0
 549 0618 0610A0E1 		ldr	r3, .L43+48
 550 061c 0320A0E1 		ldr	r2, [r3, #4]	@ float
 551 0620 0430A0E1 		ldr	r3, .L43+52
 552 0624 FEFFFFEB 		ldr	r3, [r3, #12]	@ float
 553 0628 0030A0E1 		mov	r0, r2
 554 062c 0140A0E1 		mov	r1, r3
 555 0630 0300A0E1 		bl	__subsf3
 556 0634 0410A0E1 		mov	r3, r0
 557 0638 FEFFFFEB 		mov	r0, r3
 558 063c 0020A0E1 		bl	__extendsfdf2
 559 0640 04349FE5 		mov	r3, r0
 560 0644 002083E5 		mov	r4, r1
 160:lab.c         **** 			errorcum[1] = (x_nom[1]-mocap.dY)*0.02 + errorcum[1];
 561              	mia	r2, {r2-r3}
 562 0648 BC339FE5 		bl	__muldf3
 563 064c 042093E5 		mov	r3, r0
 564 0650 B8339FE5 		mov	r4, r1
 565 0654 0C3093E5 		mov	r5, r3
 566 0658 0200A0E1 		mov	r6, r4
 567 065c 0310A0E1 		ldr	r3, .L43+112
 568 0660 FEFFFFEB 		ldr	r3, [r3, #4]	@ float
 569 0664 0030A0E1 		mov	r0, r3
 570 0668 0300A0E1 		bl	__extendsfdf2
 571 066c FEFFFFEB 		mov	r3, r0
 572 0670 0030A0E1 		mov	r4, r1
 573 0674 0140A0E1 		mov	r0, r5
 574 0678 0300A0E1 		mov	r1, r6
 575 067c 0410A0E1 		mov	r2, r3
 576 0680 D52F8FE2 		mov	r3, r4
 577 0684 0C0092E8 		bl	__adddf3
 578 0688 FEFFFFEB 		mov	r3, r0
 579 068c 0030A0E1 		mov	r4, r1
 580 0690 0140A0E1 		mov	r0, r3
 581 0694 0350A0E1 		mov	r1, r4
 582 0698 0460A0E1 		bl	__truncdfsf2
 583 069c A8339FE5 		mov	r2, r0
 584 06a0 043093E5 		ldr	r3, .L43+112
 585 06a4 0300A0E1 		str	r2, [r3, #4]	@ float
 586 06a8 FEFFFFEB 		.loc 1 161 0
 587 06ac 0030A0E1 		ldr	r3, .L43+48
 588 06b0 0140A0E1 		ldr	r2, [r3, #8]	@ float
 589 06b4 0500A0E1 		ldr	r3, .L43+52
 590 06b8 0610A0E1 		ldr	r3, [r3, #16]	@ float
 591 06bc 0320A0E1 		mov	r0, r2
 592 06c0 0430A0E1 		mov	r1, r3
 593 06c4 FEFFFFEB 		bl	__subsf3
 594 06c8 0030A0E1 		mov	r3, r0
 595 06cc 0140A0E1 		mov	r0, r3
 596 06d0 0300A0E1 		bl	__extendsfdf2
 597 06d4 0410A0E1 		mov	r3, r0
 598 06d8 FEFFFFEB 		mov	r4, r1
 599 06dc 0020A0E1 		mov	r0, r3
 600 06e0 64339FE5 		mov	r1, r4
 601 06e4 042083E5 		adr	r2, .L43
 161:lab.c         **** 			errorcum[2] = (x_nom[2]-mocap.dZ)*0.02 + errorcum[2];
 602              	r0
 603 06e8 1C339FE5 		mov	r4, r1
 604 06ec 082093E5 		mov	r5, r3
 605 06f0 18339FE5 		mov	r6, r4
 606 06f4 103093E5 		ldr	r3, .L43+112
 607 06f8 0200A0E1 		ldr	r3, [r3, #8]	@ float
 608 06fc 0310A0E1 		mov	r0, r3
 609 0700 FEFFFFEB 		bl	__extendsfdf2
 610 0704 0030A0E1 		mov	r3, r0
 611 0708 0300A0E1 		mov	r4, r1
 612 070c FEFFFFEB 		mov	r0, r5
 613 0710 0030A0E1 		mov	r1, r6
 614 0714 0140A0E1 		mov	r2, r3
 615 0718 0300A0E1 		mov	r3, r4
 616 071c 0410A0E1 		bl	__adddf3
 617 0720 AD2F8FE2 		mov	r3, r0
 618 0724 0C0092E8 		mov	r4, r1
 619 0728 FEFFFFEB 		mov	r0, r3
 620 072c 0030A0E1 		mov	r1, r4
 621 0730 0140A0E1 		bl	__truncdfsf2
 622 0734 0350A0E1 		mov	r2, r0
 623 0738 0460A0E1 		ldr	r3, .L43+112
 624 073c 08339FE5 		str	r2, [r3, #8]	@ float
 625 0740 083093E5 	.L21:
 626 0744 0300A0E1 		.loc 1 164 0
 627 0748 FEFFFFEB 		ldr	r3, .L43+12
 628 074c 0030A0E1 		ldr	r3, [r3, #0]
 629 0750 0140A0E1 		add	r2, r3, #1
 630 0754 0500A0E1 		ldr	r3, .L43+12
 631 0758 0610A0E1 		str	r2, [r3, #0]
 632 075c 0320A0E1 		.loc 1 165 0
 633 0760 0430A0E1 		ldr	r3, .L43+12
 634 0764 FEFFFFEB 		ldr	r3, [r3, #0]
 635 0768 0030A0E1 		cmp	r3, #10
 636 076c 0140A0E1 		bne	.L19
 637 0770 0300A0E1 		.loc 1 166 0
 638 0774 0410A0E1 		ldr	r2, .L43+12
 639 0778 FEFFFFEB 		mov	r3, #0
 640 077c 0020A0E1 		str	r3, [r2, #0]
 641 0780 C4329FE5 	.L19:
 642 0784 082083E5 		.loc 1 174 0
 643              		ldr	r3, .L43+16	@ float
 162:lab.c         **** 		}
 163:lab.c         **** 
 164:lab.c         **** 		IntegralHolder++;
 644              	
 645 0788 58329FE5 		ldr	r3, .L43+20	@ float
 646 078c 003093E5 		str	r3, [fp, #-96]	@ float
 647 0790 012083E2 		.loc 1 176 0
 648 0794 4C329FE5 		ldr	r3, .L43+24	@ float
 649 0798 002083E5 		str	r3, [fp, #-92]	@ float
 165:lab.c         **** 		if (IntegralHolder == 10) {
 650              	 1 177 0
 651 079c 44329FE5 		ldr	r3, .L43+28	@ float
 652 07a0 003093E5 		str	r3, [fp, #-88]	@ float
 653 07a4 0A0053E3 		.loc 1 178 0
 654 07a8 0200001A 		ldr	r3, .L43+32	@ float
 166:lab.c         **** 			IntegralHolder = 0;
 655              	r3, [fp, #-84]	@ float
 656 07ac 34229FE5 		.loc 1 179 0
 657 07b0 0030A0E3 		ldr	r3, .L43+24	@ float
 658 07b4 003082E5 		str	r3, [fp, #-80]	@ float
 659              		.loc 1 180 0
 167:lab.c         **** 		}
 168:lab.c         **** 	}
 169:lab.c         **** 
 170:lab.c         **** 
 171:lab.c         **** 	// OUTER LOOP
 172:lab.c         **** 		// Hummingbird
 173:lab.c         **** 	
 174:lab.c         **** 	float Kp_x = -0.1952;
 660              	r3, .L43+36	@ float
 661 07b8 2C329FE5 		str	r3, [fp, #-76]	@ float
 662 07bc 64300BE5 		.loc 1 181 0
 175:lab.c         **** 	float Kd_x = -0.2446;
 663              	r	r3, .L43+40	@ float
 664 07c0 28329FE5 		str	r3, [fp, #-72]	@ float
 665 07c4 60300BE5 		.loc 1 182 0
 176:lab.c         **** 	float Ki_x = 0.0;
 666              	r	r3, .L43+24	@ float
 667 07c8 24329FE5 		str	r3, [fp, #-68]	@ float
 668 07cc 5C300BE5 		.loc 1 187 0
 177:lab.c         **** 	float Kp_y = 0.1952;
 669              	r	r3, .L43+48
 670 07d0 20329FE5 		ldr	r2, [r3, #0]	@ float
 671 07d4 58300BE5 		ldr	r3, .L43+52
 178:lab.c         **** 	float Kd_y = 0.2446;
 672              	r	r3, [r3, #8]	@ float
 673 07d8 1C329FE5 		mov	r0, r2
 674 07dc 54300BE5 		mov	r1, r3
 179:lab.c         **** 	float Ki_y = 0.0;
 675              		__subsf3
 676 07e0 0C329FE5 		mov	r3, r0
 677 07e4 50300BE5 		mov	r0, r3
 180:lab.c         **** 	float Kp_z = -4.3112;
 678              	r	r1, [fp, #-100]	@ float
 679 07e8 10329FE5 		bl	__mulsf3
 680 07ec 4C300BE5 		mov	r3, r0
 181:lab.c         **** 	float Kd_z = -2.4473;
 681              	v	r4, r3
 682 07f0 0C329FE5 		ldr	r3, .L43+52
 683 07f4 48300BE5 		ldr	r3, [r3, #20]	@ float
 182:lab.c         **** 	float Ki_z = 0.0;
 684              	v	r0, r3
 685 07f8 F4319FE5 		ldr	r1, [fp, #-96]	@ float
 686 07fc 44300BE5 		bl	__mulsf3
 183:lab.c         **** 
 184:lab.c         **** 	// Outer Loop PD
 185:lab.c         **** 	float a_x;
 186:lab.c         **** 	float a_y;
 187:lab.c         **** 	a_x = Kp_x*(x_nom[0]-mocap.dX)-Kd_x*mocap.dVx+Ki_x*errorcum[0];
 687              	v	r3, r0
 688 0800 04329FE5 		mov	r0, r4
 689 0804 002093E5 		mov	r1, r3
 690 0808 00329FE5 		bl	__subsf3
 691 080c 083093E5 		mov	r3, r0
 692 0810 0200A0E1 		mov	r4, r3
 693 0814 0310A0E1 		ldr	r3, .L43+112
 694 0818 FEFFFFEB 		ldr	r3, [r3, #0]	@ float
 695 081c 0030A0E1 		mov	r0, r3
 696 0820 0300A0E1 		ldr	r1, [fp, #-92]	@ float
 697 0824 64101BE5 		bl	__mulsf3
 698 0828 FEFFFFEB 		mov	r3, r0
 699 082c 0030A0E1 		mov	r0, r4
 700 0830 0340A0E1 		mov	r1, r3
 701 0834 D4319FE5 		bl	__addsf3
 702 0838 143093E5 		mov	r3, r0
 703 083c 0300A0E1 		str	r3, [fp, #-64]	@ float
 704 0840 60101BE5 		.loc 1 188 0
 705 0844 FEFFFFEB 		ldr	r3, .L43+48
 706 0848 0030A0E1 		ldr	r2, [r3, #4]	@ float
 707 084c 0400A0E1 		ldr	r3, .L43+52
 708 0850 0310A0E1 		ldr	r3, [r3, #12]	@ float
 709 0854 FEFFFFEB 		mov	r0, r2
 710 0858 0030A0E1 		mov	r1, r3
 711 085c 0340A0E1 		bl	__subsf3
 712 0860 E4319FE5 		mov	r3, r0
 713 0864 003093E5 		mov	r0, r3
 714 0868 0300A0E1 		ldr	r1, [fp, #-88]	@ float
 715 086c 5C101BE5 		bl	__mulsf3
 716 0870 FEFFFFEB 		mov	r3, r0
 717 0874 0030A0E1 		mov	r4, r3
 718 0878 0400A0E1 		ldr	r3, .L43+52
 719 087c 0310A0E1 		ldr	r3, [r3, #24]	@ float
 720 0880 FEFFFFEB 		mov	r0, r3
 721 0884 0030A0E1 		ldr	r1, [fp, #-84]	@ float
 722 0888 40300BE5 		bl	__mulsf3
 188:lab.c         **** 	a_y = Kp_y*(x_nom[1]-mocap.dY)-Kd_y*mocap.dVy+Ki_y*errorcum[1];
 723              		bl	__subsf3
 724 088c 78319FE5 		mov	r3, r0
 725 0890 042093E5 		mov	r4, r3
 726 0894 74319FE5 		ldr	r3, .L43+112
 727 0898 0C3093E5 		ldr	r3, [r3, #4]	@ float
 728 089c 0200A0E1 		mov	r0, r3
 729 08a0 0310A0E1 		ldr	r1, [fp, #-80]	@ float
 730 08a4 FEFFFFEB 		bl	__mulsf3
 731 08a8 0030A0E1 		mov	r3, r0
 732 08ac 0300A0E1 		mov	r0, r4
 733 08b0 58101BE5 		mov	r1, r3
 734 08b4 FEFFFFEB 		bl	__addsf3
 735 08b8 0030A0E1 		mov	r3, r0
 736 08bc 0340A0E1 		str	r3, [fp, #-60]	@ float
 737 08c0 48319FE5 		.loc 1 189 0
 738 08c4 183093E5 		ldr	r0, [fp, #-64]	@ float
 739 08c8 0300A0E1 		bl	__extendsfdf2
 740 08cc 54101BE5 		mov	r5, r0
 741 08d0 FEFFFFEB 		mov	r6, r1
 742 08d4 0030A0E1 		ldr	r3, .L43+44
 743 08d8 0400A0E1 		ldr	r3, [r3, #28]	@ float
 744 08dc 0310A0E1 		mov	r0, r3
 745 08e0 FEFFFFEB 		bl	__extendsfdf2
 746 08e4 0030A0E1 		mov	r3, r0
 747 08e8 0340A0E1 		mov	r4, r1
 748 08ec 58319FE5 		mov	r0, r3
 749 08f0 043093E5 		mov	r1, r4
 750 08f4 0300A0E1 		bl	cos
 751 08f8 50101BE5 		mov	r3, r0
 752 08fc FEFFFFEB 		mov	r4, r1
 753 0900 0030A0E1 		mov	r0, r5
 754 0904 0400A0E1 		mov	r1, r6
 755 0908 0310A0E1 		mov	r2, r3
 756 090c FEFFFFEB 		mov	r3, r4
 757 0910 0030A0E1 		bl	__muldf3
 758 0914 3C300BE5 		mov	r3, r0
 189:lab.c         **** 	pitch_desired = a_x*cos(real_mocap.dThetaz)-a_y*sin(real_mocap.dThetaz);
 759              		ldr	r0, [fp, #-60]	@ float
 760 0918 40001BE5 		bl	__extendsfdf2
 761 091c FEFFFFEB 		mov	r5, r0
 762 0920 0050A0E1 		mov	r6, r1
 763 0924 0160A0E1 		ldr	r3, .L43+44
 764 0928 D8309FE5 		ldr	r3, [r3, #28]	@ float
 765 092c 1C3093E5 		mov	r0, r3
 766 0930 0300A0E1 		bl	__extendsfdf2
 767 0934 FEFFFFEB 		mov	r3, r0
 768 0938 0030A0E1 		mov	r4, r1
 769 093c 0140A0E1 		mov	r0, r3
 770 0940 0300A0E1 		mov	r1, r4
 771 0944 0410A0E1 		bl	sin
 772 0948 FEFFFFEB 		mov	r3, r0
 773 094c 0030A0E1 		mov	r4, r1
 774 0950 0140A0E1 		mov	r0, r5
 775 0954 0500A0E1 		mov	r1, r6
 776 0958 0610A0E1 		mov	r2, r3
 777 095c 0320A0E1 		mov	r3, r4
 778 0960 0430A0E1 		bl	__muldf3
 779 0964 FEFFFFEB 		mov	r3, r0
 780 0968 0030A0E1 		mov	r4, r1
 781 096c 0140A0E1 		mov	r0, r7
 782 0970 0370A0E1 		mov	r1, r8
 783 0974 0480A0E1 		b	.L44
 784 0978 3C001BE5 	.L45:
 785 097c FEFFFFEB 		.align	2
 786 0980 0050A0E1 	.L43:
 787 0984 0160A0E1 		.word	1066695393
 788 0988 78309FE5 		.word	1202590843
 789 098c 1C3093E5 		.word	takeoff2
 790 0990 0300A0E1 		.word	IntegralHolder
 791 0994 FEFFFFEB 		.word	-1102585214
 792 0998 0030A0E1 		.word	-1099270036
 793 099c 0140A0E1 		.word	0
 794 09a0 0300A0E1 		.word	1044898434
 795 09a4 0410A0E1 		.word	1048213612
 796 09a8 FEFFFFEB 		.word	-1064700582
 797 09ac 0030A0E1 		.word	-1071865712
 798 09b0 0140A0E1 		.word	real_mocap
 799 09b4 0500A0E1 		.word	x_nom
 800 09b8 0610A0E1 		.word	mocap
 801 09bc 0320A0E1 		.word	mass
 802 09c0 0430A0E1 		.word	1065353216
 803 09c4 FEFFFFEB 		.word	1050253722
 804 09c8 0030A0E1 		.word	1034147594
 805 09cc 0140A0E1 		.word	1025758986
 806 09d0 0700A0E1 		.word	roll_desired
 807 09d4 0810A0E1 		.word	pitch_desired
 808 09d8 1F0000EA 		.word	yaw_desired
 809              		.word	imusensor
 810              		.word	cnt_u
 811              		.word	u
 812 09dc E17A943F 		.word	1063256064
 813 09e0 7B14AE47 		.word	-1084227584
 814 09e4 00000000 		.word	1075838976
 815 09e8 00000000 		.word	errorcum
 816 09ec 82E247BE 		.word	-1071644672
 817 09f0 6C787ABE 		.word	1076076216
 818 09f4 00000000 		.word	1374389535
 819 09f8 82E2473E 	.L44:
 820 09fc 6C787A3E 		mov	r2, r3
 821 0a00 5AF589C0 		mov	r3, r4
 822 0a04 90A01CC0 		bl	__subdf3
 823 0a08 00000000 		mov	r3, r0
 824 0a0c 00000000 		mov	r4, r1
 825 0a10 00000000 		mov	r0, r3
 826 0a14 00000000 		mov	r1, r4
 827 0a18 0000803F 		bl	__truncdfsf2
 828 0a1c 9A99993E 		mov	r2, r0
 829 0a20 0AD7A33D 		ldr	r3, .L43+80
 830 0a24 0AD7233D 		str	r2, [r3, #0]	@ float
 831 0a28 00000000 		.loc 1 190 0
 832 0a2c 00000000 		ldr	r0, [fp, #-64]	@ float
 833 0a30 00000000 		bl	__extendsfdf2
 834 0a34 00000000 		mov	r5, r0
 835 0a38 00000000 		mov	r6, r1
 836 0a3c 00000000 		ldr	r3, .L43+44
 837 0a40 0000603F 		ldr	r3, [r3, #28]	@ float
 838 0a44 000060BF 		mov	r0, r3
 839 0a48 00002040 		bl	__extendsfdf2
 840 0a4c 00000000 		mov	r3, r0
 841 0a50 000020C0 		mov	r4, r1
 842 0a54 B89E2340 		mov	r0, r3
 843 0a58 1F85EB51 		mov	r1, r4
 844              		bl	sin
 845 0a5c 0320A0E1 		mov	r3, r0
 846 0a60 0430A0E1 		mov	r4, r1
 847 0a64 FEFFFFEB 		mov	r0, r5
 848 0a68 0030A0E1 		mov	r1, r6
 849 0a6c 0140A0E1 		mov	r2, r3
 850 0a70 0300A0E1 		mov	r3, r4
 851 0a74 0410A0E1 		bl	__muldf3
 852 0a78 FEFFFFEB 		mov	r3, r0
 853 0a7c 0020A0E1 		mov	r4, r1
 854 0a80 5C301FE5 		mov	r7, r3
 855 0a84 002083E5 		mov	r8, r4
 190:lab.c         **** 	roll_desired = a_x*sin(real_mocap.dThetaz)+a_y*cos(real_mocap.dThetaz);
 856              	r3, #28]	@ float
 857 0a88 40001BE5 		mov	r0, r3
 858 0a8c FEFFFFEB 		bl	__extendsfdf2
 859 0a90 0050A0E1 		mov	r3, r0
 860 0a94 0160A0E1 		mov	r4, r1
 861 0a98 98301FE5 		mov	r0, r3
 862 0a9c 1C3093E5 		mov	r1, r4
 863 0aa0 0300A0E1 		bl	cos
 864 0aa4 FEFFFFEB 		mov	r3, r0
 865 0aa8 0030A0E1 		mov	r4, r1
 866 0aac 0140A0E1 		mov	r0, r5
 867 0ab0 0300A0E1 		mov	r1, r6
 868 0ab4 0410A0E1 		mov	r2, r3
 869 0ab8 FEFFFFEB 		mov	r3, r4
 870 0abc 0030A0E1 		bl	__muldf3
 871 0ac0 0140A0E1 		mov	r3, r0
 872 0ac4 0500A0E1 		mov	r4, r1
 873 0ac8 0610A0E1 		mov	r0, r7
 874 0acc 0320A0E1 		mov	r1, r8
 875 0ad0 0430A0E1 		mov	r2, r3
 876 0ad4 FEFFFFEB 		mov	r3, r4
 877 0ad8 0030A0E1 		bl	__adddf3
 878 0adc 0140A0E1 		mov	r3, r0
 879 0ae0 0370A0E1 		mov	r4, r1
 880 0ae4 0480A0E1 		mov	r0, r3
 881 0ae8 3C001BE5 		mov	r1, r4
 882 0aec FEFFFFEB 		bl	__truncdfsf2
 883 0af0 0050A0E1 		mov	r2, r0
 884 0af4 0160A0E1 		ldr	r3, .L43+76
 885 0af8 F8301FE5 		str	r2, [r3, #0]	@ float
 886 0afc 1C3093E5 		.loc 1 191 0
 887 0b00 0300A0E1 		ldr	r3, .L43+48
 888 0b04 FEFFFFEB 		ldr	r2, [r3, #12]	@ float
 889 0b08 0030A0E1 		ldr	r3, .L43+84
 890 0b0c 0140A0E1 		str	r2, [r3, #0]	@ float
 891 0b10 0300A0E1 		.loc 1 192 0
 892 0b14 0410A0E1 		ldr	r3, .L43+48
 893 0b18 FEFFFFEB 		ldr	r2, [r3, #8]	@ float
 894 0b1c 0030A0E1 		ldr	r3, .L43+52
 895 0b20 0140A0E1 		ldr	r3, [r3, #16]	@ float
 896 0b24 0500A0E1 		mov	r0, r2
 897 0b28 0610A0E1 		mov	r1, r3
 898 0b2c 0320A0E1 		bl	__subsf3
 899 0b30 0430A0E1 		mov	r3, r0
 900 0b34 FEFFFFEB 		mov	r0, r3
 901 0b38 0030A0E1 		ldr	r1, [fp, #-76]	@ float
 902 0b3c 0140A0E1 		bl	__mulsf3
 903 0b40 0700A0E1 		mov	r3, r0
 904 0b44 0810A0E1 		mov	r4, r3
 905 0b48 0320A0E1 		ldr	r3, .L43+52
 906 0b4c 0430A0E1 		ldr	r3, [r3, #28]	@ float
 907 0b50 FEFFFFEB 		mov	r0, r3
 908 0b54 0030A0E1 		ldr	r1, [fp, #-72]	@ float
 909 0b58 0140A0E1 		bl	__mulsf3
 910 0b5c 0300A0E1 		mov	r3, r0
 911 0b60 0410A0E1 		mov	r0, r4
 912 0b64 FEFFFFEB 		mov	r1, r3
 913 0b68 0020A0E1 		bl	__subsf3
 914 0b6c 4C311FE5 		mov	r3, r0
 915 0b70 002083E5 		mov	r0, r3
 191:lab.c         **** 	yaw_desired = x_nom[3];
 916              	ldr	r3, [r3, #0]	@ float
 917 0b74 70311FE5 		mov	r0, r3
 918 0b78 0C2093E5 		bl	__extendsfdf2
 919 0b7c 54311FE5 		mov	r3, r0
 920 0b80 002083E5 		mov	r4, r1
 192:lab.c         **** 	cnt_u[3] = Kp_z*(x_nom[2]-mocap.dZ)-Kd_z*mocap.dVz+mass*9.81+Ki_z*errorcum[2];
 921              	r0, r3
 922 0b84 80311FE5 		mov	r1, r4
 923 0b88 082093E5 		adr	r2, .L43+120
 924 0b8c 84311FE5 		ldmia	r2, {r2-r3}
 925 0b90 103093E5 		bl	__muldf3
 926 0b94 0200A0E1 		mov	r3, r0
 927 0b98 0310A0E1 		mov	r4, r1
 928 0b9c FEFFFFEB 		mov	r0, r5
 929 0ba0 0030A0E1 		mov	r1, r6
 930 0ba4 0300A0E1 		mov	r2, r3
 931 0ba8 4C101BE5 		mov	r3, r4
 932 0bac FEFFFFEB 		bl	__adddf3
 933 0bb0 0030A0E1 		mov	r3, r0
 934 0bb4 0340A0E1 		mov	r4, r1
 935 0bb8 B0311FE5 		mov	r5, r3
 936 0bbc 1C3093E5 		mov	r6, r4
 937 0bc0 0300A0E1 		ldr	r3, .L43+112
 938 0bc4 48101BE5 		ldr	r3, [r3, #8]	@ float
 939 0bc8 FEFFFFEB 		mov	r0, r3
 940 0bcc 0030A0E1 		ldr	r1, [fp, #-68]	@ float
 941 0bd0 0400A0E1 		bl	__mulsf3
 942 0bd4 0310A0E1 		mov	r3, r0
 943 0bd8 FEFFFFEB 		mov	r0, r3
 944 0bdc 0030A0E1 		bl	__extendsfdf2
 945 0be0 0300A0E1 		mov	r3, r0
 946 0be4 FEFFFFEB 		mov	r4, r1
 947 0be8 0050A0E1 		mov	r0, r5
 948 0bec 0160A0E1 		mov	r1, r6
 949 0bf0 E4311FE5 		mov	r2, r3
 950 0bf4 003093E5 		mov	r3, r4
 951 0bf8 0300A0E1 		bl	__adddf3
 952 0bfc FEFFFFEB 		mov	r3, r0
 953 0c00 0030A0E1 		mov	r4, r1
 954 0c04 0140A0E1 		mov	r0, r3
 955 0c08 0300A0E1 		mov	r1, r4
 956 0c0c 0410A0E1 		bl	__truncdfsf2
 957 0c10 712F4FE2 		mov	r2, r0
 958 0c14 0C0092E8 		ldr	r3, .L43+92
 959 0c18 FEFFFFEB 		str	r2, [r3, #12]	@ float
 960 0c1c 0030A0E1 		.loc 1 196 0
 961 0c20 0140A0E1 		ldr	r3, .L43+60	@ float
 962 0c24 0500A0E1 		str	r3, [fp, #-56]	@ float
 963 0c28 0610A0E1 		.loc 1 197 0
 964 0c2c 0320A0E1 		ldr	r3, .L43+64	@ float
 965 0c30 0430A0E1 		str	r3, [fp, #-52]	@ float
 966 0c34 FEFFFFEB 		.loc 1 198 0
 967 0c38 0030A0E1 		ldr	r3, .L43+60	@ float
 968 0c3c 0140A0E1 		str	r3, [fp, #-48]	@ float
 969 0c40 0350A0E1 		.loc 1 199 0
 970 0c44 0460A0E1 		ldr	r3, .L43+64	@ float
 971 0c48 04321FE5 		str	r3, [fp, #-44]	@ float
 972 0c4c 083093E5 		.loc 1 200 0
 973 0c50 0300A0E1 		ldr	r3, .L43+68	@ float
 974 0c54 44101BE5 		str	r3, [fp, #-40]	@ float
 975 0c58 FEFFFFEB 		.loc 1 201 0
 976 0c5c 0030A0E1 		ldr	r3, .L43+72	@ float
 977 0c60 0300A0E1 		str	r3, [fp, #-36]	@ float
 978 0c64 FEFFFFEB 		.loc 1 206 0
 979 0c68 0030A0E1 		ldr	r3, .L43+76
 980 0c6c 0140A0E1 		ldr	r2, [r3, #0]	@ float
 981 0c70 0500A0E1 		ldr	r3, .L43+88
 982 0c74 0610A0E1 		ldr	r3, [r3, #4]	@ float
 983 0c78 0320A0E1 		mov	r0, r2
 984 0c7c 0430A0E1 		mov	r1, r3
 985 0c80 FEFFFFEB 		bl	__subsf3
 986 0c84 0030A0E1 		mov	r3, r0
 987 0c88 0140A0E1 		mov	r0, r3
 988 0c8c 0300A0E1 		ldr	r1, [fp, #-56]	@ float
 989 0c90 0410A0E1 		bl	__mulsf3
 990 0c94 FEFFFFEB 		mov	r3, r0
 991 0c98 0020A0E1 		mov	r4, r3
 992 0c9c 6C321FE5 		ldr	r3, .L43+88
 993 0ca0 0C2083E5 		ldr	r3, [r3, #28]	@ float
 193:lab.c         **** 
 194:lab.c         **** 	// INNER LOOP
 195:lab.c         **** 		// Hummingbird
 196:lab.c         **** 	float Ktx_P = 1.0;
 994              	 r4
 995 0ca4 94321FE5 		mov	r1, r3
 996 0ca8 38300BE5 		bl	__subsf3
 197:lab.c         **** 	float Ktx_D = 0.3;
 997              	v	r3, r0
 998 0cac 98321FE5 		mov	r2, r3
 999 0cb0 34300BE5 		ldr	r3, .L43+92
 198:lab.c         **** 	float Kty_P = 1.0;	
 1000              	r	r2, [r3, #0]	@ float
 1001 0cb4 A4321FE5 		.loc 1 207 0
 1002 0cb8 30300BE5 		ldr	r3, .L43+80
 199:lab.c         **** 	float Kty_D = 0.3;	
 1003              	r	r2, [r3, #0]	@ float
 1004 0cbc A8321FE5 		ldr	r3, .L43+88
 1005 0cc0 2C300BE5 		ldr	r3, [r3, #8]	@ float
 200:lab.c         **** 	float Ktz_P = 0.08;	
 1006              	v	r0, r2
 1007 0cc4 AC321FE5 		mov	r1, r3
 1008 0cc8 28300BE5 		bl	__subsf3
 201:lab.c         **** 	float Ktz_D = 0.04;
 1009              	v	r3, r0
 1010 0ccc B0321FE5 		mov	r0, r3
 1011 0cd0 24300BE5 		ldr	r1, [fp, #-48]	@ float
 202:lab.c         **** 		
 203:lab.c         **** 
 204:lab.c         **** 
 205:lab.c         **** 	// Inner Loop PD
 206:lab.c         **** 	cnt_u[0] = Ktx_P*(roll_desired-imusensor.dThetax)-Ktx_D*(imusensor.dOmegax);
 1012              		__mulsf3
 1013 0cd4 B4321FE5 		mov	r3, r0
 1014 0cd8 002093E5 		mov	r4, r3
 1015 0cdc B0321FE5 		ldr	r3, .L43+88
 1016 0ce0 043093E5 		ldr	r3, [r3, #32]	@ float
 1017 0ce4 0200A0E1 		mov	r0, r3
 1018 0ce8 0310A0E1 		ldr	r1, [fp, #-44]	@ float
 1019 0cec FEFFFFEB 		bl	__mulsf3
 1020 0cf0 0030A0E1 		mov	r3, r0
 1021 0cf4 0300A0E1 		mov	r0, r4
 1022 0cf8 38101BE5 		mov	r1, r3
 1023 0cfc FEFFFFEB 		bl	__subsf3
 1024 0d00 0030A0E1 		mov	r3, r0
 1025 0d04 0340A0E1 		mov	r2, r3
 1026 0d08 DC321FE5 		ldr	r3, .L43+92
 1027 0d0c 1C3093E5 		str	r2, [r3, #4]	@ float
 1028 0d10 0300A0E1 		.loc 1 209 0
 1029 0d14 34101BE5 		ldr	r3, .L43+84
 1030 0d18 FEFFFFEB 		ldr	r2, [r3, #0]	@ float
 1031 0d1c 0030A0E1 		ldr	r3, .L43+88
 1032 0d20 0400A0E1 		ldr	r3, [r3, #12]	@ float
 1033 0d24 0310A0E1 		mov	r0, r2
 1034 0d28 FEFFFFEB 		mov	r1, r3
 1035 0d2c 0030A0E1 		bl	__subsf3
 1036 0d30 0320A0E1 		mov	r3, r0
 1037 0d34 04331FE5 		mov	r0, r3
 1038 0d38 002083E5 		ldr	r1, [fp, #-40]	@ float
 207:lab.c         **** 	cnt_u[1] = Kty_P*(pitch_desired-imusensor.dThetay)-Kty_D*(imusensor.dOmegay);
 1039              	ov	r4, r3
 1040 0d3c 18331FE5 		ldr	r3, .L43+88
 1041 0d40 002093E5 		ldr	r3, [r3, #36]	@ float
 1042 0d44 18331FE5 		mov	r0, r3
 1043 0d48 083093E5 		ldr	r1, [fp, #-36]	@ float
 1044 0d4c 0200A0E1 		bl	__mulsf3
 1045 0d50 0310A0E1 		mov	r3, r0
 1046 0d54 FEFFFFEB 		mov	r0, r4
 1047 0d58 0030A0E1 		mov	r1, r3
 1048 0d5c 0300A0E1 		bl	__subsf3
 1049 0d60 30101BE5 		mov	r3, r0
 1050 0d64 FEFFFFEB 		mov	r2, r3
 1051 0d68 0030A0E1 		ldr	r3, .L43+92
 1052 0d6c 0340A0E1 		str	r2, [r3, #8]	@ float
 1053 0d70 44331FE5 		.loc 1 212 0
 1054 0d74 203093E5 		ldr	r3, .L43+92
 1055 0d78 0300A0E1 		ldr	r2, [r3, #0]	@ float
 1056 0d7c 2C101BE5 		ldr	r3, .L43+96
 1057 0d80 FEFFFFEB 		str	r2, [r3, #0]	@ float
 1058 0d84 0030A0E1 		.loc 1 213 0
 1059 0d88 0400A0E1 		ldr	r3, .L43+92
 1060 0d8c 0310A0E1 		ldr	r2, [r3, #4]	@ float
 1061 0d90 FEFFFFEB 		ldr	r3, .L43+96
 1062 0d94 0030A0E1 		str	r2, [r3, #4]	@ float
 1063 0d98 0320A0E1 		.loc 1 214 0
 1064 0d9c 6C331FE5 		ldr	r3, .L43+92
 1065 0da0 042083E5 		ldr	r2, [r3, #8]	@ float
 208:lab.c         **** 		// Yaw Control with out Compass/MoCap correction
 209:lab.c         **** 	cnt_u[2] = Ktz_P*(yaw_desired-imusensor.dThetaz)-Ktz_D*(imusensor.dOmegaz);
 1066              	r3, #8]	@ float
 1067 0da4 7C331FE5 		.loc 1 215 0
 1068 0da8 002093E5 		ldr	r3, .L43+92
 1069 0dac 80331FE5 		ldr	r2, [r3, #12]	@ float
 1070 0db0 0C3093E5 		ldr	r3, .L43+96
 1071 0db4 0200A0E1 		str	r2, [r3, #12]	@ float
 1072 0db8 0310A0E1 		.loc 1 219 0
 1073 0dbc FEFFFFEB 		ldr	r3, .L43+112
 1074 0dc0 0030A0E1 		ldr	r3, [r3, #0]	@ float
 1075 0dc4 0300A0E1 		mov	r0, r3
 1076 0dc8 28101BE5 		ldr	r1, .L43+100	@ float
 1077 0dcc FEFFFFEB 		bl	__gtsf2
 1078 0dd0 0030A0E1 		mov	r3, r0
 1079 0dd4 0340A0E1 		cmp	r3, #0
 1080 0dd8 AC331FE5 		bgt	.L26
 1081 0ddc 243093E5 		b	.L24
 1082 0de0 0300A0E1 	.L26:
 1083 0de4 24101BE5 		.loc 1 220 0
 1084 0de8 FEFFFFEB 		ldr	r2, .L43+112
 1085 0dec 0030A0E1 		ldr	r3, .L43+100	@ float
 1086 0df0 0400A0E1 		str	r3, [r2, #0]	@ float
 1087 0df4 0310A0E1 		b	.L27
 1088 0df8 FEFFFFEB 	.L24:
 1089 0dfc 0030A0E1 		.loc 1 222 0
 1090 0e00 0320A0E1 		ldr	r3, .L43+112
 1091 0e04 D4331FE5 		ldr	r3, [r3, #0]	@ float
 1092 0e08 082083E5 		mov	r0, r3
 210:lab.c         **** 
 211:lab.c         **** 	// For Keeping data
 212:lab.c         **** 	u.u1 = cnt_u[0];
 1093              	bl	__ltsf2
 1094 0e0c DC331FE5 		mov	r3, r0
 1095 0e10 002093E5 		cmp	r3, #0
 1096 0e14 E0331FE5 		blt	.L29
 1097 0e18 002083E5 		b	.L27
 213:lab.c         **** 	u.u2 = cnt_u[1];
 1098              	
 1099 0e1c EC331FE5 		.loc 1 223 0
 1100 0e20 042093E5 		ldr	r2, .L43+112
 1101 0e24 F0331FE5 		ldr	r3, .L43+104	@ float
 1102 0e28 042083E5 		str	r3, [r2, #0]	@ float
 214:lab.c         **** 	u.u3 = cnt_u[2];
 1103              	:
 1104 0e2c FC331FE5 		.loc 1 227 0
 1105 0e30 082093E5 		ldr	r3, .L43+112
 1106 0e34 00341FE5 		ldr	r3, [r3, #4]	@ float
 1107 0e38 082083E5 		mov	r0, r3
 215:lab.c         **** 	u.u4 = cnt_u[3];
 1108              	r1, .L43+100	@ float
 1109 0e3c 0C341FE5 		bl	__gtsf2
 1110 0e40 0C2093E5 		mov	r3, r0
 1111 0e44 10341FE5 		cmp	r3, #0
 1112 0e48 0C2083E5 		bgt	.L32
 216:lab.c         **** 
 217:lab.c         **** 	// Integral anti-windup
 218:lab.c         **** 		// x-position anti-windup
 219:lab.c         **** 	if (errorcum[0] > 0.875) {
 1113              	30
 1114 0e4c 08341FE5 	.L32:
 1115 0e50 003093E5 		.loc 1 228 0
 1116 0e54 0300A0E1 		ldr	r2, .L43+112
 1117 0e58 20141FE5 		ldr	r3, .L43+100	@ float
 1118 0e5c FEFFFFEB 		str	r3, [r2, #4]	@ float
 1119 0e60 0030A0E1 		b	.L33
 1120 0e64 000053E3 	.L30:
 1121 0e68 000000CA 		.loc 1 230 0
 1122 0e6c 030000EA 		ldr	r3, .L43+112
 1123              		ldr	r3, [r3, #4]	@ float
 220:lab.c         **** 		errorcum[0] = 0.875;
 1124              	
 1125 0e70 2C241FE5 		ldr	r1, .L43+104	@ float
 1126 0e74 3C341FE5 		bl	__ltsf2
 1127 0e78 003082E5 		mov	r3, r0
 1128 0e7c 0B0000EA 		cmp	r3, #0
 1129              		blt	.L35
 221:lab.c         **** 	}	
 222:lab.c         **** 	else if (errorcum[0] < -0.875) {
 1130              	33
 1131 0e80 3C341FE5 	.L35:
 1132 0e84 003093E5 		.loc 1 231 0
 1133 0e88 0300A0E1 		ldr	r2, .L43+112
 1134 0e8c 50141FE5 		ldr	r3, .L43+104	@ float
 1135 0e90 FEFFFFEB 		str	r3, [r2, #4]	@ float
 1136 0e94 0030A0E1 	.L33:
 1137 0e98 000053E3 		.loc 1 235 0
 1138 0e9c 000000BA 		ldr	r3, .L43+112
 1139 0ea0 020000EA 		ldr	r3, [r3, #8]	@ float
 1140              		mov	r0, r3
 223:lab.c         **** 		errorcum[0] = -0.875;
 1141              	43+108	@ float
 1142 0ea4 60241FE5 		bl	__gtsf2
 1143 0ea8 6C341FE5 		mov	r3, r0
 1144 0eac 003082E5 		cmp	r3, #0
 1145              		bgt	.L38
 224:lab.c         **** 	}
 225:lab.c         **** 
 226:lab.c         **** 		// y-position anti-windup
 227:lab.c         **** 	if (errorcum[1] > 0.875) {
 1146              	36
 1147 0eb0 6C341FE5 	.L38:
 1148 0eb4 043093E5 		.loc 1 236 0
 1149 0eb8 0300A0E1 		ldr	r2, .L43+112
 1150 0ebc 84141FE5 		ldr	r3, .L43+108	@ float
 1151 0ec0 FEFFFFEB 		str	r3, [r2, #8]	@ float
 1152 0ec4 0030A0E1 		b	.L42
 1153 0ec8 000053E3 	.L36:
 1154 0ecc 000000CA 		.loc 1 238 0
 1155 0ed0 030000EA 		ldr	r3, .L43+112
 1156              		ldr	r3, [r3, #8]	@ float
 228:lab.c         **** 		errorcum[1] = 0.875;
 1157              	
 1158 0ed4 90241FE5 		ldr	r1, .L43+116	@ float
 1159 0ed8 A0341FE5 		bl	__ltsf2
 1160 0edc 043082E5 		mov	r3, r0
 1161 0ee0 0B0000EA 		cmp	r3, #0
 1162              		blt	.L41
 229:lab.c         **** 	}
 230:lab.c         **** 	else if (errorcum[1] < -0.875) {
 1163              	42
 1164 0ee4 A0341FE5 	.L41:
 1165 0ee8 043093E5 		.loc 1 239 0
 1166 0eec 0300A0E1 		ldr	r2, .L43+112
 1167 0ef0 B4141FE5 		ldr	r3, .L43+116	@ float
 1168 0ef4 FEFFFFEB 		str	r3, [r2, #8]	@ float
 1169 0ef8 0030A0E1 	.L42:
 1170 0efc 000053E3 		.loc 1 241 0
 1171 0f00 000000BA 		sub	sp, fp, #32
 1172 0f04 020000EA 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, lr}
 1173              		bx	lr
 231:lab.c         **** 		errorcum[1] = -0.875;
 1174              	ze	lab3, .-lab3
 1175 0f08 C4241FE5 		.align	2
 1176 0f0c D0341FE5 		.global	lab2
 1178              	lab2:
 232:lab.c         **** 	}
 233:lab.c         **** 
 234:lab.c         **** 		// z-position anti-windup
 235:lab.c         **** 	if (errorcum[2] > 2.5) {
 1179              	:
 1180 0f14 D0341FE5 		.loc 1 245 0
 1181 0f18 083093E5 		@ Function supports interworking.
 1182 0f1c 0300A0E1 		@ args = 0, pretend = 0, frame = 24
 1183 0f20 E0141FE5 		@ frame_needed = 1, uses_anonymous_args = 0
 1184 0f24 FEFFFFEB 		mov	ip, sp
 1185 0f28 0030A0E1 	.LCFI11:
 1186 0f2c 000053E3 		stmfd	sp!, {r4, fp, ip, lr, pc}
 1187 0f30 000000CA 	.LCFI12:
 1188 0f34 030000EA 		sub	fp, ip, #4
 1189              	.LCFI13:
 236:lab.c         **** 		errorcum[2] = 2.5;
 1190              	, #24
 1191 0f38 F4241FE5 	.LCFI14:
 1192 0f3c FC341FE5 		.loc 1 248 0
 1193 0f40 083082E5 		ldr	r2, .L48
 1194 0f44 0B0000EA 		ldr	r3, .L48+4	@ float
 1195              		str	r3, [r2, #0]	@ float
 237:lab.c         **** 	}
 238:lab.c         **** 	else if (errorcum[2] < -2.5) {
 1196              	1 252 0
 1197 0f48 04351FE5 		ldr	r3, .L48+8	@ float
 1198 0f4c 083093E5 		str	r3, [fp, #-40]	@ float
 1199 0f50 0300A0E1 		.loc 1 253 0
 1200 0f54 0C151FE5 		ldr	r3, .L48+12	@ float
 1201 0f58 FEFFFFEB 		str	r3, [fp, #-36]	@ float
 1202 0f5c 0030A0E1 		.loc 1 254 0
 1203 0f60 000053E3 		ldr	r3, .L48+8	@ float
 1204 0f64 000000BA 		str	r3, [fp, #-32]	@ float
 1205 0f68 020000EA 		.loc 1 255 0
 1206              		ldr	r3, .L48+12	@ float
 239:lab.c         **** 		errorcum[2] = -2.5;
 1207              	p, #-28]	@ float
 1208 0f6c 28251FE5 		.loc 1 256 0
 1209 0f70 28351FE5 		ldr	r3, .L48+16	@ float
 1210 0f74 083082E5 		str	r3, [fp, #-24]	@ float
 1211              		.loc 1 257 0
 240:lab.c         **** 	}
 241:lab.c         **** }	
 1212              	r3, .L48+20	@ float
 1213 0f78 20D04BE2 		str	r3, [fp, #-20]	@ float
 1214 0f7c F0699DE8 		.loc 1 261 0
 1215 0f80 1EFF2FE1 		ldr	r2, .L48+24
 1216              		ldr	r3, .L48+4	@ float
 1217              		str	r3, [r2, #0]	@ float
 1218              		.loc 1 262 0
 1219              		ldr	r3, .L48
 1220              		ldr	r2, [r3, #0]	@ float
 1221              		ldr	r3, .L48+28
 1222              		ldr	r3, [r3, #8]	@ float
 242:lab.c         **** /*------------ End Lab 3 ------------*/
 243:lab.c         **** 
 244:lab.c         **** /*-------------- Lab 2 --------------*/
 245:lab.c         **** void lab2() {
 1223              	
 1224              		mov	r1, r3
 1225              		bl	__subsf3
 1226              		mov	r3, r0
 1227 0f84 0DC0A0E1 		mov	r0, r3
 1228              		ldr	r1, [fp, #-32]	@ float
 1229 0f88 10D82DE9 		bl	__mulsf3
 1230              		mov	r3, r0
 1231 0f8c 04B04CE2 		mov	r4, r3
 1232              		ldr	r3, .L48+28
 1233 0f90 18D04DE2 		ldr	r3, [r3, #32]	@ float
 1234              		mov	r0, r3
 246:lab.c         **** 	
 247:lab.c         **** 	// Desired	
 248:lab.c         **** 	pitch_desired = 0.0;
 1235              	p, #-28]	@ float
 1236 0f94 00219FE5 		bl	__mulsf3
 1237 0f98 00319FE5 		mov	r3, r0
 1238 0f9c 003082E5 		mov	r0, r4
 249:lab.c         **** 	
 250:lab.c         **** 	// INNER LOOP
 251:lab.c         **** 		// Hummingbird
 252:lab.c         **** 	float Ktx_P = 1.0;	// Proportional Roll
 1239              		r1, r3
 1240 0fa0 FC309FE5 		bl	__subsf3
 1241 0fa4 28300BE5 		mov	r3, r0
 253:lab.c         **** 	float Ktx_D = 0.3;	// Derivative Roll
 1242              	v	r2, r3
 1243 0fa8 F8309FE5 		ldr	r3, .L48+24
 1244 0fac 24300BE5 		str	r2, [r3, #4]	@ float
 254:lab.c         **** 	float Kty_P = 1.0;	// Proportional Pitch
 1245              	oc 1 263 0
 1246 0fb0 EC309FE5 		ldr	r2, .L48+24
 1247 0fb4 20300BE5 		ldr	r3, .L48+4	@ float
 255:lab.c         **** 	float Kty_D = 0.3;	// Derivative Pitch
 1248              	r	r3, [r2, #8]	@ float
 1249 0fb8 E8309FE5 		.loc 1 266 0
 1250 0fbc 1C300BE5 		ldr	r3, .L48+24
 256:lab.c         **** 	float Ktz_P = 0.08;	// Proportional Yaw
 1251              	r	r2, [r3, #0]	@ float
 1252 0fc0 E4309FE5 		ldr	r3, .L48+32
 1253 0fc4 18300BE5 		str	r2, [r3, #0]	@ float
 257:lab.c         **** 	float Ktz_D = 0.04;	// Derivative Yaw
 1254              	oc 1 267 0
 1255 0fc8 E0309FE5 		ldr	r3, .L48+24
 1256 0fcc 14300BE5 		ldr	r2, [r3, #4]	@ float
 258:lab.c         **** 		
 259:lab.c         **** 	// Inner Loop PD 
 260:lab.c         **** 	// Note: Lab 2 only tests Pitch control. Do not uncomment roll and yaw lines.
 261:lab.c         **** 	cnt_u[0] = 0.0; // Ktx_P*(roll_desired-imusensor.dThetax)-Ktx_D*(imusensor.dOmegax);
 1257              	r	r3, .L48+32
 1258 0fd0 DC209FE5 		str	r2, [r3, #4]	@ float
 1259 0fd4 C4309FE5 		.loc 1 268 0
 1260 0fd8 003082E5 		ldr	r3, .L48+24
 262:lab.c         **** 	cnt_u[1] = Kty_P*(pitch_desired-imusensor.dThetay)-Kty_D*(imusensor.dOmegay);
 1261              		r2, [r3, #8]	@ float
 1262 0fdc B8309FE5 		ldr	r3, .L48+32
 1263 0fe0 002093E5 		str	r2, [r3, #8]	@ float
 1264 0fe4 CC309FE5 		.loc 1 269 0
 1265 0fe8 083093E5 		ldr	r3, .L48+24
 1266 0fec 0200A0E1 		ldr	r2, [r3, #12]	@ float
 1267 0ff0 0310A0E1 		ldr	r3, .L48+32
 1268 0ff4 FEFFFFEB 		str	r2, [r3, #12]	@ float
 1269 0ff8 0030A0E1 		.loc 1 270 0
 1270 0ffc 0300A0E1 		sub	sp, fp, #16
 1271 1000 20101BE5 		ldmfd	sp, {r4, fp, sp, lr}
 1272 1004 FEFFFFEB 		bx	lr
 1273 1008 0030A0E1 	.L49:
 1274 100c 0340A0E1 		.align	2
 1275 1010 A0309FE5 	.L48:
 1276 1014 203093E5 		.word	pitch_desired
 1277 1018 0300A0E1 		.word	0
 1278 101c 1C101BE5 		.word	1065353216
 1279 1020 FEFFFFEB 		.word	1050253722
 1280 1024 0030A0E1 		.word	1034147594
 1281 1028 0400A0E1 		.word	1025758986
 1282 102c 0310A0E1 		.word	cnt_u
 1283 1030 FEFFFFEB 		.word	imusensor
 1284 1034 0030A0E1 		.word	u
 1285 1038 0320A0E1 	.LFE5:
 1287 1040 042083E5 		.global	__fixunssfsi
 263:lab.c         **** 	cnt_u[2] = 0.0;//Ktz_P*(yaw_desired-imusensor.dThetaz)-Ktz_D*(imusensor.dOmegaz);
 1289 1044 68209FE5 	Command:
 1290 1048 50309FE5 	.LFB6:
 1291 104c 083082E5 		.loc 1 275 0
 264:lab.c         **** 
 265:lab.c         **** 	// For Keeping data
 266:lab.c         **** 	u.u1 = cnt_u[0];
 1292              	unction supports interworking.
 1293 1050 5C309FE5 		@ args = 0, pretend = 0, frame = 16
 1294 1054 002093E5 		@ frame_needed = 1, uses_anonymous_args = 0
 1295 1058 5C309FE5 		mov	ip, sp
 1296 105c 002083E5 	.LCFI15:
 267:lab.c         **** 	u.u2 = cnt_u[1];
 1297              	d	sp!, {r4, r5, r6, fp, ip, lr, pc}
 1298 1060 4C309FE5 	.LCFI16:
 1299 1064 042093E5 		sub	fp, ip, #4
 1300 1068 4C309FE5 	.LCFI17:
 1301 106c 042083E5 		sub	sp, sp, #24
 268:lab.c         **** 	u.u3 = cnt_u[2];
 1302              	18:
 1303 1070 3C309FE5 		.loc 1 277 0
 1304 1074 082093E5 		ldr	r2, .L67+16
 1305 1078 3C309FE5 		mov	r3, #0
 1306 107c 082083E5 		strb	r3, [r2, #0]
 269:lab.c         **** 	u.u4 = cnt_u[3];
 1307              	 1 283 0
 1308 1080 2C309FE5 		ldr	r2, .L67+16
 1309 1084 0C2093E5 		mov	r3, #1
 1310 1088 2C309FE5 		strb	r3, [r2, #1]
 1311 108c 0C2083E5 		.loc 1 289 0
 270:lab.c         **** }
 1312              	r3, .L67+20
 1313 1090 10D04BE2 		ldr	r3, [r3, #0]	@ float
 1314 1094 10689DE8 		mov	r0, r3
 1315 1098 1EFF2FE1 		bl	__extendsfdf2
 1316              		mov	r3, r0
 1317              		mov	r4, r1
 1318              		mov	r0, r3
 1319 109c 00000000 		mov	r1, r4
 1320 10a0 00000000 		mov	r2, r3
 1321 10a4 0000803F 		mov	r3, r4
 1322 10a8 9A99993E 		bl	__adddf3
 1323 10ac 0AD7A33D 		mov	r3, r0
 1324 10b0 0AD7233D 		mov	r4, r1
 1325 10b4 00000000 		mov	r5, r3
 1326 10b8 00000000 		mov	r6, r4
 1327 10bc 00000000 		ldr	r3, .L67+24
 1328              		ldr	r3, [r3, #0]	@ float
 1329              		mov	r0, r3
 1330              		bl	__extendsfdf2
 1331              		mov	r3, r0
 1332              		mov	r4, r1
 1333              		mov	r0, r5
 1334              		mov	r1, r6
 1335              		mov	r2, r3
 271:lab.c         **** /*------------ End Lab 2 ------------*/
 272:lab.c         **** /*------------ End Controller ------------*/
 273:lab.c         **** 
 274:lab.c         **** /*---------------- Command ---------------*/
 275:lab.c         **** void Command() {
 1336              	
 1337              		mov	r3, r0
 1338              		mov	r4, r1
 1339              		mov	r0, #1069547520
 1340 10c0 0DC0A0E1 		add	r0, r0, #3145728
 1341              		mov	r1, #0
 1342 10c4 70D82DE9 		mov	r2, r3
 1343              		mov	r3, r4
 1344 10c8 04B04CE2 		bl	__divdf3
 1345              		mov	r3, r0
 1346 10cc 18D04DE2 		mov	r4, r1
 1347              		mov	r0, r3
 276:lab.c         **** 	/////////////// Controller Settings ////////////
 277:lab.c         **** 	WO_SDK.ctrl_mode=0x00;  //0x00: direct individual motor control (individual commands for motors 0.
 1348              	
 1349 10d0 FC249FE5 		bl	__truncdfsf2
 1350 10d4 0030A0E3 		mov	r3, r0
 1351 10d8 0030C2E5 		str	r3, [fp, #-40]	@ float
 278:lab.c         **** 				//0x01: direct motor control using standard output mapping: commands are interpreted as pitch, 
 279:lab.c         **** 				//      and thrust inputs; no attitude controller active
 280:lab.c         **** 				//0x02: attitude and throttle control: commands are input for standard attitude controller
 281:lab.c         **** 				//0x03: GPS waypoint control
 282:lab.c         **** 
 283:lab.c         **** 	WO_SDK.ctrl_enabled=1;	//0: disable control by HL processor
 1352              	oc 1 290 0
 1353 10dc F0249FE5 		ldr	r3, .L67+24
 1354 10e0 0130A0E3 		ldr	r3, [r3, #0]	@ float
 1355 10e4 0130C2E5 		mov	r0, r3
 284:lab.c         **** 				//1: enable control by HL processor
 285:lab.c         **** 	////////////////////////////////////////////////
 286:lab.c         **** 
 287:lab.c         **** 	//////// Translate commanded torques and thrust into rotor speed and commands ////////////
 288:lab.c         **** 	// NOTE METHOD BELOW ASSUMES THAT CG IS IN THE SAME PLANE AS THE ROTORS
 289:lab.c         **** 	float twolkF = 1.0/(2.0*l*kF);
 1356              	__extendsfdf2
 1357 10e8 E8349FE5 		mov	r3, r0
 1358 10ec 003093E5 		mov	r4, r1
 1359 10f0 0300A0E1 		mov	r0, r3
 1360 10f4 FEFFFFEB 		mov	r1, r4
 1361 10f8 0030A0E1 		mov	r2, #1073741824
 1362 10fc 0140A0E1 		add	r2, r2, #1048576
 1363 1100 0300A0E1 		mov	r3, #0
 1364 1104 0410A0E1 		bl	__muldf3
 1365 1108 0320A0E1 		mov	r3, r0
 1366 110c 0430A0E1 		mov	r4, r1
 1367 1110 FEFFFFEB 		mov	r0, #1069547520
 1368 1114 0030A0E1 		add	r0, r0, #3145728
 1369 1118 0140A0E1 		mov	r1, #0
 1370 111c 0350A0E1 		mov	r2, r3
 1371 1120 0460A0E1 		mov	r3, r4
 1372 1124 B0349FE5 		bl	__divdf3
 1373 1128 003093E5 		mov	r3, r0
 1374 112c 0300A0E1 		mov	r4, r1
 1375 1130 FEFFFFEB 		mov	r0, r3
 1376 1134 0030A0E1 		mov	r1, r4
 1377 1138 0140A0E1 		bl	__truncdfsf2
 1378 113c 0500A0E1 		mov	r3, r0
 1379 1140 0610A0E1 		str	r3, [fp, #-36]	@ float
 1380 1144 0320A0E1 		.loc 1 291 0
 1381 1148 0430A0E1 		ldr	r3, .L67+28
 1382 114c FEFFFFEB 		ldr	r3, [r3, #0]	@ float
 1383 1150 0030A0E1 		mov	r0, r3
 1384 1154 0140A0E1 		bl	__extendsfdf2
 1385 1158 FF05A0E3 		mov	r3, r0
 1386 115c 030680E2 		mov	r4, r1
 1387 1160 0010A0E3 		mov	r0, r3
 1388 1164 0320A0E1 		mov	r1, r4
 1389 1168 0430A0E1 		mov	r2, #1073741824
 1390 116c FEFFFFEB 		add	r2, r2, #1048576
 1391 1170 0030A0E1 		mov	r3, #0
 1392 1174 0140A0E1 		bl	__muldf3
 1393 1178 0300A0E1 		mov	r3, r0
 1394 117c 0410A0E1 		mov	r4, r1
 1395 1180 FEFFFFEB 		mov	r0, #1069547520
 1396 1184 0030A0E1 		add	r0, r0, #3145728
 1397 1188 28300BE5 		mov	r1, #0
 290:lab.c         **** 	float fourkF = 1.0/(4.0*kF);
 1398              	r3, r0
 1399 118c 48349FE5 		mov	r4, r1
 1400 1190 003093E5 		mov	r0, r3
 1401 1194 0300A0E1 		mov	r1, r4
 1402 1198 FEFFFFEB 		bl	__truncdfsf2
 1403 119c 0030A0E1 		mov	r3, r0
 1404 11a0 0140A0E1 		str	r3, [fp, #-32]	@ float
 1405 11a4 0300A0E1 		.loc 1 293 0
 1406 11a8 0410A0E1 		ldr	r2, .L67+32
 1407 11ac 0121A0E3 		ldr	r3, .L67+36	@ float
 1408 11b0 012682E2 		str	r3, [r2, #0]	@ float
 1409 11b4 0030A0E3 		.loc 1 294 0
 1410 11b8 FEFFFFEB 		ldr	r2, .L67+32
 1411 11bc 0030A0E1 		ldr	r3, [fp, #-40]	@ float
 1412 11c0 0140A0E1 		str	r3, [r2, #4]	@ float
 1413 11c4 FF05A0E3 		.loc 1 295 0
 1414 11c8 030680E2 		ldr	r3, [fp, #-32]
 1415 11cc 0010A0E3 		eor	r2, r3, #-2147483648
 1416 11d0 0320A0E1 		ldr	r3, .L67+32
 1417 11d4 0430A0E1 		str	r2, [r3, #8]	@ float
 1418 11d8 FEFFFFEB 		.loc 1 296 0
 1419 11dc 0030A0E1 		ldr	r2, .L67+32
 1420 11e0 0140A0E1 		ldr	r3, [fp, #-36]	@ float
 1421 11e4 0300A0E1 		str	r3, [r2, #12]	@ float
 1422 11e8 0410A0E1 		.loc 1 297 0
 1423 11ec FEFFFFEB 		ldr	r3, [fp, #-40]
 1424 11f0 0030A0E1 		eor	r2, r3, #-2147483648
 1425 11f4 24300BE5 		ldr	r3, .L67+32
 291:lab.c         **** 	float fourkM = 1.0/(4.0*kM);
 1426              	.loc 1 298 0
 1427 11f8 E0339FE5 		ldr	r2, .L67+32
 1428 11fc 003093E5 		ldr	r3, .L67+36	@ float
 1429 1200 0300A0E1 		str	r3, [r2, #20]	@ float
 1430 1204 FEFFFFEB 		.loc 1 299 0
 1431 1208 0030A0E1 		ldr	r2, .L67+32
 1432 120c 0140A0E1 		ldr	r3, [fp, #-32]	@ float
 1433 1210 0300A0E1 		str	r3, [r2, #24]	@ float
 1434 1214 0410A0E1 		.loc 1 300 0
 1435 1218 0121A0E3 		ldr	r2, .L67+32
 1436 121c 012682E2 		ldr	r3, [fp, #-36]	@ float
 1437 1220 0030A0E3 		str	r3, [r2, #28]	@ float
 1438 1224 FEFFFFEB 		.loc 1 301 0
 1439 1228 0030A0E1 		ldr	r2, .L67+32
 1440 122c 0140A0E1 		ldr	r3, .L67+36	@ float
 1441 1230 FF05A0E3 		str	r3, [r2, #32]	@ float
 1442 1234 030680E2 		.loc 1 302 0
 1443 1238 0010A0E3 		ldr	r3, [fp, #-40]
 1444 123c 0320A0E1 		eor	r2, r3, #-2147483648
 1445 1240 0430A0E1 		ldr	r3, .L67+32
 1446 1244 FEFFFFEB 		str	r2, [r3, #36]	@ float
 1447 1248 0030A0E1 		.loc 1 303 0
 1448 124c 0140A0E1 		ldr	r3, [fp, #-32]
 1449 1250 0300A0E1 		eor	r2, r3, #-2147483648
 1450 1254 0410A0E1 		ldr	r3, .L67+32
 1451 1258 FEFFFFEB 		str	r2, [r3, #40]	@ float
 1452 125c 0030A0E1 		.loc 1 304 0
 1453 1260 20300BE5 		ldr	r2, .L67+32
 292:lab.c         **** 
 293:lab.c         **** 	Winv[0] = 0;
 1454              		str	r3, [r2, #44]	@ float
 1455 1264 78239FE5 		.loc 1 305 0
 1456 1268 78339FE5 		ldr	r2, .L67+32
 1457 126c 003082E5 		ldr	r3, [fp, #-40]	@ float
 294:lab.c         **** 	Winv[1] = twolkF;
 1458              		r3, [r2, #48]	@ float
 1459 1270 6C239FE5 		.loc 1 306 0
 1460 1274 28301BE5 		ldr	r2, .L67+32
 1461 1278 043082E5 		ldr	r3, .L67+36	@ float
 295:lab.c         **** 	Winv[2] = -fourkM;
 1462              		r3, [r2, #52]	@ float
 1463 127c 20301BE5 		.loc 1 307 0
 1464 1280 022123E2 		ldr	r2, .L67+32
 1465 1284 58339FE5 		ldr	r3, [fp, #-32]	@ float
 1466 1288 082083E5 		str	r3, [r2, #56]	@ float
 296:lab.c         **** 	Winv[3] = fourkF;
 1467              	 1 308 0
 1468 128c 50239FE5 		ldr	r2, .L67+32
 1469 1290 24301BE5 		ldr	r3, [fp, #-36]	@ float
 1470 1294 0C3082E5 		str	r3, [r2, #60]	@ float
 297:lab.c         **** 	Winv[1*4+0] = -twolkF;
 1471              	c 1 310 0
 1472 1298 28301BE5 		ldr	r3, .L67+40
 1473 129c 022123E2 		str	r3, [sp, #0]
 1474 12a0 3C339FE5 		ldr	r3, .L67+44
 1475 12a4 102083E5 		str	r3, [sp, #4]
 298:lab.c         **** 	Winv[1*4+1] = 0;
 1476              	r0, #4
 1477 12a8 34239FE5 		mov	r1, #4
 1478 12ac 34339FE5 		mov	r2, #1
 1479 12b0 143082E5 		ldr	r3, .L67+32
 299:lab.c         **** 	Winv[1*4+2] = fourkM;
 1480              	matrix_multiply
 1481 12b4 28239FE5 		.loc 1 313 0
 1482 12b8 20301BE5 		mov	r3, #0
 1483 12bc 183082E5 		str	r3, [fp, #-28]
 300:lab.c         **** 	Winv[1*4+3] = fourkF;
 1484              	L51
 1485 12c0 1C239FE5 	.L52:
 1486 12c4 24301BE5 		.loc 1 314 0
 1487 12c8 1C3082E5 		ldr	r2, [fp, #-28]
 301:lab.c         **** 	Winv[2*4+0] = 0;
 1488              		r3, .L67+44
 1489 12cc 10239FE5 		ldr	r2, [r3, r2, asl #2]	@ float
 1490 12d0 10339FE5 		ldr	r3, .L67+48
 1491 12d4 203082E5 		ldr	r3, [r3, #0]	@ float
 302:lab.c         **** 	Winv[2*4+1] = -twolkF;
 1492              		r0, r2
 1493 12d8 28301BE5 		mov	r1, r3
 1494 12dc 022123E2 		bl	__gtsf2
 1495 12e0 FC329FE5 		mov	r3, r0
 1496 12e4 242083E5 		cmp	r3, #0
 303:lab.c         **** 	Winv[2*4+2] = -fourkM;
 1497              	.L55
 1498 12e8 20301BE5 		b	.L53
 1499 12ec 022123E2 	.L55:
 1500 12f0 EC329FE5 		.loc 1 315 0
 1501 12f4 282083E5 		ldr	r1, [fp, #-28]
 304:lab.c         **** 	Winv[2*4+3] = fourkF;
 1502              	r3, .L67+48
 1503 12f8 E4229FE5 		ldr	r2, [r3, #0]	@ float
 1504 12fc 24301BE5 		ldr	r3, .L67+44
 1505 1300 2C3082E5 		str	r2, [r3, r1, asl #2]	@ float
 305:lab.c         **** 	Winv[3*4+0] = twolkF;
 1506              	L56
 1507 1304 D8229FE5 	.L53:
 1508 1308 28301BE5 		.loc 1 317 0
 1509 130c 303082E5 		ldr	r2, [fp, #-28]
 306:lab.c         **** 	Winv[3*4+1] = 0;
 1510              		r3, .L67+44
 1511 1310 CC229FE5 		ldr	r2, [r3, r2, asl #2]	@ float
 1512 1314 CC329FE5 		ldr	r3, .L67+52
 1513 1318 343082E5 		ldr	r3, [r3, #0]	@ float
 307:lab.c         **** 	Winv[3*4+2] = fourkM;
 1514              		r0, r2
 1515 131c C0229FE5 		mov	r1, r3
 1516 1320 20301BE5 		bl	__ltsf2
 1517 1324 383082E5 		mov	r3, r0
 308:lab.c         **** 	Winv[3*4+3] = fourkF;
 1518              		r3, #0
 1519 1328 B4229FE5 		blt	.L58
 1520 132c 24301BE5 		b	.L56
 1521 1330 3C3082E5 	.L58:
 309:lab.c         **** 
 310:lab.c         **** 	matrix_multiply(4,4,1,Winv,cnt_u,omega_cmd2);
 1522              	c 1 318 0
 1523 1334 B0329FE5 		ldr	r1, [fp, #-28]
 1524 1338 00308DE5 		ldr	r3, .L67+52
 1525 133c AC329FE5 		ldr	r2, [r3, #0]	@ float
 1526 1340 04308DE5 		ldr	r3, .L67+44
 1527 1344 0400A0E3 		str	r2, [r3, r1, asl #2]	@ float
 1528 1348 0410A0E3 	.L56:
 1529 134c 0120A0E3 		.loc 1 320 0
 1530 1350 8C329FE5 		ldr	r5, [fp, #-28]
 1531 1354 FEFFFFEB 		ldr	r2, [fp, #-28]
 311:lab.c         **** 
 312:lab.c         **** 	int i;
 313:lab.c         **** 	for (i=0; i<4; i++) {
 1532              	L67+44
 1533 1358 0030A0E3 		ldr	r3, [r3, r2, asl #2]	@ float
 1534 135c 1C300BE5 		mov	r0, r3
 1535 1360 710000EA 		bl	__extendsfdf2
 1536              		mov	r3, r0
 314:lab.c         **** 		if (omega_cmd2[i] > MAXPHI2) {
 1537              	r4, r1
 1538 1364 1C201BE5 		mov	r0, r3
 1539 1368 80329FE5 		mov	r1, r4
 1540 136c 022193E7 		bl	sqrt
 1541 1370 7C329FE5 		mov	r3, r0
 1542 1374 003093E5 		mov	r4, r1
 1543 1378 0200A0E1 		mov	r0, r3
 1544 137c 0310A0E1 		mov	r1, r4
 1545 1380 FEFFFFEB 		bl	__truncdfsf2
 1546 1384 0030A0E1 		mov	r2, r0
 1547 1388 000053E3 		ldr	r3, .L67+56
 1548 138c 000000CA 		str	r2, [r3, r5, asl #2]	@ float
 1549 1390 050000EA 		.loc 1 323 0
 1550              		ldr	r5, [fp, #-28]
 315:lab.c         **** 			omega_cmd2[i] = MAXPHI2;
 1551              	#-28]
 1552 1394 1C101BE5 		ldr	r3, .L67+56
 1553 1398 54329FE5 		ldr	r3, [r3, r2, asl #2]	@ float
 1554 139c 002093E5 		mov	r0, r3
 1555 13a0 48329FE5 		bl	__extendsfdf2
 1556 13a4 012183E7 		mov	r3, r0
 1557 13a8 100000EA 		mov	r4, r1
 1558              		mov	r0, r3
 316:lab.c         **** 		}
 317:lab.c         **** 		else if (omega_cmd2[i] < MINPHI2) {
 1559              	 r4
 1560 13ac 1C201BE5 		adr	r2, .L67
 1561 13b0 38329FE5 		ldmia	r2, {r2-r3}
 1562 13b4 022193E7 		bl	__muldf3
 1563 13b8 38329FE5 		mov	r3, r0
 1564 13bc 003093E5 		mov	r4, r1
 1565 13c0 0200A0E1 		mov	r0, r3
 1566 13c4 0310A0E1 		mov	r1, r4
 1567 13c8 FEFFFFEB 		adr	r2, .L67+8
 1568 13cc 0030A0E1 		ldmia	r2, {r2-r3}
 1569 13d0 000053E3 		bl	__subdf3
 1570 13d4 000000BA 		mov	r3, r0
 1571 13d8 040000EA 		mov	r4, r1
 1572              		mov	r0, r3
 318:lab.c         **** 			omega_cmd2[i] = MINPHI2;
 1573              	l	__truncdfsf2
 1574 13dc 1C101BE5 		mov	r2, r0
 1575 13e0 10329FE5 		ldr	r3, .L67+60
 1576 13e4 002093E5 		str	r2, [r3, r5, asl #2]	@ float
 1577 13e8 00329FE5 		.loc 1 330 0
 1578 13ec 012183E7 		ldr	r2, [fp, #-28]
 1579              		ldr	r3, .L67+60
 319:lab.c         **** 		}
 320:lab.c         **** 		omega_cmd[i] = sqrt(omega_cmd2[i]);
 1580              	, [r3, r2, asl #2]	@ float
 1581 13f0 1C501BE5 		mov	r0, r3
 1582 13f4 1C201BE5 		ldr	r1, .L67+64	@ float
 1583 13f8 F0319FE5 		bl	__ltsf2
 1584 13fc 023193E7 		mov	r3, r0
 1585 1400 0300A0E1 		cmp	r3, #0
 1586 1404 FEFFFFEB 		blt	.L61
 1587 1408 0030A0E1 		b	.L59
 1588 140c 0140A0E1 	.L61:
 1589 1410 0300A0E1 		.loc 1 331 0
 1590 1414 0410A0E1 		ldr	r1, [fp, #-28]
 1591 1418 FEFFFFEB 		ldr	r2, .L67+60
 1592 141c 0030A0E1 		ldr	r3, .L67+64	@ float
 1593 1420 0140A0E1 		str	r3, [r2, r1, asl #2]	@ float
 1594 1424 0300A0E1 		b	.L62
 1595 1428 0410A0E1 	.L59:
 1596 142c FEFFFFEB 		.loc 1 333 0
 1597 1430 0020A0E1 		ldr	r2, [fp, #-28]
 1598 1434 C0319FE5 		ldr	r3, .L67+60
 1599 1438 052183E7 		ldr	r3, [r3, r2, asl #2]	@ float
 321:lab.c         **** 		// Translate Desired Rotor Speed into Motor Commands
 322:lab.c         **** 		// NOTE: THIS IS FOR THE PELICAN
 323:lab.c         **** 		cmd[i] = 0.238432*omega_cmd[i] - 25.872642;	// Verify
 1600              	 .L67+68	@ float
 1601 143c 1C501BE5 		bl	__gtsf2
 1602 1440 1C201BE5 		mov	r3, r0
 1603 1444 B0319FE5 		cmp	r3, #0
 1604 1448 023193E7 		bgt	.L64
 1605 144c 0300A0E1 		b	.L62
 1606 1450 FEFFFFEB 	.L64:
 1607 1454 0030A0E1 		.loc 1 334 0
 1608 1458 0140A0E1 		ldr	r1, [fp, #-28]
 1609 145c 0300A0E1 		ldr	r2, .L67+60
 1610 1460 0410A0E1 		ldr	r3, .L67+68	@ float
 1611 1464 562F8FE2 		str	r3, [r2, r1, asl #2]	@ float
 1612 1468 0C0092E8 	.L62:
 1613 146c FEFFFFEB 		.loc 1 313 0
 1614 1470 0030A0E1 		ldr	r3, [fp, #-28]
 1615 1474 0140A0E1 		add	r3, r3, #1
 1616 1478 0300A0E1 		str	r3, [fp, #-28]
 1617 147c 0410A0E1 	.L51:
 1618 1480 512F8FE2 		ldr	r3, [fp, #-28]
 1619 1484 0C0092E8 		cmp	r3, #3
 1620 1488 FEFFFFEB 		ble	.L52
 1621 148c 0030A0E1 		.loc 1 340 0
 1622 1490 0140A0E1 		ldr	r3, .L67+60
 1623 1494 0300A0E1 		ldr	r3, [r3, #0]	@ float
 1624 1498 0410A0E1 		mov	r0, r3
 1625 149c FEFFFFEB 		bl	__fixunssfsi
 1626 14a0 0020A0E1 		mov	r3, r0
 1627 14a4 54319FE5 		and	r3, r3, #255
 1628 14a8 052183E7 		ldr	r2, .L67+72
 324:lab.c         **** 
 325:lab.c         **** 		// Below is a safety measure. We want to make sure the motor 
 326:lab.c         **** 		// commands are never 0 so that the motors will always keep 
 327:lab.c         **** 		// spinning. Also makes sure that motor commands stay within range.
 328:lab.c         **** 		// NOTE: THIS SHOULD BE UNNECESSARY. I IMPLEMENTED THIS AS AN EXTRA 
 329:lab.c         **** 		// SAFETY MEASURE
 330:lab.c         **** 		if (cmd[i] < 1.0) {
 1629              	1 0
 1630 14ac 1C201BE5 		ldr	r3, .L67+60
 1631 14b0 48319FE5 		ldr	r3, [r3, #4]	@ float
 1632 14b4 023193E7 		mov	r0, r3
 1633 14b8 0300A0E1 		bl	__fixunssfsi
 1634 14bc 40119FE5 		mov	r3, r0
 1635 14c0 FEFFFFEB 		and	r3, r3, #255
 1636 14c4 0030A0E1 		ldr	r2, .L67+72
 1637 14c8 000053E3 		strb	r3, [r2, #3]
 1638 14cc 000000BA 		.loc 1 342 0
 1639 14d0 040000EA 		ldr	r3, .L67+60
 1640              		ldr	r3, [r3, #8]	@ float
 331:lab.c         **** 			cmd[i] = 1.0;
 1641              		bl	__fixunssfsi
 1642 14d4 1C101BE5 		mov	r3, r0
 1643 14d8 20219FE5 		and	r3, r3, #255
 1644 14dc 20319FE5 		ldr	r2, .L67+72
 1645 14e0 013182E7 		strb	r3, [r2, #1]
 1646 14e4 0D0000EA 		.loc 1 343 0
 1647              		ldr	r3, .L67+60
 332:lab.c         **** 		}
 333:lab.c         **** 		else if (cmd[i] > 200.0) {
 1648              	, [r3, #12]	@ float
 1649 14e8 1C201BE5 		mov	r0, r3
 1650 14ec 0C319FE5 		bl	__fixunssfsi
 1651 14f0 023193E7 		mov	r3, r0
 1652 14f4 0300A0E1 		and	r3, r3, #255
 1653 14f8 08119FE5 		ldr	r2, .L67+72
 1654 14fc FEFFFFEB 		strb	r3, [r2, #2]
 1655 1500 0030A0E1 		.loc 1 345 0
 1656 1504 000053E3 		sub	sp, fp, #24
 1657 1508 000000CA 		ldmfd	sp, {r4, r5, r6, fp, sp, lr}
 1658 150c 030000EA 		bx	lr
 1659              	.L68:
 334:lab.c         **** 			cmd[i] = 200.0;
 1660              	67:
 1661 1510 1C101BE5 		.word	1070499056
 1662 1514 E4209FE5 		.word	-1792478831
 1663 1518 E8309FE5 		.word	1077534565
 1664 151c 013182E7 		.word	2001935796
 1665              		.word	WO_SDK
 1666              		.word	l
 1667 1520 1C301BE5 		.word	kF
 1668 1524 013083E2 		.word	kM
 1669 1528 1C300BE5 		.word	Winv
 1670              		.word	0
 1671 152c 1C301BE5 		.word	cnt_u
 1672 1530 030053E3 		.word	omega_cmd2
 1673 1534 8AFFFFDA 		.word	MAXPHI2
 335:lab.c         **** 		} 
 336:lab.c         **** 	}
 337:lab.c         **** 	/////////////////////////////////////////////////////////////////////////////////////////////
 338:lab.c         **** 
 339:lab.c         **** 	/////// Send Motor Commands ///////////
 340:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[0] = cmd[0];
 1674              	
 1675 1538 C0309FE5 		.word	omega_cmd
 1676 153c 003093E5 		.word	cmd
 1677 1540 0300A0E1 		.word	1065353216
 1678 1544 FEFFFFEB 		.word	1128792064
 1679 1548 0030A0E1 		.word	WO_Direct_Individual_Motor_Control
 1680 154c FF3003E2 	.LFE6:
 1682 1554 0030C2E5 		.comm	GPS_timeout,4,4
 341:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[3] = cmd[1];
 1683              	YSTEM_initialized,1,1
 1684 1558 A0309FE5 		.comm	takeoff2,4,4
 1685 155c 043093E5 		.comm	initialize,4,4
 1686 1560 0300A0E1 		.comm	velocityEstHolder,4,4
 1687 1564 FEFFFFEB 		.comm	VelEstX,4,4
 1688 1568 0030A0E1 		.comm	VelEstY,4,4
 1689 156c FF3003E2 		.comm	VelEstZ,4,4
 1690 1570 94209FE5 		.comm	previousXMeas,4,4
 1691 1574 0330C2E5 		.comm	previousYMeas,4,4
 342:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[1] = cmd[2];
 1692              	eviousZMeas,4,4
 1693 1578 80309FE5 		.comm	errorcum,12,4
 1694 157c 083093E5 		.comm	IntegralHolder,4,4
 1695 1580 0300A0E1 		.comm	imusensor,68,4
 1696 1584 FEFFFFEB 		.comm	real_mocap,32,4
 1697 1588 0030A0E1 		.comm	mocap,32,4
 1698 158c FF3003E2 		.comm	u,16,4
 1699 1590 74209FE5 		.comm	Winv,64,4
 1700 1594 0130C2E5 		.comm	cnt_u,16,4
 343:lab.c         **** 	WO_Direct_Individual_Motor_Control.motor[2] = cmd[3];
 1701              	ega_cmd2,16,4
 1702 1598 60309FE5 		.comm	omega_cmd,16,4
 1703 159c 0C3093E5 		.comm	cmd,16,4
 1704 15a0 0300A0E1 		.comm	roll_desired,4,4
 1705 15a4 FEFFFFEB 		.comm	pitch_desired,4,4
 1706 15a8 0030A0E1 		.comm	yaw_desired,4,4
 1707 15ac FF3003E2 		.comm	x_nom,16,4
 1708 15b0 54209FE5 		.comm	z,12,4
 1709 15b4 0230C2E5 		.section	.debug_frame,"",%progbits
 344:lab.c         **** 	///////////////////////////////////////
 345:lab.c         **** }
 1710              	
 1711 15b8 18D04BE2 		.4byte	.LECIE0-.LSCIE0
 1712 15bc 70689DE8 	.LSCIE0:
 1713 15c0 1EFF2FE1 		.4byte	0xffffffff
 1714              		.byte	0x1
 1715              		.ascii	"\000"
 1716              		.uleb128 0x1
 1717 15c4 F084CE3F 		.sleb128 -4
 1718 15c8 91F12895 		.byte	0xe
 1719 15cc 65DF3940 		.byte	0xc
 1720 15d0 B41D5377 		.uleb128 0xd
 1721 15d4 00000000 		.uleb128 0x0
 1722 15d8 00000000 		.align	2
 1723 15dc 00000000 	.LECIE0:
 1724 15e0 00000000 	.LSFDE0:
 1725 15e4 00000000 		.4byte	.LEFDE0-.LASFDE0
 1726 15e8 00000000 	.LASFDE0:
 1727 15ec 00000000 		.4byte	.Lframe0
 1728 15f0 00000000 		.4byte	.LFB2
 1729 15f4 00000000 		.4byte	.LFE2-.LFB2
 1730 15f8 00000000 		.byte	0x4
 1731 15fc 00000000 		.4byte	.LCFI0-.LFB2
 1732 1600 00000000 		.byte	0xd
 1733 1604 0000803F 		.uleb128 0xc
 1734 1608 00004843 		.byte	0x4
 1735 160c 00000000 		.4byte	.LCFI1-.LCFI0
 1736              		.byte	0x8e
 1737              		.uleb128 0x2
 1738              		.byte	0x8d
 1739              		.uleb128 0x3
 1740              		.byte	0x8b
 1741              		.uleb128 0x4
 1742              		.byte	0x4
 1743              		.4byte	.LCFI2-.LCFI1
 1744              		.byte	0xc
 1745              		.uleb128 0xb
 1746              		.uleb128 0x4
 1747              		.align	2
 1748              	.LEFDE0:
 1749              	.LSFDE2:
 1750              		.4byte	.LEFDE2-.LASFDE2
 1751              	.LASFDE2:
 1752              		.4byte	.Lframe0
 1753              		.4byte	.LFB3
 1754              		.4byte	.LFE3-.LFB3
 1755              		.byte	0x4
 1756              		.4byte	.LCFI3-.LFB3
 1757              		.byte	0xd
 1758              		.uleb128 0xc
 1759              		.byte	0x4
 1760              		.4byte	.LCFI4-.LCFI3
 1761              		.byte	0x8e
 1762              		.uleb128 0x2
 1763              		.byte	0x8d
 1764              		.uleb128 0x3
 1938              		.4byte	.LCFI11-.Ltext0
DEFINED SYMBOLS
                            *ABS*:00000000 lab.c
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:15     .data:00000000 mass
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:16     .data:00000000 $d
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:21     .data:00000004 kF
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:27     .data:00000008 kM
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:33     .data:0000000c l
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:39     .data:00000010 MAXPHI2
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:45     .data:00000014 MINPHI2
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:51     .data:00000018 g
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:57     .text:00000000 lab
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:64     .text:00000000 $a
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:116    .text:00000060 VelocityEst
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:496    .text:00000578 lab3
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:1334   .text:000010c0 Command
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:99     .text:00000054 $d
                            *COM*:00000010 x_nom
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:122    .text:00000060 $a
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:181    .text:00000108 $d
                            *COM*:00000004 initialize
                            *COM*:00000004 previousXMeas
                            *COM*:00000004 previousYMeas
                            *COM*:00000004 previousZMeas
                            *COM*:00000004 VelEstX
                            *COM*:00000004 VelEstY
                            *COM*:00000004 VelEstZ
                            *COM*:00000020 real_mocap
                            *COM*:00000020 mocap
                            *COM*:00000004 velocityEstHolder
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:197    .text:00000140 $a
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:812    .text:000009dc $d
                            *COM*:00000004 takeoff2
                            *COM*:00000004 IntegralHolder
                            *COM*:00000004 roll_desired
                            *COM*:00000004 pitch_desired
                            *COM*:00000004 yaw_desired
                            *COM*:00000044 imusensor
                            *COM*:00000010 cnt_u
                            *COM*:00000010 u
                            *COM*:0000000c errorcum
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:845    .text:00000a5c $a
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:1221   .text:00000f84 lab2
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:1319   .text:0000109c $d
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:1340   .text:000010c0 $a
C:\Users\bkuo\AppData\Local\Temp/cckNfaaa.s:1717   .text:000015c4 $d
                            *COM*:00000040 Winv
                            *COM*:00000010 omega_cmd2
                            *COM*:00000010 omega_cmd
                            *COM*:00000010 cmd
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized
                            *COM*:0000000c z

UNDEFINED SYMBOLS
__nesf2
__subsf3
__extendsfdf2
__divdf3
__truncdfsf2
__mulsf3
__subdf3
__muldf3
__adddf3
__addsf3
__gtsf2
__ltsf2
cos
sin
__fixunssfsi
matrix_multiply
sqrt
WO_SDK
WO_Direct_Individual_Motor_Control
